<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[蹤影]]></title>
  <link href="http://smlsun.com/atom.xml" rel="self"/>
  <link href="http://smlsun.com/"/>
  <updated>2013-05-09T21:59:21+08:00</updated>
  <id>http://smlsun.com/</id>
  <author>
    <name><![CDATA[smlsun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
    <entry>
      




<title type="html"><![CDATA[企業級開發框架：extjs 與 grails 的完美組合]]></title>
<link href="http://smlsun.com/blog/2013/05/09/extjs-with-grails/"/>
<updated>2013-05-09T21:44:00+08:00</updated>
<id>http://smlsun.com/blog/2013/05/09/extjs-with-grails</id>

      <content type="html"><![CDATA[<p>本篇的重點在於說明 extjs 作為 web 應用程式前端的 framework，如何與目前常用的 full stack framework 進行整合，在此將以 grails 為例，當然不只可以跟 grails 整合，其他像 RoR 或者 .net，甚至是 node.js 都可以作為 extjs 的後端服務提供者。</p>

<p>透過 grails 這樣的整合範例，希望可以讓讀者體會不只能夠快速開發，一旦應用程式大到一定程度，也可以很方便的維護，並且在開發流程中的循環都可以順暢的不停轉動。</p>

<hr />

<h2>前後端分工</h2>

<p>開發大型軟體，或是時程上較趕的時候最怕等來等去，在開發應用程式時，最需要確認的是資料庫的設計，一旦定義好之後，如何快速完成 model 並且將測試資料建立完成，以便進行測試，透過 grails 與 extjs 剛好可以完美的解決此問題，前幾篇介紹到的關於 extjs model 類別的使用，其概念與 grails 剛好一拍即合，同樣以之前 <a href="http://ithelp.ithome.com.tw/question/10120206">extjs mvc 為例</a> 裡面用到的 Item，batch，以及 itemImage，在 grails 中宣告如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kn">package</span> <span class="n">finder</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">Item</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">name</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">title</span><span class="o">=</span><span class="s2">&quot;&quot;</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">description</span><span class="o">=</span><span class="s2">&quot;&quot;</span>
</span><span class='line'>      <span class="kd">static</span> <span class="n">hasMany</span><span class="o">=[</span><span class="nl">itemImages:</span><span class="n">ItemImage</span><span class="o">]</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kn">package</span> <span class="n">finder</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">Batch</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">name</span>
</span><span class='line'>      <span class="kd">static</span> <span class="n">belongsTo</span> <span class="o">=[</span><span class="nl">item:</span><span class="n">Item</span><span class="o">]</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kn">package</span> <span class="n">finder</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">ItemImage</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Item</span> <span class="n">item</span>
</span><span class='line'>  <span class="n">String</span> <span class="n">name</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>grails 可以把它看做 java 中的 RoR，因此也有「約定優於配置」的特性以往在傳統 java 對於 O/R mapping 這樣的技術，往往需要大量的 xml 定義，在 grails 中三個資料表的設定，就像上面的程式碼一樣，輕鬆簡單！不需要在對資料庫進行資料表建立，一旦 grails 啟動就會檢查資料庫是否有對應的資料表，判斷若是 develop mode 將會使用虛擬資料庫，在記憶體中就會建立好三個 table，不需要有實體就可以開始對你的應用程式開始進行測試，一旦開發完成，只要進行設定轉換為實體資料庫即可，接著在 grails 中有個類別 BootStrap 在這裡可以定義你要測試的初始資料，以便進行相關應用開發，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kn">import</span> <span class="nn">finder.*</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">BootStrap</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">def</span> <span class="n">init</span> <span class="o">=</span> <span class="o">{</span> <span class="n">servletContext</span> <span class="o">-&gt;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">environments</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">development</span> <span class="o">{</span>
</span><span class='line'>              <span class="kt">def</span> <span class="n">item1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Item</span><span class="o">(</span><span class="nl">name:</span><span class="s2">&quot;item1&quot;</span><span class="o">).</span><span class="na">save</span><span class="o">(</span><span class="nl">failOnError:</span> <span class="kc">true</span><span class="o">,</span> <span class="nl">flush:</span> <span class="kc">true</span><span class="o">)</span>
</span><span class='line'>              <span class="kt">def</span> <span class="n">batch1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Batch</span><span class="o">(</span><span class="nl">name:</span><span class="s2">&quot;batch1&quot;</span><span class="o">,</span><span class="nl">item:</span><span class="n">item1</span><span class="o">).</span><span class="na">save</span><span class="o">(</span><span class="nl">failOnError:</span> <span class="kc">true</span><span class="o">,</span> <span class="nl">flush:</span> <span class="kc">true</span><span class="o">)</span>
</span><span class='line'>              <span class="kt">def</span> <span class="n">itemImage1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ItemImage</span><span class="o">(</span><span class="nl">name:</span><span class="s2">&quot;itemImage1.jpg&quot;</span><span class="o">,</span><span class="nl">item:</span><span class="n">item1</span><span class="o">).</span><span class="na">save</span><span class="o">(</span><span class="nl">failOnError:</span> <span class="kc">true</span><span class="o">,</span> <span class="nl">flush:</span> <span class="kc">true</span><span class="o">)</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="kt">def</span> <span class="n">destroy</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>一旦伺服器啟動就會執行在 BootStrap 中的程式碼，如果我們在此區塊撰寫新增資料的程式，每次啟動 grails 都會有新的資料可以進行測試，反覆測試的過程中將免去每次都要建立測試資料的麻煩，並且有預設的設定值也可以在此定義，資料準備好了，前後端就可以分開進行，接著來看如何快速定義好 extjs 與 grails 的溝通橋樑。</p>

<h2>以 RESTful 進行前後端溝通</h2>

<p>extjs 4 有個新的 proxy type：rest，一但定義為 rest proxy，在資料操作上將會根據你對前端資料的更新動作給予不同的 http method，如下：</p>

<ul>
<li>新增：POST</li>
<li>修改：UPDATE</li>
<li>刪除：DELETE</li>
<li>查詢：GET</li>
</ul>


<p>在 grails 中我們會用到另一個敏捷開發特性：Don’t Repeat Yourself(DRY)，在 Grails 有另一個設定檔 URLMappings 可以讓我們設定根據前端 request 的 http method 導入至對定的後端 controller method，該檔案設定如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kd">class</span> <span class="nc">UrlMappings</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">static</span> <span class="n">mappings</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>      <span class="s2">&quot;/$controller/$action?/$id?&quot;</span><span class="o">{</span>
</span><span class='line'>          <span class="n">constraints</span> <span class="o">{</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="s2">&quot;/rest/$controller/$id&quot;</span><span class="o">{</span>
</span><span class='line'>          <span class="n">action</span> <span class="o">=</span> <span class="o">[</span><span class="nl">GET:</span> <span class="s2">&quot;show&quot;</span><span class="o">,</span> <span class="nl">PUT:</span><span class="s2">&quot;update&quot;</span><span class="o">,</span> <span class="nl">DELETE:</span><span class="s2">&quot;delete&quot;</span><span class="o">]</span>
</span><span class='line'>          <span class="n">constraints</span> <span class="o">{</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="s2">&quot;/rest/$controller&quot;</span><span class="o">{</span>
</span><span class='line'>          <span class="n">action</span> <span class="o">=</span> <span class="o">[</span><span class="nl">GET:</span><span class="s2">&quot;listAll&quot;</span><span class="o">,</span> <span class="nl">POST:</span> <span class="s2">&quot;create&quot;</span><span class="o">]</span>
</span><span class='line'>          <span class="n">constraints</span> <span class="o">{</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="s2">&quot;/&quot;</span><span class="o">(</span><span class="nl">view:</span><span class="s2">&quot;/home/index&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="s2">&quot;500&quot;</span><span class="o">(</span><span class="nl">view:</span><span class="s1">&#39;/error&#39;</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到在 URLMappings 的設定中：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="s2">&quot;/rest/$controller/$id&quot;</span><span class="o">{</span>
</span><span class='line'>  <span class="n">action</span> <span class="o">=</span> <span class="o">[</span><span class="nl">GET:</span> <span class="s2">&quot;show&quot;</span><span class="o">,</span> <span class="nl">PUT:</span><span class="s2">&quot;update&quot;</span><span class="o">,</span> <span class="nl">DELETE:</span><span class="s2">&quot;delete&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">constraints</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot;/rest/$controller&quot;</span><span class="o">{</span>
</span><span class='line'>  <span class="n">action</span> <span class="o">=</span> <span class="o">[</span><span class="nl">GET:</span><span class="s2">&quot;listAll&quot;</span><span class="o">,</span> <span class="nl">POST:</span> <span class="s2">&quot;create&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">constraints</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>代表如果有傳入 id 則是上述的第一種 mapping 方式，根據 http method 的不同對應到不同的 controller 的 method；若沒有 id 則是第二種，實際代表的網址可能為 <code>http://localhost/rest/item/1</code> 或者 <code>http://localhost/rest/batch/</code>，就會根據 UrlMappings 的定義觸動在 controller 中的 method，範例如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kn">package</span> <span class="n">finder</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">grails.converters.JSON</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">ItemController</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">def</span> <span class="n">listAll</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>      <span class="kt">def</span> <span class="n">items</span><span class="o">=</span><span class="n">Item</span><span class="o">.</span><span class="na">list</span><span class="o">()</span>
</span><span class='line'>      <span class="n">render</span> <span class="o">(</span><span class="nl">contentType:</span> <span class="s1">&#39;text/json&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="o">[</span>
</span><span class='line'>              <span class="nl">items:</span> <span class="n">items</span><span class="o">,</span>
</span><span class='line'>              <span class="nl">total:</span> <span class="n">items</span><span class="o">.</span><span class="na">size</span><span class="o">()</span>
</span><span class='line'>          <span class="o">]</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">def</span> <span class="n">show</span> <span class="o">=</span> <span class="o">{</span> <span class="n">Long</span> <span class="n">id</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="kt">def</span> <span class="n">item</span><span class="o">=</span><span class="n">Item</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">id</span><span class="o">)</span>
</span><span class='line'>      <span class="n">render</span> <span class="o">(</span><span class="nl">contentType:</span> <span class="s1">&#39;text/json&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="o">[</span>
</span><span class='line'>              <span class="nl">item:</span> <span class="n">item</span>
</span><span class='line'>          <span class="o">]</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kt">def</span> <span class="n">create</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>      <span class="o">...</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="kt">def</span> <span class="n">update</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>      <span class="o">...</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="kt">def</span> <span class="n">delete</span><span class="o">={</span>
</span><span class='line'>      <span class="o">...</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>剛剛提到對應的 controller method 就如同上面程式碼中的 listAll，show 等等，到這邊，後端的 server 算是已經準備好，可以開始進行測試，是否發現跟一般 java 比，簡潔很多，寫起來還有點像 javascript？實際上 Grails 骨子裡還是 java，執行時會編譯為 class，因為搭配了 java 中的動態語言 groovy 才有這樣的效果，且並沒有捨棄 java 多年累積廣大的第三方套件，當你需要時皆可以引入，不需重新造輪。</p>

<h2>extjs store 類別提供的 sync</h2>

<p>後端 server 快速準備好後，在 extjs 更加簡化呼叫更新資料請求的程序，在 store 的類別提供一個 method 為 sync()，作用在於一旦 store 載入後，只要對 store 執行 insert，remove，insert 確定更新完成後，一旦執行就會對後端 server 發出 http request，所以，你不用勞你費心，extjs 已幫你完成相關程序，範例 controller 如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Ext</span><span class="p">.</span><span class="nx">define</span><span class="p">(</span><span class="s1">&#39;Frontend.controller.common.Standard&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">extend</span><span class="o">:</span> <span class="s1">&#39;Ext.app.Controller&#39;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">doRead</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">store</span><span class="p">.</span><span class="nx">load</span><span class="p">();</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">doCreate</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">store</span><span class="p">.</span><span class="nx">insert</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">);</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">doDelete</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">selection</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">grid</span><span class="p">.</span><span class="nx">getSelectionModel</span><span class="p">().</span><span class="nx">getSelection</span><span class="p">()[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">selection</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">store</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="nx">selection</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">doUpdate</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">//更新對 store 的異動</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">store</span><span class="p">.</span><span class="nx">sync</span><span class="p">({</span>
</span><span class='line'>            <span class="nx">success</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;success&quot;</span><span class="p">);</span>
</span><span class='line'>                <span class="nx">Ext</span><span class="p">.</span><span class="nx">Msg</span><span class="p">.</span><span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;Status&#39;</span><span class="p">,</span> <span class="s1">&#39;更新成功&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="nx">failure</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">,</span> <span class="nx">options</span><span class="p">){</span>
</span><span class='line'>                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;failure&quot;</span><span class="p">);</span>
</span><span class='line'>                <span class="nx">Ext</span><span class="p">.</span><span class="nx">Msg</span><span class="p">.</span><span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;Status&#39;</span><span class="p">,</span> <span class="s1">&#39;更新失敗&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>快速前端元件建立</h2>

<p>即使使用像 grails 這樣的 full stack framework 對於前端介面還是需要自己重頭刻起，若是搭配 sencha architect 將可以補齊這方面的不足：快速建立前端介面，並且為了敏捷快速的開發，一旦介面拉好，就可以儘快確認需求與操作介面，一旦沒問題所完成的介面就可以開始著手開發，介面的變動也可以在 architect 中完成，還記得之前有介紹過在 extjs 中的每個小元件都可以作為類別存在，並且 controller 若以每個元件為目標設計，透過混和（mixins）的特性組合 controller 就可以快速調整介面的呈現與互動。</p>

<h2>extjs develop mode &amp; test</h2>

<p>一個好的框架，必須還要能夠方便測試，在 extjs 中可以很方便的指定某個類別作為初始的 view，可以參考上一篇 <a href="http://ithelp.ithome.com.tw/question/10120289">Sencha Architect 快速開發 extjs</a>中「方便進行測試與開發」的介紹，即使你沒有用 Architect，也可以自行定義，別忘了利用這樣的特性對開發中的介面進行測試。</p>

<h2>extjs production mode</h2>

<p>應用程式開發到一個階段，就會從 develop 進階到所謂的 production mode，其目的就是要盡量加速資源的載入，在前端的世界就是要將所有的 js 檔最小化，並且合為一個 js 檔，雖然 extjs 有動態載入，實際在 production 模式這樣是很耗效能的，如果我們要自行利用 minify 工具進行壓縮，在 extjs 中各類別的相依性就無法顧慮到，並且可能因為組成檔案順序不正確造成衝突，所幸，extjs 也注意到這樣的問題，提供 Sencha cmd 來處理 minify js 的程序，並且可以搭配 Architect 使用，步驟如下：</p>

<ol>
<li><p>利用 sencha cmd 產生 extjs 專案</p>

<pre><code> sencha -sdk {extjs_home} generate app {projectName} {projectLocation}
</code></pre></li>
<li><p>修改 sencha 設定檔：修改 {projectLocation}/.sencha/app/sencha.cfg，加入下面兩行 ：</p>

<pre><code> app.dir={projectLocation}
 app.classpath=${app.dir}/app.js,${app.dir}/app
</code></pre></li>
<li><p>進到 {projectLocation} 執行 production 編譯</p>

<pre><code> sencha app build production
</code></pre></li>
</ol>


<p>如此一來就會將執行完的結果產出在 {projectLocation}/build 底下，就是這們簡單！</p>

<h2>resource 控管</h2>

<p>extjs 所完成的介面在 grails 中將作為 resource 存在，且對 grails 而言屬於靜態檔案，因此可以進行快取來加速資源載入，而在 grails 有一設定檔 ApplicationResources 專門在定義要載入的 resource，在設定時必須考慮 develop 與 production 的不同，設定方式如下:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kn">import</span> <span class="nn">org.codehaus.groovy.grails.web.context.ServletContextHolder</span> <span class="k">as</span> <span class="n">SCH</span>
</span><span class='line'><span class="n">modules</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// develop mode 使用</span>
</span><span class='line'>  <span class="n">extjs4_dev</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">defaultBundle</span> <span class="s1">&#39;finder_dev&#39;</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">resource</span> <span class="nl">url:</span> <span class="s1">&#39;extjs4_dev/resources/ext-theme-neptune/ext-theme-neptune-all.css&#39;</span>     
</span><span class='line'>      <span class="n">resource</span> <span class="nl">url:</span> <span class="s1">&#39;ext/ext-all.js&#39;</span>
</span><span class='line'>      <span class="n">resource</span> <span class="nl">url:</span> <span class="s1">&#39;ext/ext-theme-neptune.js&#39;</span>
</span><span class='line'>      <span class="n">resource</span> <span class="nl">url:</span> <span class="s1">&#39;app.js&#39;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">getFilesForPath</span><span class="o">(</span><span class="s1">&#39;app&#39;</span><span class="o">).</span><span class="na">each</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">resource</span> <span class="nl">url:</span> <span class="n">it</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>    
</span><span class='line'>  <span class="c1">// production mode 使用</span>
</span><span class='line'>  <span class="n">extjs4</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">defaultBundle</span> <span class="s1">&#39;finder&#39;</span>
</span><span class='line'>      <span class="n">resource</span> <span class="nl">url:</span> <span class="s1">&#39;extjs4/resources/finder_extjs-all.css&#39;</span>
</span><span class='line'>      <span class="n">resource</span> <span class="nl">url:</span> <span class="s1">&#39;extjs4/all-classes.js&#39;</span>
</span><span class='line'>  <span class="o">}</span>    
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 載入 path 參數底下所有的檔案作為 resource</span>
</span><span class='line'><span class="kt">def</span> <span class="nf">getFilesForPath</span><span class="o">(</span><span class="n">path</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">def</span> <span class="n">webFileCachePaths</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>    <span class="kt">def</span> <span class="n">servletContext</span> <span class="o">=</span> <span class="n">SCH</span><span class="o">.</span><span class="na">getServletContext</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="o">(!</span><span class="n">servletContext</span><span class="o">)</span> <span class="k">return</span> <span class="n">webFileCachePaths</span>
</span><span class='line'>    <span class="kt">def</span> <span class="n">realPath</span> <span class="o">=</span> <span class="n">servletContext</span><span class="o">.</span><span class="na">getRealPath</span><span class="o">(</span><span class="s1">&#39;/&#39;</span><span class="o">)</span>
</span><span class='line'>    <span class="kt">def</span> <span class="n">appDir</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="s2">&quot;$realPath/$path&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="n">appDir</span><span class="o">.</span><span class="na">eachFileRecurse</span> <span class="o">{</span><span class="n">File</span> <span class="n">file</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">file</span><span class="o">.</span><span class="na">isDirectory</span><span class="o">()</span> <span class="o">||</span> <span class="n">file</span><span class="o">.</span><span class="na">isHidden</span><span class="o">())</span> <span class="k">return</span>
</span><span class='line'>        <span class="n">webFileCachePaths</span> <span class="o">&lt;&lt;</span> <span class="n">file</span><span class="o">.</span><span class="na">path</span><span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="n">realPath</span><span class="o">,</span> <span class="s1">&#39;&#39;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">webFileCachePaths</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>經由這樣的設定，grails 會自動將 block 中所定義的 js 檔自動合為單一 js 檔，接著我們只要在 grails 中特有的 gsp 加入下列判斷：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="o">&lt;</span><span class="nl">g:</span><span class="k">if</span> <span class="n">env</span><span class="o">=</span><span class="s1">&#39;development&#39;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nl">r:</span><span class="n">require</span> <span class="n">modules</span><span class="o">=</span><span class="s2">&quot;extjs4_dev&quot;</span><span class="s">/&gt;</span>
</span><span class='line'><span class="s">&lt;/</span><span class="nl">g:</span><span class="k">if</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nl">g:</span><span class="k">else</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nl">r:</span><span class="n">require</span> <span class="n">modules</span><span class="o">=</span><span class="s2">&quot;extjs4&quot;</span><span class="s">/&gt;</span>
</span><span class='line'><span class="s">&lt;/</span><span class="nl">g:</span><span class="k">else</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>就會根據不同的開發模式載入不同的 resource 組合。</p>

<h2>打完收工，期待下次在相會！</h2>

<p>這是個想法，目前我們也正在投入這樣的應用，預期可以帶來不一樣的開發方式，軟體開發方式不停的在進步，也許還有很多團隊還在使用老舊的方法，這樣的組合，除了可以敏捷快速的開發，利用 extjs 所提供的方便性，相信可以帶來效率的提升，特別是前端的物件建立與操作，表單式的應用程式非常適合，筆者也曾在企業進行 extjs 的教育訓練，歡迎有興趣的讀者可以互相切磋。</p>

<p>系列文章到此告一段落，期待下次在與大家分享！</p>
<p><a rel="bookmark" href="http://smlsun.com/blog/2013/05/09/extjs-with-grails/"></a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[利用 Sencha Architect 快速開發 extjs]]></title>
<link href="http://smlsun.com/blog/2013/05/09/extjs4-sencha-architect-intro/"/>
<updated>2013-05-09T10:45:00+08:00</updated>
<id>http://smlsun.com/blog/2013/05/09/extjs4-sencha-architect-intro</id>

      <content type="html"><![CDATA[<p>Sencha Architect，基於 extjs 的可視化開發工具，如果你目前主要的前端開發框架選擇的是 extjs，那你就不能錯過，Sencha Architect 提供的功能比妳想像的多更多，他不只是使用 extjs 的元件來進行 mockup 而已，妳可以利用他完成所有妳想到的功能，幫你節省很多除錯的時間，如果有過開發 extjs 的經驗純文字開發除錯是非常費時的。</p>

<p>早在 Sencha Architect 前一代 designer 時，筆者就有使用過，這一版在徹底大改版後的物件化設計，好用許多，非常值得一試。</p>

<hr />

<p>使用 Sencha Architect 來開發 extjs 的好處，除了他會幫你檢查一些常見的問題，比如 id 與 class 名稱的重覆與錯誤，對於前端很最重要的畫面呈現，經由他所組合出來的畫面，幾乎就是實際運行的結果，網路上對於一些基礎的使用技巧已有詳細介紹，這邊就不贅述，在開始閱讀下面的內容時妳可以先參考下面連結，先對基本操作有些概念。</p>

<p><a href="http://ithelp.ithome.com.tw/question/10091599">使用 Sencha Architect 2 快速搞定 Web App 的 UI</a></p>

<p>假設妳已經讀過上面連結，最好還能夠實際操作看看，相信有些概念後會更容易吸收。</p>

<p>並且可以先了解一下 <a href="http://ithelp.ithome.com.tw/question/10120206">extjs 中的 mvc 還有物件導向的特性</a>，在 Sencha Architect 中，妳將可以很輕易做到，一些基礎的使用方式筆者就不贅述，本篇將介紹進階使用技巧。</p>

<h2>物件導向：元件重覆使用</h2>

<p>拜 extjs 所賜，讓前端純 javascript 的開發也能用物件導向的方式來進行，我們可以將一些常用的元件重覆使用，一旦我們需要調整時，只要調整基礎元件，就可以同時影響所有有使用到的元件，參考下圖：</p>

<p><img src="https://lh6.googleusercontent.com/-r6dKsDsjny8/UYoJTVdWbrI/AAAAAAAALq4/ZcWWw55l13s/w295-h351-no/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7+2013-05-02+%25E4%25B8%258A%25E5%258D%258811.13.42.jpg" alt="image" /></p>

<p>可以看到 saveBtn 同時出現在三個自定元件，在 Sencha Architect 裡如果是屬於 link 元件將會用藍色線連結，讓你可以一目了然，一旦改了最原始的 saveBtn 將會連動其他的元件，如下圖</p>

<p><img src="https://lh3.googleusercontent.com/-CRJZ6KfxDso/UYoJT3XjC2I/AAAAAAAALrE/e1G0YHxzXfw/w297-h487-no/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7+2013-05-02+%25E4%25B8%258A%25E5%258D%258811.21.51.jpg" alt="image" /></p>

<p>物件導向的特性讓你將共用與特有的屬性能夠有效率的管理，在妳需要時組合成妳想的介面。</p>

<h2>toolbox</h2>

<p>除了利用類別的方式，我們也可將我們自定義的元件加入 toolbox 以利重覆使用，使用上如下圖：</p>

<p><img src="https://lh3.googleusercontent.com/-iZyb8gySybw/UYoJUgko80I/AAAAAAAALrI/SmexsiI1Ty4/w529-h270-no/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7+2013-05-02+%25E4%25B8%258A%25E5%258D%258811.26.43.jpg" alt="image" /></p>

<p>一旦此元件屬於標準元件妳可以將其加入 toolbox 加以管理，需要使用時，拖拉至妳需要放置的位置即可。</p>

<h2>model 資料表令 Store 連結真實資料</h2>

<p>除了在一開始基礎操作連結中有說明到可以定義 model 之外，妳也可以連真實的資料來進行呈現。</p>

<p>一旦連結成功，在 store 旁，將會有一個黑色眼睛，表示資料已連結，實際在 Architect 裡，也會將資料真實呈現。</p>

<p><img src="https://lh4.googleusercontent.com/-zqKWz11Vqx8/UYoJVkvPa1I/AAAAAAAALrY/Jte5iEJvZkE/w602-h229-no/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7+2013-05-02+%25E4%25B8%258A%25E5%258D%258811.38.22.jpg" alt="image" /></p>

<p>如此一來，除了 grid 的欄位顯示，我們也可以透過 Architect 知道實際呈現時資料內容是否正確。</p>

<h2>進階屬性定義</h2>

<p>在 Sencha Architect 裡的每個元件皆有預設的屬性可以讓您方便的進行定義，但實際上妳可能會找不到妳要的屬性，沒關係，妳也可以自定，如下圖：</p>

<p><img src="https://lh5.googleusercontent.com/-5ghG4LSpW68/UYoJVMRl7UI/AAAAAAAALrQ/jaTUxgolSD4/w301-h291-no/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7+2013-05-02+%25E4%25B8%258A%25E5%258D%258811.31.02.jpg" alt="image" /></p>

<p>一旦妳輸入的屬性不存在，妳可以點選 add，就會加入下方的屬性，並且可選取該屬性的資料型態，根據妳所選的資料屬性 Architect 會幫你進行資料型態檢查。</p>

<h2>介面 layout 定義</h2>

<p>這部份是筆者認為非常棒的功能，在使用 extjs 時，如果是利用純文字編輯，對於元件的佈置很難直覺的想像，透過 Architect 可以很方便完成我們希望的介面呈現，舉個例子：</p>

<p><img src="https://lh3.googleusercontent.com/-2x6Rf3kw21Y/UYo606h83XI/AAAAAAAALrw/NkggFPdeqkY/w436-h126-no/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7+2013-05-08+%25E4%25B8%258B%25E5%258D%25886.55.06.jpg" alt="image" /></p>

<p>上圖是在<a href="http://ithelp.ithome.com.tw/question/10120206">上一篇 MVC</a> 文章中，用到的 ItemGrid 可以看到若是單獨看此元件的話，其實是縮在一起的，但如果我們要確認實際放入 ItemEditor tab 中的狀況就可以透過 Architect：</p>

<p><img src="https://lh5.googleusercontent.com/-5zPQbOzLYk4/UYo61v204lI/AAAAAAAALr4/sO0SnYOfakE/w603-h178-no/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7+2013-05-08+%25E4%25B8%258B%25E5%258D%25886.58.44.jpg" alt="image" /></p>

<p>圖中可以看到使用的 layout 為 vbox，結構上如下圖：</p>

<p><img src="https://lh6.googleusercontent.com/-ZSGWB1J0R-0/UYo62Dv1_mI/AAAAAAAALsA/i6lYouhtbQU/w225-h110-no/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7+2013-05-08+%25E4%25B8%258B%25E5%258D%25887.03.16.jpg" alt="image" /></p>

<p>由 listToolbar 以及 itemGrid 組成，在這邊希望能夠將下方得 itemGrid 填滿全部，如下圖，實際呈現上 grid 並沒有填滿：</p>

<p><img src="https://lh5.googleusercontent.com/-yKNyzxCP6Cw/UYo77sp5o9I/AAAAAAAALsc/uTg9bFi3XD0/w603-h148-no/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7+2013-05-08+%25E4%25B8%258B%25E5%258D%25887.49.25.jpg" alt="image" /></p>

<p>那是因為沒有設置 Flex，所以我們將 grid 的 Flex 設為 1，可以看到，顯示上已全部填滿可以顯示的區域:</p>

<p><img src="https://lh6.googleusercontent.com/-WCIo746bzlQ/UYo63BQT0mI/AAAAAAAALsI/yTewTe8q944/w603-h468-no/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7+2013-05-08+%25E4%25B8%258B%25E5%258D%25887.07.28.jpg" alt="image" /></p>

<p>此時如果我們要看其他 layout 情形將可以很方便完成，以往直覺上我們可能會使用 fit，但是結果可能不是我們所預期，透過這樣的工具我們可以很快速完成佈置，專注在重要的互動事件與邏輯上，最後附上若同樣的介面，使用 fit 會是怎樣的情形：</p>

<p><img src="https://lh4.googleusercontent.com/-vwy-OwEHBtM/UYo63hR1XHI/AAAAAAAALsQ/I5k90ZYFgLU/w603-h462-no/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7+2013-05-08+%25E4%25B8%258B%25E5%258D%25887.11.17.jpg" alt="image" /></p>

<p>只有 toolbar 被填滿，grid 不見了，所以，妳可以省下寶貴生命快速確認介面的呈現。</p>

<h2>方便進行測試與開發</h2>

<p>在 extjs 的 application.js 中可以定義一個屬性為 <code>autoCreateViewport</code>，一旦定義此屬性為 true，extjs 會在 view 底下自動顯示檔案為 Viewport.js 定義的內容，而在 Architect 中每一個 view 類別都可以標示為 Initial View，如下圖中的 Mark as Initial View：</p>

<p><img src="https://lh3.googleusercontent.com/-uGliPz2sLMU/UYo60ILc2WI/AAAAAAAALro/RM6EnhQDGjk/w259-h249-no/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7+2013-05-08+%25E4%25B8%258B%25E5%258D%25886.45.47.jpg" alt="image" /></p>

<p>這樣有什麼好處？在開發 extjs 時，如果應用程式是需要進行登入的，每次更新程式後要進行測試，免不了需要經過登入步驟以及點選功能來開啟需要測試的功能，次數少還好，如果反覆測試的情況下，著實浪費時間，更甚者，假設應用程式是多人開發，可能在執行某應用程式前，需要經過別的應用程式，但如果前面步驟尚未完成，就無法進行測試，這時候這樣的功能就很方便，因為我們可以針對單一元件進行單元功能開發與測試，大大降低功能間的相依性，一旦各自元件開發完成，就可以進行組合最終在進行整合功能測試即可！</p>

<p>Sencha Architect 確實有他存在及使用的價值，筆者使用純文字開發 extjs 多年，遇到很多介面上的問題，並且依靠經驗除過不少 bug，但是都沒有使用 Sencha Architect 來的快及準確，話雖這麼說，IDE 也沒有辦法幫你寫出「對」的程式，強烈建議使用 Sencha Architect 務必先了解 extjs 的原理，如此才能夠讓你駕馭 Architect，就像開車一樣，沒有先了解如何開車就上路，開的不好錯怪車子，還有可能出車禍喔。</p>

<p>經由這四篇文章，希望可以帶給讀者 extjs 從入門到進階的知識，以及如何透過 IDE 快速建立應用網站外觀，並且確認，減少不必要的反覆測試。</p>

<p>最後的第五天，要為大家說明在實際的開發環境，extjs 如何與後端應用程式進行互動，在軟體開發技術上越來越方便的現在，更提倡敏捷快速的開發，善用 extjs MVC 架構作為 view 層，來與後端的 MC(?)搭配，將以 java 中 Ruby on Rails：Grails 來為大家介紹，企業級開發框架：extjs 與 grails 的完美組合。</p>
<p><a rel="bookmark" href="http://smlsun.com/blog/2013/05/09/extjs4-sencha-architect-intro/"></a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[extjs mvc 架構：繼承與模組重覆使用]]></title>
<link href="http://smlsun.com/blog/2013/05/08/extjs-oo/"/>
<updated>2013-05-08T08:42:00+08:00</updated>
<id>http://smlsun.com/blog/2013/05/08/extjs-oo</id>

      <content type="html"><![CDATA[<p>兩篇對 extjs 的基本介紹後，總算要進入主菜了，也就是在 extjs 中的物件導向 MVC 架構，物件導向的觀念，在網路上或書上都可以找到相關資料，用不用的好就是一個人的功力，此篇文章中，將透過幾個例子讓讀者了解 extjs 的物件導向操作。</p>

<hr />

<p><a href="http://www.showframework.com/2012/07/extjs-mvc-architecture/">ExtJS 4 MVC架構講解</a></p>

<p>引用上述文章的開頭：</p>

<blockquote><p>大規模客戶端應用通常不好實現不好組織也不好維護，因為功能和人力的不斷增加，這些應用的規模很快就會超出掌控能力，ExtJS 4 帶來了一個新的應用架構，不但可以組織代碼，還可以減少實現的內容 新的應用架構遵照一個類 MVC 的模式，模型（Models）和控制器（Controllers）首次被引入。業界有很 ​​多種 MVC 架構，基本大同小異，ExtJS 4的定義如下：</p>

<ul>
<li>Model: 資料的集合，例如 User 帶有 username 和 password 的資料，model 知道如何持久化自己的數據，並且可以和其他 model 關聯，model 跟 ExtJS 3中 的 Record 有點像（區別是，Record 只是單純的扁平結構，而 Model 可以 nest ），通常都用在 Store 中去展示 grid 和其他組件的資料</li>
<li>View: 用於界面展示– grid, tree, panel都是view</li>
<li>Controllers: 安放所有使你的 app 正確工作的代碼的位置，具體一點應該是所有動作，例如如何渲染 view，如何初始化 model，和 app 的其他邏輯</li>
</ul>
</blockquote>

<p>在我早先的令一篇文章中也有引用到，<a href="http://smlsun.com/blog/2013/03/21/extjs4-mvc/">Extjs4: Mvc 使用簡介與範例介紹</a>，在該篇文章中說明到較多的實作細節，本篇專注於 mvc 結構與特性，如果讀者有興趣也可以參考閱讀，在開始之前，先提一下兩個重要的物件導向觀念：</p>

<ul>
<li>單一責任原則（single responsibility principle:SRP）：當一個類別需要修改時應該只有一個理由。</li>
<li>關注點分離（separation of conserns:SoC）：把應用程式功能分解成數個不重疊的模組。</li>
</ul>


<p>遵循這兩個原則，最重要的好處就是要能夠重覆使類別，令單一類別不要過於複雜，如此一來程式在設計上就可以比較接近組合積木，一個個零件完成後，可以根據不同的狀況組合。</p>

<p>為了能夠設計出可以重覆使用的類別，將針對三種不同的課題，繼承，混和以及 model 關連建立，就讓我們從 mvc 中的 model 資料模型開始。</p>

<h2>model - 關連建立</h2>

<p>假設我們設計一個應用程式，其資料模型如下：</p>

<p><img src="https://lh5.googleusercontent.com/-0q850mONEZ0/UYnJDk0otZI/AAAAAAAALqA/sIPHKvaPjZs/w603-h115-no/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7+2013-05-08+%25E4%25B8%258A%25E5%258D%25881.01.45.jpg" alt="image" /></p>

<p>可以看到有三個 table：item（品項），itemImage（品項圖片），batch（批號），其中 item 可以有多張圖片，批號屬於 item，根據這樣的描述，可以整理出兩個關係：</p>

<ul>
<li>item 可以有多張圖片：item hasMany itemImage</li>
<li>批號屬於 item：batch belongsTo item</li>
</ul>


<p>根據這樣的關係，我們可以利用 extjs 來建立對應的類別。</p>

<p>三個資料表的基本宣告程式碼如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">//品項</span>
</span><span class='line'><span class="nx">Ext</span><span class="p">.</span><span class="nx">define</span><span class="p">(</span><span class="s1">&#39;finder_extjs.model.Item&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">extend</span><span class="o">:</span> <span class="s1">&#39;Ext.data.Model&#39;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">fields</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;id&#39;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;name&#39;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;title&#39;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//圖片</span>
</span><span class='line'><span class="nx">Ext</span><span class="p">.</span><span class="nx">define</span><span class="p">(</span><span class="s1">&#39;finder_extjs.model.ItemImage&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">extend</span><span class="o">:</span> <span class="s1">&#39;Ext.data.Model&#39;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">fields</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;id&#39;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="nx">mapping</span><span class="o">:</span> <span class="s1">&#39;item.id&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;item_id&#39;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//批號</span>
</span><span class='line'><span class="nx">Ext</span><span class="p">.</span><span class="nx">define</span><span class="p">(</span><span class="s1">&#39;finder_extjs.model.batch&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">extend</span><span class="o">:</span> <span class="s1">&#39;Ext.data.Model&#39;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">fields</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;id&#39;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="nx">mapping</span><span class="o">:</span> <span class="s1">&#39;item.id&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;item_id&#39;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;name&#39;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>如此一來，三個資料表算是建立完成，但是彼此之間都是獨立沒有關係的，為此，我們需要要在加上關連的定義。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">//item hasMany itemImage</span>
</span><span class='line'><span class="nx">Ext</span><span class="p">.</span><span class="nx">define</span><span class="p">(</span><span class="s1">&#39;finder_extjs.model.Item&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">extend</span><span class="o">:</span> <span class="s1">&#39;Ext.data.Model&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="c1">//使用到的關連 model 務必引入  </span>
</span><span class='line'>    <span class="nx">uses</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="s1">&#39;finder_extjs.model.ItemImage&#39;</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="nx">hasMany</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">associationKey</span><span class="o">:</span> <span class="s1">&#39;itemImages&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">model</span><span class="o">:</span> <span class="s1">&#39;finder_extjs.model.ItemImage&#39;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 設定 foreignKey 將會作為查詢的 property name</span>
</span><span class='line'>        <span class="nx">foreignKey</span><span class="o">:</span> <span class="s1">&#39;item_id&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="c1">//跟據 name 將會產生對應的參照 function</span>
</span><span class='line'>        <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;itemImages&#39;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>多定義了關係一定要有用處，不然何必要花時間，實際在使用上我們可以：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">//item hasMany itemImage</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">item</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">finder_extjs</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">Item</span><span class="p">({</span><span class="nx">id</span><span class="o">:</span><span class="mi">1</span><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 一旦定義 hasMany extjs 將自動產生對應 name 的 function 回傳關連資料的 store 實體</span>
</span><span class='line'><span class="c1">//取得關連資料</span>
</span><span class='line'><span class="nx">item</span><span class="p">.</span><span class="nx">itemImage</span><span class="p">().</span><span class="nx">load</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>在上面的程式碼中，如果你有定義 model 的連結方式，實際上將會透過 http request 向後端查詢資料，並且帶有參數為：<code>filter:[{"property":"item_id","value":1}]</code>，一旦結果回傳，會根據 model 的 fields mapping 相關的欄位資料，如此一來當你有存取相關的資料時，就可以很方便的使用，免去撰寫重覆 ajax request 的步驟，接著來看 belongsTo 的例子。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">//batch belongsTo item</span>
</span><span class='line'><span class="nx">Ext</span><span class="p">.</span><span class="nx">define</span><span class="p">(</span><span class="s1">&#39;finder_extjs.model.batch&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">extend</span><span class="o">:</span> <span class="s1">&#39;Ext.data.Model&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">uses</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="s1">&#39;finder_extjs.model.Item&#39;</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="nx">belongsTo</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">model</span><span class="o">:</span> <span class="s1">&#39;finder_extjs.model.Item&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="c1">// 根據定義的 getterName 產生 function 來取得所屬 model 的參照</span>
</span><span class='line'>        <span class="nx">getterName</span><span class="o">:</span> <span class="s1">&#39;getItem&#39;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">batch</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">finder_extjs</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">Batch</span><span class="p">({</span><span class="nx">id</span><span class="o">:</span><span class="mi">1</span><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 根據 getterName 的設定將自動產生對應 name 的 function 回傳關連資料的 record</span>
</span><span class='line'><span class="c1">// 取得關連資料</span>
</span><span class='line'><span class="nx">batch</span><span class="p">.</span><span class="nx">getItem</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>同樣的一旦呼叫了 <code>batch.getItem();</code> 也會向後端請求取得資料，如此一來，只要資料結構與關係定義好，往後在使用時，就可以很方便的取得，甚至妳也可以這樣使用：<code>batch.getItem().itemImages().load()</code></p>

<p>在資料串查上，可以從關關連快速完成資料的取得，再來我們就來看看，mvc 中的 view 如何在 extjs 物件化，並且能夠重覆使用。</p>

<h2>view - 繼承與連結</h2>

<p>單純的建立 view 的元件這邊不多做說明，主要還是針對 extjs 物件導向特性來做說明，假設我們需要建立如同下圖的畫面：</p>

<p><img src="https://lh5.googleusercontent.com/-6uDmCuSY5vE/UYnJFCExBMI/AAAAAAAALqQ/wy7BAOoryi4/w603-h323-no/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7+2013-05-08+%25E4%25B8%258A%25E5%258D%258810.02.13.jpg" alt="image" /></p>

<p>在圖片中可以看到主要是由 form 以及 grid 所組成，有個共同的地方，就是兩者皆有同樣的 toolbar，因此在設計的時候，我們可以將 toolbar 獨立成一個類別，在兩個地方引入，如下圖：</p>

<p><img src="https://lh5.googleusercontent.com/-1IPFyWhNQRg/UYnJEl2Tk7I/AAAAAAAALqM/gry2WHV0LhU/w242-h393-no/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7+2013-05-08+%25E4%25B8%258A%25E5%258D%25889.49.54.jpg" alt="image" /></p>

<p>上圖的結構是利用 sencha Architect 所呈現的，可以看到元件 StdEditorToolbar 就是獨立的類別，藍色線代表作為連結使用在另外兩個自定元件裡面，如此一來相同的元件與 ID 定義，就不需要重覆多次，在索引時也較一致性，如果讀者有看我上一篇 <a href="http://smlsun.com/blog/2013/02/19/extjs-component/">ID 與 itemId 的不同</a>，就會知道這樣是可行的，而因為 extjs 4 在這次多了 controller 的類別，所以我們的 view 層都是單純的介面元件，沒有特殊的邏輯，所以可以重覆使用，除此之外，我們也可以交由多人協助完成相關的元件，最後在將他們組合成最終要呈現的畫面，參考上一張圖片的樹狀結構，最終的呈現將由三個主要元件組成，ItemGrid，ItemViewer，ItemEdtor，步驟上就可以先將 ItemGrid，ItemViewer 完成以後，ItemEdtor 作為 tabpanel 連結 ItemGrid，ItemViewer 完成整個畫面，如下圖：</p>

<p><img src="https://lh5.googleusercontent.com/-XKtk5cWSqsk/UYnJFiXo1CI/AAAAAAAALqY/qYUtCJjeKrM/w603-h285-no/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7+2013-05-08+%25E4%25B8%258A%25E5%258D%258810.02.55.jpg" alt="image" /></p>

<p><img src="https://lh4.googleusercontent.com/-_P3Jgg56zw4/UYnJGQ8iwFI/AAAAAAAALqg/sHmkQdYRubo/w603-h397-no/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7+2013-05-08+%25E4%25B8%258A%25E5%258D%258810.03.16.jpg" alt="image" /></p>

<p>就是如此簡單愉快，上面所完成的自定元件都使用到了在物件導向中繼承的特性，基本上都是經由繼承 extjs 的元件加以客製化，當然自定元件同樣也可以作為別人的父類別，端看如何設計。mvc 中的前兩項完成了，接著我們就來看最後一個 C，controller 的部份。</p>

<h2>Controller - 混和</h2>

<p>作為 view 與 model 的溝通橋樑，與操作 view 中元件的互動，Controller 扮演的角色是很重要的，他必須要很方便存取以及定義欲操作的元件，extjs 在這邊也確實做到了，還記得上一篇最提到的關於 extjs 如何查詢 component，當你在撰寫 Controller 將會大量使用到，延續上一節的 view 中三個元件：ItemGrid，ItemViewer，ItemEdtor，來進行說明。</p>

<ul>
<li>ItemGrid：如果是作為 grid 單獨存在，將只會有讀取資料的功能，因此在 controller 中，我們只需要定義 read 的功能實作。</li>
<li>ItemViewer：作為 Viewer 本身只是個空殼，需要由外部傳入資料後進行資料呈現，因此我們需要定義得是 display 的功能</li>
<li>ItemEditor：組合了 ItemGrid 與 ItemViewer，兩個介面，也因此實作的內容就為兩者之間的互動，一旦點選 ItemGrid 中的資料，就將其作為 ItemViewer 的資料來源進行呈現，因此我們要實作的是 readItem。</li>
</ul>


<p>大致上解釋一下設計概念後，粗糙一點我們可以把上面三個功能都定義在 ItemEditor，但如果 ItemGrid 以及 ItemViewer 會作為獨立功能，或者組合到不同的介面，這時候我們就必須要寫兩個同樣的 function，這不是個好辦法，因此我們可以利用 extjs 提供的另一個特性：混和(mixsins)，在系列文章的<a href="http://ithelp.ithome.com.tw/question/10120091">第一篇</a>有提到，一旦我們個別定義好 ItemGrid，ItemViewer 的邏輯函式，我們可以將他混和入 ItemEditor 如此一來就可以各自專注各自的責任，除了可以組合在一起，也可以各自獨立運作，是不是很美好呢！接著我們就來看範例程式碼與結構：</p>

<p><img src="https://lh4.googleusercontent.com/--nSzi3U1WrQ/UYnJG2grGnI/AAAAAAAALqo/SA-TwLD_zg4/w215-h289-no/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7+2013-05-08+%25E4%25B8%258A%25E5%258D%258810.48.04.jpg" alt="image" /></p>

<p>參考上圖，可以看到我們為了三個介面分別做了三個 controller，就如同前面提到的三點，個別設定了三個函數，在這邊我就不詳述各個 controller 的實作，直接來看 ItemEditorController：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Ext</span><span class="p">.</span><span class="nx">define</span><span class="p">(</span><span class="s1">&#39;finder_extjs.controller.ItemEditorController&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">extend</span><span class="o">:</span> <span class="s1">&#39;Ext.app.Controller&#39;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 混和： ItemViewerController 以及 ItemGridController</span>
</span><span class='line'>    <span class="nx">mixins</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">itemViewerCtrl</span><span class="o">:</span> <span class="s1">&#39;finder_extjs.controller.ItemViewerController&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">ItemGridCtrl</span><span class="o">:</span> <span class="s1">&#39;finder_extjs.controller.ItemGridController&#39;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 目標 views</span>
</span><span class='line'>    <span class="nx">views</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="s1">&#39;ItemEditor&#39;</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 定義操作對象</span>
</span><span class='line'>    <span class="nx">refs</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="nx">ref</span><span class="o">:</span> <span class="s1">&#39;itemViewer&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">selector</span><span class="o">:</span> <span class="s1">&#39;itemviewer&#39;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="nx">ref</span><span class="o">:</span> <span class="s1">&#39;itemGrid&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">selector</span><span class="o">:</span> <span class="s1">&#39;itemgrid&#39;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="nx">ref</span><span class="o">:</span> <span class="s1">&#39;itemEditor&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">selector</span><span class="o">:</span> <span class="s1">&#39;itemeditor&#39;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">init</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">application</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// event binding</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">control</span><span class="p">({</span>
</span><span class='line'>            <span class="s1">&#39;itemeditor button[itemId=readBtn]&#39;</span><span class="o">:</span><span class="p">{</span>
</span><span class='line'>                <span class="nx">click</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">doRead</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="c1">//一旦 grid 中的資料被雙擊，執行 readItem</span>
</span><span class='line'>            <span class="s1">&#39;itemeditor grid[itemId=itemGrid]&#39;</span><span class="o">:</span><span class="p">{</span>
</span><span class='line'>                <span class="nx">itemdblclick</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">readItem</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 將傳入的目標資料，作為顯示的資料來源進行呈現</span>
</span><span class='line'>    <span class="nx">readItem</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="nx">record</span><span class="p">,</span> <span class="nx">item</span><span class="p">,</span> <span class="nx">index</span><span class="p">,</span> <span class="nx">e</span><span class="p">,</span> <span class="nx">eOpts</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">getItemEditor</span><span class="p">().</span><span class="nx">setActiveTab</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">getItemViewer</span><span class="p">().</span><span class="nx">up</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//屬於 itemViewerController 所定義的函數</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">doDisplay</span><span class="p">(</span><span class="nx">record</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>這篇文章中，說明了 MVC 的運作，以及個別利用了物件導向開發中的資料關連，繼承以及混和；當然不只這些，還有很多奇巧淫技等著學習並熟練，程式的世界是學也學不完，希望藉由這樣的說明，能夠讓讀者有個概念，在使用 extjs 這樣的物件導向設計時可以有個參考，文章進行到這裡，對於 extjs 的概念與使用，相信應該有些了解，不過如果有實際經歷過 extjs 開發的讀者應該可以體會，因為他是這樣的複雜，在除錯上有時並不是那麼容易，特別是物件導向式的開發方式會有很多獨立的類別，如何能夠快速開發減少不必要的錯誤，就要善用工具啦！幸好官方提供了 sencha architect，可以幫助我們減少開發中的錯誤，並且快速完成介面的建立，最後要強調的是，ide 只是輔助，請在熟練基礎過後在服用，不然&#8230;嘿嘿～</p>
<p><a rel="bookmark" href="http://smlsun.com/blog/2013/05/08/extjs-oo/"></a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[使用 extjs 必須了解的 js 技巧與知識]]></title>
<link href="http://smlsun.com/blog/2013/05/02/extjs4-with-js/"/>
<updated>2013-05-02T09:15:00+08:00</updated>
<id>http://smlsun.com/blog/2013/05/02/extjs4-with-js</id>

      <content type="html"><![CDATA[<p>在使用類似 extjs 這樣的 framework 時，一定會被他的方便性還有物件化所吸引，但是如果你對 javascript 的一些基礎或是進階技巧不了解，可能會錯用造成無法預知的麻煩，甚至錯把 javascript 原生當做 extjs 特有的以致於在進行程式開發時扼殺了一些變化的可能性，這些問題也都是筆者曾經經歷過的問題，本篇將就一些在使用 extjs 時一定要知道的觀念與 javascript 的技巧進行介紹。</p>

<p>也許熟手會覺得這是基本中的基本，實際上在業界還不會走路就要會飛的例子比比皆是…不是每個人都是東尼，為了不要摔的太大力，馬步還是蹲好一點。</p>

<hr />

<p>雖說是為了 extjs 而介紹，基本上就算是使用其他的 js 框架，也是需要這些技巧與知識的，就讓我們一個一個來，下面的文章連接皆從我的 blog 而來，歡迎大家進來參觀。</p>

<h2>this</h2>

<p>在使用 extjs 時，很多時候妳必須存取物件的屬性來進行顯示或判斷，特別在物件導向的世界，為了能夠更完美封裝，有些時候妳必須從操作物件的本體來取得相關的物件或屬性，因此，搞懂 this 的對象就非常重要，對於 this 的原理與特性，連結中將有介紹：<a href="http://smlsun.com/blog/2013/01/31/javascript-what-is-this/">What Is This?</a></p>

<h2>Scope</h2>

<p>Scope 也就是所謂的作用域，了解作用域特性相關的知識在使用 extjs 這樣的框架是很有幫助的，在 extjs 物件導向的特性中很多時候需要利用 Scope 的特性來達成，甚至是在使用 javascript 時，若有效能上的問題，理解 scope 也是個改善方向：<a href="http://smlsun.com/blog/2013/02/01/javascript-about-scope/">Scope</a></p>

<h2>callback</h2>

<p>寫 javascript 不得不知道什麼是 callback，extjs 建構於 javascript，使用 extjs 也必須了解，特別是使用 ajax 向後端取得資料時所產生的延遲，為了確保函式執行的順序，callback 就是你要使用的技巧，在使用 extjs 時，可不要認為 callback 形式的函數是 extjs 特有得的：<a href="http://smlsun.com/blog/2013/02/04/javascript-callback/">Callback</a></p>

<h2>Closure</h2>

<p>閉包，是個很強大的特性，但確也是兩面刃，需要花一些時間理解，對於初階開發者也許沒辦法靈活應用，但其特性不得不知，特別是在使用 extjs 這樣的框架，大量使用了閉包的特性來封裝物件，也因此，了解閉包將有助於理解 extjs：<a href="http://smlsun.com/blog/2013/02/01/javascript-closure/">Closure</a></p>

<h2>setTimeout</h2>

<p>從 javascript 原生函式 setTimeout 的運作可以一窺 javascript 在瀏覽器引擎中如何處理接踵而來的任務，雖然與 extjs 沒有直接的關係，但是，在 javascript 的世界裡開車，怎能不了解引擎的運作原理呢：<a href="http://smlsun.com/blog/2013/02/01/javascript-settimeout/">setTimeout</a></p>

<h2>Performance</h2>

<p>Performance 的問題一直是個不單純的課題，即使是使用 extjs 這樣的框架，也不得從日常開始養成好習慣，來避免應用程式效率低下，有些效能上的知識能夠越早知道才能一點一滴的累積高效能的程式碼：<a href="http://smlsun.com/blog/2013/02/01/javascript-performance/">Performance &amp; Tip</a></p>

<h2>Memory Leaks 偵測</h2>

<p>知道影響效能的原因，當能然也要能夠解決效能瓶頸，我們不能瞎摸期待哪天碰到死耗子，要找到問題發生的點，才能夠對症下藥，如何利用工具客觀的找出也是很重要的技能：<a href="http://smlsun.com/blog/2013/02/17/javascript-memory-leaks/">Memory Leaks 的情況以及如何解決與偵測</a></p>

<p>基本工是很重要的，就像倚天屠龍記裡的張無忌，有九陽神功護體學什麼東西都快的道理，掌握基礎，除了能夠理解框架的運作，也可以避免無知的錯誤，特別是像 extjs 這樣龐大的架構，在撰寫時更要注意，請讀者定要耐心，蹲好馬步！</p>

<p>下一篇將會進入 extjs 實際如何運用 MVC 與物件導向特性，來使物件能夠重覆使用，以及多人開發時如何任務分工。</p>
<p><a rel="bookmark" href="http://smlsun.com/blog/2013/05/02/extjs4-with-js/"></a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[台灣首部空拍電影-域望 & MIT台灣誌十周年特別企劃-中央山脈大縱走]]></title>
<link href="http://smlsun.com/blog/2013/04/30/abovetaiwan/"/>
<updated>2013-04-30T16:48:00+08:00</updated>
<id>http://smlsun.com/blog/2013/04/30/abovetaiwan</id>

      <content type="html"><![CDATA[<p>有天晚上看到小燕有約再介紹齊柏林導演的首部空拍電影-域望，講的是對台灣的介紹，以及對台灣這塊土地愛的堅持，不惜放棄公務員的工作，投入所有的資源，賣掉房子也要將他完成，看到這樣的題材，通常我是不會放過的，也一定要介紹一下，身為台灣人，雖然我沒有這樣的勇氣，但幫忙宣傳是一定要的，台灣真的很美，但是卻被人類的慾望所破壞，甚至是個人，常常因為一己方便，不尊重自然，與他人觀賞的權力。</p>

<iframe width="560" height="315" src="http://www.youtube.com/embed/P8giKLSvahU" frameborder="0" allowfullscreen></iframe>


<p>而現代人往往只待在城市中，沒有去親近大自然，自然無法了解台灣的美麗，如果想要速成，相信這電影是個很好的選擇，當然不是看完就算了，有機會還是要去大自然走走。</p>

<iframe width="420" height="315" src="http://www.youtube.com/embed/koedeH4yHJI" frameborder="0" allowfullscreen></iframe>


<p>不要再做低頭族了，就是你！還不趕快移動你的身體，台灣除了親切的人民，還有美麗的風景，如果你沒有走進去，那你就不曾擁有… 也別忘了做一個懂得尊重的人。</p>

<p>後記：看完這系列的影片，讓我的又想要爬山腳癢了，該是規劃爬山行程的時候了…</p>
<p><a rel="bookmark" href="http://smlsun.com/blog/2013/04/30/abovetaiwan/"></a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[extjs 4 的新特性與基本概念]]></title>
<link href="http://smlsun.com/blog/2013/04/30/extjs4-intro/"/>
<updated>2013-04-30T10:28:00+08:00</updated>
<id>http://smlsun.com/blog/2013/04/30/extjs4-intro</id>

      <content type="html"><![CDATA[<p>extjs 算是筆者最早接觸的 javascript framework，在本身對程式開發還是新生兒的年紀，extjs 的出現著實讓我眼睛一亮，打從 extjs 1.x 的時候他就一直伴隨著我，公司的專案也一路隨著extjs 1.x 一路升級的 3.x，也算是見證 extjs 的發展。</p>

<p>當初為什麼選擇 extjs？除了強者朋友推薦之外，非科班出生的筆者，jquery 完全沒用過，對於 javascript 只懂個皮毛，不知道 css 是什麼，要能夠有個可以看的介面，實在是難如登天，更何況是處理 html 元件之間的互動，著實讓筆者我不知該如何下手！而 extjs 剛剛好符合我們當時系統開發的需求，中規中矩介面，豐富的事件控制，最重要的還要跨瀏覽器的特性(那個年代瀏覽器還是很原始的)。</p>

<p>當然雖然 extjs 對當時的我來說是那麼的美好，說實在的如果有些基礎 javascript 不熟悉，使用起來常常不知所以然，以致於寫出來的 code 總是讓人覺得「不是一般人寫的出來的」…糟糕，那是個青澀的年代(遠望~)，</p>

<p>時至今日 extjs 來到 4.x，一個新的境界，與以往版本有著更大的不同，希望透過一系列的文章能夠讓剛接觸 extjs 讀者快速了解他的特性，少走一些冤枉路，快速完成公司交辦的工作，早早下班享受人生～</p>

<hr />

<p>系列文章的一開始希望能夠讓大家對 extjs 的基本特性以及原理做個基本介紹，本文將參考下列文章內容節錄重要的部份，有需要更深入了解的讀者可以跳轉參考</p>

<ul>
<li><a href="http://book.51cto.com/art/201109/291474.htm">ExtJS Web應用程序開發指南</a></li>
<li><a href="http://www.cnblogs.com/fsjohnhuang/archive/2013/01/29/2880705.html">Ext JS 4 First Look 翻譯：新特性</a></li>
</ul>


<p>首先在使用 extjs 時，不得不被他得物件導向特性所吸引到，如果對 javascript 有些開發經驗了解他的特性，可以知道 javascript 是函數式語言，沒有直接的物件導向特性。通常，要將 javascript 設計為物件導向的開發方式不是不行，但相信那不時是初階開發人員可以做到的，實務上物件導向設計確實可以有效的分工，對於多人開發以及程式重覆使用已有多年的驗證，但硬是要將函數語言改為物件語言，沒有深厚的功力，恐怕沒那簡單，也因此第一個要介紹 extjs 的部份，就是其物件導向的設計，讓我們可以很輕易的用  javascript 進行物件導向式的開發。</p>

<h1>動態加載和新的物件導向特性</h1>

<p>JavaScript 沒有真正的物件導向設計，但 ExtJS 自己設計了物件導向式的結構，從而讓開發者可以利用物件導向的精神來開發前端 javascript。</p>

<p>與以往版本的不同，ExtJS 4.0對舊的物件系統進行了全面的更新，進而讓開發更簡單、更靈活。</p>

<p>ExtJS 4 推出4個新的物件導向特性：類別定義、mixins(混合複數classes)、更方便的物件屬性定義及動態加載，下面將針對上述特性做個簡單介紹</p>

<h2>類別定義</h2>

<p>ExtJS 4 引入了 Ext.define 方法，這就避免了由於定義的類別不存在產生錯誤。類別管理器會自動檢查各類別之間的依賴關係，因此，我們不再需要花費心思去控制載入順序，extjs 就會幫我們處理妥當。</p>

<p>舉個簡單的例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>   <span class="nx">Ext</span><span class="p">.</span><span class="nx">define</span><span class="p">(</span><span class="s1">&#39;Argicloud.view.ReadBtn&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">extend</span><span class="o">:</span> <span class="s1">&#39;Ext.button.Button&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">alias</span><span class="o">:</span> <span class="s1">&#39;widget.readbtn&#39;</span><span class="p">,</span>
</span><span class='line'>  
</span><span class='line'>      <span class="nx">itemId</span><span class="o">:</span> <span class="s1">&#39;readBtn&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">text</span><span class="o">:</span> <span class="s1">&#39;Read&#39;</span><span class="p">,</span>
</span><span class='line'>  
</span><span class='line'>      <span class="nx">initComponent</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">me</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>          <span class="nx">me</span><span class="p">.</span><span class="nx">callParent</span><span class="p">(</span><span class="nx">arguments</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  
</span></code></pre></td></tr></table></div></figure>


<p>上述的例子讓我們可以輕易的繼承 extjs 原生的 Button 定義客製的屬性，如此就可做到前端元件重覆使用，並且抽出共用的部分，方便後續維護，這邊先點到為止，後續會有更詳細的文章介紹，接著來看 mixins</p>

<h2>mixins (混合複數classes)</h2>

<p>許多動態語言都支援 mixins 的特性，比如 Ruby、Python。而JavaScript 在語法上並無 mixins 的特性，但 ExtJS 4 自己實現了 mixins 的功能，類似於多重繼承，是種更細的程式碼重覆使用特性，如果一個類別需要某個特性，只需要將擁有該特性的類別類混入目標類別中即可。同樣的先來看一下簡單範例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>   <span class="nx">Ext</span><span class="p">.</span><span class="nx">define</span><span class="p">(</span><span class="s2">&quot;MyClass.Engine&quot;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>       <span class="nx">operate</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;1000 rpm&quot;</span><span class="p">);</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="nx">Ext</span><span class="p">.</span><span class="nx">define</span><span class="p">(</span><span class="s2">&quot;MyClass.Wheel&quot;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>       <span class="nx">scroll</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;go&quot;</span><span class="p">);</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="nx">Ext</span><span class="p">.</span><span class="nx">define</span><span class="p">(</span><span class="s2">&quot;MyClass.Car&quot;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>       <span class="nx">mixins</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">Engine</span><span class="o">:</span> <span class="s2">&quot;MyClass.Engine&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">Wheel</span><span class="o">:</span> <span class="s2">&quot;MyClass.Wheel&quot;</span>
</span><span class='line'>       <span class="p">},</span>
</span><span class='line'>       <span class="nx">dirve</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;forward&quot;</span><span class="p">);</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">objCar</span> <span class="o">=</span> <span class="nx">Ext</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="s2">&quot;MyClass.C&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">objCar</span><span class="p">.</span><span class="nx">operate</span><span class="p">();</span> <span class="c1">// 1000 rpm</span>
</span><span class='line'>  <span class="nx">objCar</span><span class="p">.</span><span class="nx">scroll</span><span class="p">();</span> <span class="c1">// go</span>
</span><span class='line'>  <span class="nx">objCar</span><span class="p">.</span><span class="nx">dirve</span><span class="p">();</span> <span class="c1">// forward</span>
</span><span class='line'>  
</span></code></pre></td></tr></table></div></figure>


<p>如此我們可以很簡單的將一個應用拆分成多個不同的小類別，最後再將各個類別像積木一樣主合成一最後要使用的物件。除了物件導向的特性外 extjs 4 也提供新的物件屬性定義方式。</p>

<h2>新增的 Config 設定</h2>

<p>透過對物件 config 屬性的定義的屬性將動態生成 getter 和 setter 方法​​，並且這些方法也允許我們進行覆寫，大大減少程式碼的行數，以及您的生命，提供屬性預設方法，一旦在 Config 區塊定義的 object 或屬性在產生 class 時，將自動產生 config 屬性的 setter 以及 getter，如需自行客製化時，則可以自行設計同名函數，用文字描述可能很難理解，來看一個簡單的範例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>   <span class="nx">Ext</span><span class="p">.</span><span class="nx">define</span><span class="p">(</span><span class="s1">&#39;My.awesome.Class&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// The default config</span>
</span><span class='line'>      <span class="nx">config</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Awesome&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">isAwesome</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">constructor</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">config</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">initConfig</span><span class="p">(</span><span class="nx">config</span><span class="p">);</span>
</span><span class='line'>          <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">var</span> <span class="nx">awesome</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">My</span><span class="p">.</span><span class="nx">awesome</span><span class="p">.</span><span class="nx">Class</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Super Awesome&#39;</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nx">alert</span><span class="p">(</span><span class="nx">awesome</span><span class="p">.</span><span class="nx">getName</span><span class="p">());</span> <span class="c1">// &#39;Super Awesome&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到在類別定義中 config.name 定義好了，但未特別定義 getName 這樣的函數，但我們卻可以直接呼叫，這樣的特性正是 extjs 幫我們完成的，讓我們可以更專注在最重要的邏輯上。</p>

<h2>動態載入(dynamic loading)</h2>

<p>不管你有沒有用過類似 extjs 的框架，或者是寫過大型的 web 應用程式，一旦您的頁面需要載入大量的 resource 或著 .js 檔時，將會造成載入時間過長，很多不需要的腳本其實可以不用載入甚至在需要時載入，但實務上一個人開發時要管控還算簡單，多人就麻煩了！</p>

<p>也因為 extjs 在舊版時沒有很漂亮的解決此問題，我也算是有切身之痛，所幸，extjs 發展到現在也該是時候了，動態載入功能將根據你對類別定義需要的類別引入相關的 js 檔，通過動態載入可以有效地減少客戶端載入的腳本體積，也因此在 html page 你只要載入 extjs 的 lib 以及 application.js（後續 mvc 會介紹），之後所有的 js 檔會在你使用類別時進行動態載入，希望可以讓讀者更清楚知道該屬性，我們來看一下範例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'> <span class="nt">&lt;html&gt;</span>
</span><span class='line'>      <span class="nt">&lt;head&gt;</span>
</span><span class='line'>      <span class="nt">&lt;title&gt;</span>My ExtJS MVC<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>      <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">type=</span><span class="s">&quot;text/css&quot;</span> <span class="na">href=</span><span class="s">&quot;extjs-4.1.0/resources/css/ext-all.css&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;extjs-4.1.0/ext-all.js&quot;</span> <span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>      <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;init.js&quot;</span> <span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>  
</span><span class='line'>  
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面程式碼我們只有載入 extjs lib 以及初始的 init.js</p>

<p>接著來看 init.js 的內容</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>   
</span><span class='line'><span class="nx">Ext</span><span class="p">.</span><span class="nx">Loader</span><span class="p">.</span><span class="nx">setConfig</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">enabled</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Ext</span><span class="p">.</span><span class="nx">application</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">models</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="s1">&#39;Item&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>    <span class="nx">stores</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="s1">&#39;ItemStore&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>    <span class="nx">views</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="s1">&#39;ItemGrid&#39;</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>    <span class="nx">autoCreateViewport</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">//set as true - 將尋找 Viewport.js 自動載入</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">controllers</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="s1">&#39;MainController&#39;</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Argicloud&#39;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到該 init.js 用到了 views、stores、models 以及 controllers，檔案結構上以 views 為例，應該會有個檔案在 {App.name}/view/ItemGrid.js，extjs 將會將其動態載入，是不是輕鬆簡單呢！</p>

<p>但動態載入一般使用於 dev 模式，若是 production 模式，為了加速資源的載入，當然希望能夠做到最小化以及一次性載入可透過 sencha  cmd 來完成，在往後的文章將介紹到。</p>

<p>對於 extjs 物件導向特性有了大致的了解後，接著來看在使用上的基本概念。</p>

<h2>ExtJS中的基本概念</h2>

<p>ExtJS 和傳統的前端 Web 開發的不一樣，不用在 HTML 和 CSS 中打轉，就像筆者當年對兩者都不甚了解，還是用的很開心一樣，可以想像你是在使用 JavaSwing 這樣的技術呈現的結果是在網頁上一樣，不用管介面的樣式以及如何呈現，只要負責操作類別間的互動以及事件的定義，其他就交由 extjs 幫你處理。一但透過目前瀏覽器提供的開發者工具，可以發現 extjs 只是把你宣告的元件轉化成 html dom element，基本上與 html 還是脫不了關係，有這層了解後在使用 extjs 可以更容易理解，在這裡將介紹幾個 extjs 較重要的元件</p>

<h2>Container</h2>

<p>extjs 中 Container 顧名思義就是容器，你可以把它想像成 html 中的 div，在 extjs Container 是一些類別的父類別，比如說：panel，在開始開發 extjs 時，你可以先用繼承於 Cotainer 的類別進行介面的分塊把你想要的呈現方式定義好，之後在放上你要的元件即可。</p>

<h2>Layout</h2>

<p>每個 container 都有個屬性：layout。透過該屬性的定義來對 container 裡所擁有的元件進行擺放，開發者不需要在自行定義 css 或者 html dom 巢狀結構來擺放相關元件，可以更快速的將介面呈現定義好，在開發人員技術不純熟的情況下，可以保證介面呈現的一置性。</p>

<h2>Component</h2>

<p>當你開始製作 extjs 應用程式時，一旦拉好框架，定義好 layout 後，接著你要做的就是將元件放入，舉凡按鈕，欄位，表單以及資料表在 extjs 都是繼承於 Component，透過繼承於 Component 除了 extjs 原生的元件外，你也可以製作你自己的元件，甚至是第三方元件等，大大提昇 extjs 在前端呈現的豐富性。</p>

<p>在一開始提到 extjs 實際上在 html 呈現上基本還是將類別定義的內容轉化為 html dom element，就是透過 render 來完成的。</p>

<h2>Model 與 Store</h2>

<p>Model 與 Store，也就是一個系統的骨幹，資料結構，ExtJS 4 對其進行了全面地重構，Ext.data.Model 取代 Ext.data.Record 成為資料的核心，在Model 中可以直接定義 Proxy (資料的來源)，不需要透過 Store 就可以直接載入資料。同時 Store 支援 local 與 remote 排序、篩選和分組。</p>

<p>除此之外，ExtJS 4.0 提供了 關聯 API，可以定義不同 model 間多對多或一對多等的資歷關係，通過關聯 API 將模型關聯起來後，將可以更容易存取相關的資料模型。</p>

<p>透過上述的介紹希望讀者們可以對 extjs 有個初步的了解，如果看完後還算有興趣，下一篇將介紹 extjs 使用到的進階 js 技巧，所謂萬丈高樓平地起，像 extjs 這樣複雜的框架，也是從基本 javascript 建構而來，理解該框架所使用到的 js 進階技巧，將有助於您在使用 extjs 時的理解進而變化運用</p>
<p><a rel="bookmark" href="http://smlsun.com/blog/2013/04/30/extjs4-intro/"></a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[extjs4: mvc 使用簡介與範例介紹]]></title>
<link href="http://smlsun.com/blog/2013/03/21/extjs4-mvc/"/>
<updated>2013-03-21T08:42:00+08:00</updated>
<id>http://smlsun.com/blog/2013/03/21/extjs4-mvc</id>

      <content type="html"><![CDATA[<p><a href="http://www.showframework.com/2012/07/extjs-mvc-architecture/">ExtJS 4 MVC架構講解</a></p>

<p>引用上述文章的開頭：</p>

<blockquote><p>大規模客戶端應用通常不好實現不好組織也不好維護，因為功能和人力的不斷增加，這些應用的規模很快就會超出掌控能力，ExtJS 4帶來了一個新的應用架構，不但可以組織代碼，還可以減少實現的內容 新的應用架構遵照一個類MVC的模式，模型（Models）和控制器（Controllers）首次被引入。業界有很 ​​多種MVC架構，基本大同小異，ExtJS 4的定義如下：</p>

<ul>
<li>Model: 資料的集合，例如 User 帶有 username 和 password 的資料，model 知道如何持久化自己的數據，並且可以和其他 model 關聯，model 跟 ExtJS 3中 的 Record 有點像（區別是，Record 只是單純的扁平結構，而 Model 可以 nest ），通常都用在 Store 中去展示 grid 和其他組件的資料</li>
<li>View: 用於界面展示– grid, tree, panel都是view</li>
<li>Controllers: 安放所有使你的 app 正確工作的代碼的位置，具體一點應該是所有動作，例如如何渲染 view，如何初始化 model，和 app 的其他邏輯</li>
</ul>
</blockquote>

<p>對於 extjs 4 的 mvc 有點概念後，我們可以實際來看例子進一步了解運作的方式。</p>

<h2>Application</h2>

<p>每個 ExtJS 4 的應用都從一個 Application 開始，這個實例包含應用的全域配置（例應用的名字），這個實例也負責維護對全部模型、視圖、控制器的引用的維護，還有一個 <code>launch</code> 函數，會在所有加載項加載完成之後呼叫。首先需要選擇一個全域命名空間，所有 ExtJS 4 應用都需要有一個全域命名空間，以讓所有應用中的 class 安放到其中</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>   <span class="nx">Ext</span><span class="p">.</span><span class="nx">Loader</span><span class="p">.</span><span class="nx">setConfig</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">enabled</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>      <span class="c1">//disableCaching: true //強制關閉 cache</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nx">Ext</span><span class="p">.</span><span class="nx">application</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Frontend&#39;</span><span class="p">,</span> <span class="c1">//app folder 別名為 Frontend</span>
</span><span class='line'>      <span class="nx">appFolder</span><span class="o">:</span> <span class="s1">&#39;app&#39;</span><span class="p">,</span> <span class="c1">//檔案 root 存放位置</span>
</span><span class='line'>      <span class="nx">controllers</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>
</span><span class='line'>        <span class="s1">&#39;SYS.SYS001&#39;</span><span class="p">,</span>   <span class="c1">//使用者登入</span>
</span><span class='line'>        <span class="s1">&#39;SYS.SYS002&#39;</span><span class="p">,</span>   <span class="c1">//主畫面</span>
</span><span class='line'>        <span class="s1">&#39;MN.MNM001&#39;</span><span class="p">,</span>     <span class="c1">//群組權限維護</span>
</span><span class='line'>        <span class="s1">&#39;US.USM002&#39;</span>    <span class="c1">//使用者群組維護</span>
</span><span class='line'>      <span class="p">],</span>
</span><span class='line'>      <span class="nx">launch</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">Ext</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="s1">&#39;Ext.container.Viewport&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">id</span><span class="o">:</span> <span class="s1">&#39;mainVP&#39;</span><span class="p">,</span>
</span><span class='line'>              <span class="nx">layout</span><span class="o">:</span> <span class="s1">&#39;fit&#39;</span><span class="p">,</span>
</span><span class='line'>              <span class="nx">items</span><span class="o">:</span> <span class="p">[{</span>
</span><span class='line'>                  <span class="nx">xtype</span><span class="o">:</span> <span class="s1">&#39;sys001loginform&#39;</span><span class="p">,</span>
</span><span class='line'>                  <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;http://localhost:8080/agricloud/user/login.json&#39;</span>
</span><span class='line'>              <span class="p">}]</span>
</span><span class='line'>          <span class="p">});</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Model</h2>

<p>定義來源資料的 mapping 以及資料型態</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// app/model/MN/MNM001/MenuGroup.js</span>
</span><span class='line'><span class="nx">Ext</span><span class="p">.</span><span class="nx">define</span><span class="p">(</span><span class="s1">&#39;Frontend.model.MN.MNM001.MenuGroup&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">extend</span><span class="o">:</span> <span class="s1">&#39;Ext.data.Model&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">fields</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;menuId&#39;</span><span class="p">,</span> <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;string&#39;</span><span class="p">},</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;menuDes&#39;</span><span class="p">,</span>  <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;string&#39;</span><span class="p">},</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;userGroupId&#39;</span><span class="p">,</span>  <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;string&#39;</span><span class="p">},</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;userGroupDes&#39;</span><span class="p">,</span>  <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;string&#39;</span><span class="p">}</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Store</h2>

<p>設定資料獲取的來源，以及取得資料的方式，載入上一節的 model <code>Frontend.model.MN.MNM001.MenuGroup</code>。一旦資料讀取成功，將會依據 model 進行資料 mapping 作為 view 層的資料呈現來源。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// app.store.MN.MNM001.Store.js</span>
</span><span class='line'><span class="nx">Ext</span><span class="p">.</span><span class="nx">define</span><span class="p">(</span><span class="s1">&#39;Frontend.store.MN.MNM001.Store&#39;</span> <span class="p">,{</span>
</span><span class='line'>    <span class="nx">model</span><span class="o">:</span><span class="s1">&#39;Frontend.model.MN.MNM001.MenuGroup&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">extend</span><span class="o">:</span> <span class="s1">&#39;Ext.data.Store&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">alias</span> <span class="o">:</span> <span class="s1">&#39;widget.mnm001store&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">autoLoad</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">proxy</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;rest&#39;</span><span class="p">,</span>   <span class="c1">// 使用 rest 來與後端 server 溝通</span>
</span><span class='line'>        <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;http://localhost:8080/agricloud/rest/menuGroup/&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">reader</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;json&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">root</span><span class="o">:</span> <span class="s1">&#39;items&#39;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">writer</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;json&#39;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">afterRequest</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span><span class="nx">success</span><span class="p">){</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">operation</span> <span class="o">=</span> <span class="nx">request</span><span class="p">.</span><span class="nx">operation</span><span class="p">;</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">response</span> <span class="o">=</span> <span class="nx">operation</span><span class="p">.</span><span class="nx">response</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="nx">success</span><span class="p">){</span>
</span><span class='line'>            <span class="p">}</span><span class="k">else</span><span class="p">{}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">listeners</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// 讀取完資料後，進行 load </span>
</span><span class='line'>        <span class="nx">write</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">store</span><span class="p">,</span> <span class="nx">operation</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">store</span><span class="p">.</span><span class="nx">load</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Controller</h2>

<p>用於整合 model 的資料讓 view 可以使用，並且定義 view 各個事件要執行的內容，如此一來 view 將可以被獨立設計，一旦 view 被使用於別的功能也不會有衝突的事件定義。在使用上 Controller 也可以進行繼承，下面的 parent Controller 範例實作一些常用的事件，因為對於 controller 而言，所載入的各個 store 都視為 controller 的屬性，故只要繼承至 parent Controller 都有給定要求的變數內容，所定義的事件將會運作正常</p>

<h3>parent Controller</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * std Controller</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nx">Ext</span><span class="p">.</span><span class="nx">define</span><span class="p">(</span><span class="s1">&#39;Frontend.controller.common.Standard&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">extend</span><span class="o">:</span> <span class="s1">&#39;Ext.app.Controller&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">execute</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">tab</span> <span class="o">=</span> <span class="nx">Ext</span><span class="p">.</span><span class="nx">getCmp</span><span class="p">(</span><span class="s1">&#39;mainTab&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">tab</span><span class="p">.</span><span class="nx">add</span><span class="p">({</span>
</span><span class='line'>            <span class="nx">id</span><span class="o">:</span> <span class="nx">params</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">title</span><span class="o">:</span> <span class="nx">params</span><span class="p">.</span><span class="nx">title</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">closable</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">layout</span><span class="o">:</span><span class="s1">&#39;fit&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">items</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">xtype</span><span class="o">:</span> <span class="nx">params</span><span class="p">.</span><span class="nx">tabXtype</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">doRead</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;doRead&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">store</span><span class="p">.</span><span class="nx">load</span><span class="p">();</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">doCreate</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">store</span><span class="p">.</span><span class="nx">insert</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">);</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">doDelete</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">selection</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">grid</span><span class="p">.</span><span class="nx">getSelectionModel</span><span class="p">().</span><span class="nx">getSelection</span><span class="p">()[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">selection</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">store</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="nx">selection</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">doUpdate</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">store</span><span class="p">.</span><span class="nx">sync</span><span class="p">({</span>
</span><span class='line'>            <span class="nx">success</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;success&quot;</span><span class="p">);</span>
</span><span class='line'>                <span class="nx">Ext</span><span class="p">.</span><span class="nx">Msg</span><span class="p">.</span><span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;Status&#39;</span><span class="p">,</span> <span class="s1">&#39;更新成功&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="nx">failure</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">,</span> <span class="nx">options</span><span class="p">){</span>
</span><span class='line'>                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;failure&quot;</span><span class="p">);</span>
</span><span class='line'>                <span class="nx">Ext</span><span class="p">.</span><span class="nx">Msg</span><span class="p">.</span><span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;Status&#39;</span><span class="p">,</span> <span class="s1">&#39;更新失敗&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">onGridSelection</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">selModel</span><span class="p">,</span> <span class="nx">selections</span><span class="p">,</span><span class="nx">eOpts</span><span class="p">){</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">selections</span><span class="o">=</span><span class="nx">selections</span><span class="p">;</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">selModel</span><span class="o">=</span><span class="nx">selModel</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//必須利用refs 取得實體介面已 render的物件</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">deleteButton</span><span class="p">.</span><span class="nx">setDisabled</span><span class="p">(</span><span class="nx">selections</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">onPanelRendered</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">//將載入的 view 指定為此 controller 的屬性</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">grid</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getGridPanel</span><span class="p">();</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">deleteButton</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getDeleteButton</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>main controller</h3>

<p>繼承於上一節的 parent Controller，在主要使用的 controller 需透過 <code>views</code>、<code>stores</code>、<code>models</code> 將對應的 mvc 載入，以及透過 refs 將需要控制的 Component 找出來並且給予別名，如此一來，我們在之後 <code>init</code> 事件定義元件的動作時可以方便的參照相關的元件。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// app.controller.MN.MNM001.js</span>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * 功能群組維護</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nx">Ext</span><span class="p">.</span><span class="nx">define</span><span class="p">(</span><span class="s1">&#39;Frontend.controller.MN.MNM001&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">extend</span><span class="o">:</span> <span class="s1">&#39;Frontend.controller.common.Standard&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">views</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="s1">&#39;MN.MNM001.Panel&#39;</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">refs</span><span class="o">:</span> <span class="p">[{</span>
</span><span class='line'>        <span class="nx">ref</span><span class="o">:</span> <span class="s1">&#39;deleteButton&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">selector</span><span class="o">:</span> <span class="s1">&#39;mnm001panel commonbuttondelete&#39;</span>
</span><span class='line'>    <span class="p">},{</span>
</span><span class='line'>        <span class="nx">ref</span><span class="o">:</span> <span class="s1">&#39;gridPanel&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">selector</span><span class="o">:</span> <span class="s1">&#39;mnm001panel&#39;</span>
</span><span class='line'>    <span class="p">},{</span>
</span><span class='line'>        <span class="nx">ref</span><span class="o">:</span> <span class="s1">&#39;combobox&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">selector</span><span class="o">:</span> <span class="s1">&#39;mnm001combobox&#39;</span>
</span><span class='line'>    <span class="p">}],</span>
</span><span class='line'>    <span class="nx">init</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      
</span><span class='line'>      <span class="err">定義各個元件所要執行的事件以及相關的函數</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">control</span><span class="p">({</span>
</span><span class='line'>            <span class="s1">&#39;mnm001panel commonbuttoncreate&#39;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">click</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">doCreate</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="s1">&#39;mnm001panel commonbuttondelete&#39;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">click</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">doDelete</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="s1">&#39;mnm001panel commonbuttonupdate&#39;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">click</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">doUpdate</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="s1">&#39;mnm001panel commonbuttonread&#39;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">click</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">doRead</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="s1">&#39;mnm001combobox&#39;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">select</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">comboboxSelect</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="s1">&#39;mnm001panel&#39;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">selectionchange</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">onGridSelection</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">render</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">onPanelRendered</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">})</span>
</span><span class='line'>        <span class="c1">//ref 的使用對象為 Conpoment</span>
</span><span class='line'>        <span class="c1">//store 的取得直接用 this </span>
</span><span class='line'>        <span class="c1">//在 view 所組成的 compoment 中有使用到的 store 皆可以在 controllr 中存取</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">store</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getStore</span><span class="p">(</span><span class="s2">&quot;MN.MNM001.Store&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">execute</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">//定義此 contoller 所使用之屬性，controller 一旦被執行此事件將會最先被執行</span>
</span><span class='line'>        <span class="nx">params</span><span class="p">.</span><span class="nx">tabXtype</span><span class="o">=</span><span class="s1">&#39;mnm001panel&#39;</span><span class="p">;</span>
</span><span class='line'>       <span class="c1">//結果將透過下列程式呼叫繼承來的 controller 之 execute</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">callParent</span><span class="p">(</span><span class="nx">arguments</span><span class="p">);</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">comboboxSelect</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">combo</span><span class="p">,</span> <span class="nx">records</span><span class="p">,</span> <span class="nx">eOpts</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">selections</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;userGroupDes&#39;</span><span class="p">,</span><span class="nx">records</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;description&#39;</span><span class="p">)</span> <span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>View</h2>

<p>view 的使用依賴於 controller 有載入的內容，在這邊只作為介面的呈現，不進行事件的定義，除非該事件為通用的事件。</p>

<h3>Combobox</h3>

<p>使用的第一個 store <code>US.USM002.Store</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Ext</span><span class="p">.</span><span class="nx">define</span><span class="p">(</span><span class="s1">&#39;Frontend.view.MN.MNM001.Combobox&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">extend</span><span class="o">:</span> <span class="s1">&#39;Ext.form.ComboBox&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">alias</span> <span class="o">:</span> <span class="s1">&#39;widget.mnm001combobox&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">id</span><span class="o">:</span><span class="s1">&#39;mnm001combobox&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">itemId</span><span class="o">:</span><span class="s1">&#39;mnm001combobox&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">store</span><span class="o">:</span> <span class="s1">&#39;US.USM002.Store&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">queryMode</span><span class="o">:</span> <span class="s1">&#39;local&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">displayField</span><span class="o">:</span> <span class="s1">&#39;userGroupId&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">valueField</span><span class="o">:</span> <span class="s1">&#39;userGroupId&#39;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Panel</h3>

<p>使用的第二個 store <code>MN.MNM001.Store</code>，其中 <code>Frontend.view.common.gridpanel.standard</code> 是自定義通用的 gridpanel，假設你有第二個類似的功能就可以繼承他，只要修改 columns 的定義即可，並且載入額外套件。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Ext</span><span class="p">.</span><span class="nx">define</span><span class="p">(</span><span class="s1">&#39;Frontend.view.MN.MNM001.Panel&#39;</span> <span class="p">,{</span>
</span><span class='line'>    <span class="nx">extend</span><span class="o">:</span> <span class="s1">&#39;Frontend.view.common.gridpanel.standard&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">alias</span> <span class="o">:</span> <span class="s1">&#39;widget.mnm001panel&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">requires</span><span class="o">:</span><span class="p">[</span><span class="s1">&#39;Frontend.view.MN.MNM001.Combobox&#39;</span><span class="p">],</span>
</span><span class='line'>    <span class="nx">columns</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="nx">header</span><span class="o">:</span> <span class="s1">&#39;menuId&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">dataIndex</span><span class="o">:</span> <span class="s1">&#39;menuId&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">flex</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">field</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">xtype</span><span class="o">:</span> <span class="s1">&#39;textfield&#39;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="nx">header</span><span class="o">:</span> <span class="s1">&#39;menuDes&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">dataIndex</span><span class="o">:</span> <span class="s1">&#39;menuDes&#39;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="nx">header</span><span class="o">:</span> <span class="s1">&#39;userGroupId&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">dataIndex</span><span class="o">:</span> <span class="s1">&#39;userGroupId&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">field</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">xtype</span><span class="o">:</span> <span class="s1">&#39;mnm001combobox&#39;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="nx">header</span><span class="o">:</span> <span class="s1">&#39;userGroupDes&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">dataIndex</span><span class="o">:</span> <span class="s1">&#39;userGroupDes&#39;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>    <span class="nx">plugins</span><span class="o">:</span> <span class="p">[{</span>
</span><span class='line'>          <span class="nx">ptype</span><span class="o">:</span><span class="s1">&#39;rowediting&#39;</span>
</span><span class='line'>  <span class="p">}],</span>
</span><span class='line'>    <span class="nx">store</span><span class="o">:</span><span class="s1">&#39;MN.MNM001.Store&#39;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>執行結果</h2>

<h3>功能一</h3>

<p><img src="https://lh5.googleusercontent.com/-lx8V6k3xoO8/UUp-XqNiMnI/AAAAAAAALmk/19RA9GS5zrE/s615/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-03-21+%E4%B8%8A%E5%8D%8811.25.17.jpg" alt="image" /></p>

<h3>功能二</h3>

<p><img src="https://lh4.googleusercontent.com/-HjzcF7nh4y0/UUp-YUkVjUI/AAAAAAAALms/sls8kHck6LI/s614/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-03-21+%E4%B8%8A%E5%8D%8811.25.28.jpg" alt="image" /></p>

<p>可以看到兩個功能外框是類似的，差別在欄位的不同，其中共用的部分：</p>

<ul>
<li>功能二的 grid 與功能一的 userGroupId 的 combobox store 為同一個 <code>US.USM002.Store</code></li>
<li>兩個功能之 panal 皆繼承於 <code>Frontend.view.common.gridpanel.standard</code></li>
<li>controller 也繼承於 <code>Frontend.controller.common.Standard</code></li>
</ul>


<p>透過 extjs 的模組化功能，我們可以很輕易的將重覆的程式碼進行利用，在 mvc 三個維度也可以很方便進行分工，只要各個元件的 id 索引定義清楚，幾乎可以獨立開發，剩下的就是最後的整合運作需要一起 debug，extjs 在前端 mvc 的架構卻實作的蠻漂亮的，有興趣可以參考一下。</p>
<p><a rel="bookmark" href="http://smlsun.com/blog/2013/03/21/extjs4-mvc/"></a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[grails taggable plugin 搭配 jquery tagit 的完美組合]]></title>
<link href="http://smlsun.com/blog/2013/03/01/grails-taggable/"/>
<updated>2013-03-01T18:34:00+08:00</updated>
<id>http://smlsun.com/blog/2013/03/01/grails-taggable</id>

      <content type="html"><![CDATA[<p>引言：<a href="http://blog.lyhdev.com/2013/01/grails-22.html">快速瀏覽 Grails 2.2 新功能</a></p>

<blockquote><p>Grails 是受到 Ruby on Rails (RoR) 啟發的 Java EE 開發框架，它利用 Java 世界的 Groovy Scripting 語言實現與 Rails MVC 架構相似的開發工具；因為基於 Java 豐富的企業元件基礎，可以同時獲得敏捷的開發效率，並且和既有的 Java 程式保持相容。</p></blockquote>

<p>最近開始想要幫家裡開發一個資訊發佈平台，因為我本身習慣開發 java，這陣子經由 <a href="http://blog.lyhdev.com/">lyhcode</a> 的介紹開始使用 Grails，發現他真的是一個充滿驚奇的 framework，一開始可能會因為他的 <strong>精簡</strong> 讓你感到困惑，原本可能需要的步驟被省略後反而無法理解… 但一旦深入了解並且了解其習性後，才發現原來開發 java 也可以這麼快速！</p>

<p>一旦使用 Grails 後，你就不想用原始的 java 開發程式，正所謂回不去了… 除了骨子裡是 java，外在的部分基本上已經完全不一樣了，是說變帥了嘛？（誤）</p>

<p>回到正題，在一般 blog 的網站，很常用到的 tag (標籤)在實作上… 說實在的細節實在很多，我也不知道該怎麼實作… 在完全不知道怎麼實作光構思就可能花上一天，在加上開發運氣好的話或許 3 天解決，但今天我所要介紹的，只花你 1 小時，就完成 taggable 的實作！！很難想像嘛？就讓我們繼續看下去。</p>

<p>此範例參考下列網站：<a href="http://blog.armbruster-it.de/2011/04/a-perfect-team-grails-taggable-plugin-and-jquery-tagit/">Grails Taggable plugin and JQuery Tagit</a>，在這個範例中用的 grails 版本：1.4；jquery-tagit 版本：1.5。</p>

<p>而本文章撰寫時所使用的 grails 版本：2.2；jquery-tagit 版本：2.0。雖然版本不一樣但步驟上大致相同，首先我們必須安裝 taggable plugin。</p>

<h1>taggable &amp; jquery-ui plugin install</h1>

<p>在新版 2.2 grails 中已不建議使用 plugin install，根據官方的建議我們只要在 BuildConfig.groovy 新增下列：</p>

<pre><code>compile ':spring-security-ui:latest.release'
compile ":taggable:1.0.1"
</code></pre>

<p>一旦進入 grails 運行環境時將會自動安裝 plugin，就是這麼簡單，而 resources plugin 在 2.2 版已內建，所以不需要安裝，接著我們來處理…</p>

<h1>jquery tagit install</h1>

<p>下載 <a href="http://aehlke.github.com/tag-it/">jquery tagit</a></p>

<p>解壓縮後將檔案放置於：</p>

<ul>
<li>jquery.tagit.css: &#8216;web-app/tagit/css/jquery.tagit.css&#8217;</li>
<li>tagit.ui-zendesk.css: &#8216;web-app/tagit/css/tagit.ui-zendesk.css&#8217;</li>
<li>tag-it.js: &#8216;web-app/tagit/js/tag-it.js&#8217;</li>
</ul>


<p>接著需要定義 ApplicationResourses.goovy</p>

<pre><code>tagit {
    dependsOn 'jquery-ui'
    resource url: 'tagit/css/jquery.tagit.css'
    resource url: 'tagit/css/tagit.ui-zendesk.css'
    resource url: 'tagit/js/tag-it.js'
}
</code></pre>

<p> 如此一來，基本環境與需要的套件都已經 ready 了，就讓我們開始實作 taggable 功能，就先從定義…</p>

<h2>domain object</h2>

<p>在 grails 中所謂的 domain object 就是所謂的資料表物件，定義資料結構的地方，假設我們是要開發自己的 blog 平台，那每一篇文章在資料庫中我們就可以定義 table 為 post，相關程式碼如下：</p>

<pre><code>package sample

class Post {
    String title
    String content
}
</code></pre>

<p>我們所要做的就是將 <code>org.grails.taggable.Taggable</code> import 進去，並且實作 Taggable</p>

<pre><code>package sample
import org.grails.taggable.Taggable

class Post implements Taggable {
    String title
    String content
}
</code></pre>

<p>ok～我們的 domain object 準備好的，不需要額外的設定，而且完整的程式碼就是這樣而已，其他勒？沒有了… 詳細 taggable 可以如何操作請參考 grails 官方 <a href="http://www.grails.org/plugin/taggable">taggable plugin api</a>，接著我們需將先將介面也就是 view 的部份完成。</p>

<h2>view</h2>

<p>在 view 的撰寫上，基本上與原文中一樣，這邊對重點的部份進行說明</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'>  <span class="o">...</span>
</span><span class='line'>  <span class="o">&lt;%--</span> <span class="k">in</span> <span class="n">the</span> <span class="n">head</span> <span class="n">section</span> <span class="o">--%&gt;</span>
</span><span class='line'>  <span class="o">&lt;%--</span> <span class="err">下面會將剛剛在</span> <span class="n">ApplicationResourses</span> <span class="err">所定義需要載入的</span> <span class="n">tagit</span> <span class="err">相關</span> <span class="n">js</span><span class="err">、</span><span class="n">css</span> <span class="err">載入</span> <span class="o">--%&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nl">r:</span><span class="n">use</span> <span class="n">modules</span><span class="o">=</span><span class="s2">&quot;tagit&quot;</span><span class="s">/&gt;</span>
</span><span class='line'><span class="s">  ...</span>
</span><span class='line'><span class="s">  &lt;%-- in the form section --%&gt;</span>
</span><span class='line'><span class="s">  &lt;fieldset class=&quot;form&quot;&gt;</span>
</span><span class='line'><span class="s">    &lt;r:script&gt;</span>
</span><span class='line'><span class="s">      $(function() {</span>
</span><span class='line'><span class="s">        /</span><span class="o">*</span><span class="err">將</span><span class="n">$</span><span class="o">{</span><span class="n">g</span><span class="o">.</span><span class="na">createLink</span><span class="o">(</span><span class="nl">action:</span> <span class="s1">&#39;tags&#39;</span><span class="o">)}</span><span class="err">：產生</span> <span class="n">postController</span> <span class="n">action</span> <span class="err">為</span> <span class="n">tags</span> <span class="err">的連結</span>
</span><span class='line'>        <span class="o">*</span> <span class="err">透過設定</span> <span class="n">jquery</span> <span class="n">tagit</span> <span class="err">的</span> <span class="n">tagSource</span> <span class="err">的網址，一旦當你輸入</span> <span class="n">tag</span> <span class="n">name</span>
</span><span class='line'>        <span class="o">*</span> <span class="err">將會透過</span> <span class="n">ajax</span> <span class="err">的方式比對輸入的資料與資料庫中的</span> <span class="n">tag</span> <span class="err">來當做</span> <span class="n">auto</span><span class="o">-</span><span class="n">completion</span>
</span><span class='line'>        <span class="o">*</span> <span class="err">的資料來源</span>
</span><span class='line'>        <span class="o">*</span><span class="s">/</span>
</span><span class='line'><span class="s">        $(&quot;ul[name=&#39;tags&#39;]&quot;).tagit({select:true, tagSource: &quot;${g.createLink(action: &#39;tags&#39;)}&quot;});</span>
</span><span class='line'><span class="s">      });</span>
</span><span class='line'><span class="s">    &lt;/</span><span class="nl">r:</span><span class="n">script</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">h3</span><span class="o">&gt;</span><span class="n">Tags</span><span class="o">&lt;</span><span class="s">/h3&gt;</span>
</span><span class='line'><span class="s">    &lt;div class=&quot;fieldcontain&quot;&gt;</span>
</span><span class='line'><span class="s">      &lt;ul name=&quot;tags&quot;&gt;</span>
</span><span class='line'><span class="s">         &lt;%-- 透過 ${post.tags} 取得 tags 的資料 --%&gt;</span>
</span><span class='line'><span class="s">        &lt;g:each in=&quot;${post.tags}&quot;&gt;</span>
</span><span class='line'><span class="s">          &lt;li&gt;${it}&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="s">/g:each&gt;</span>
</span><span class='line'><span class="s">      &lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="s">/div&gt;</span>
</span><span class='line'><span class="s">  &lt;/</span><span class="n">fieldset</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>view 的部分這樣就算完成啦，跟前面比起來稍微複雜一點，但還是挺簡單的，接著我們就需要定義 controller 的部份。</p>

<h2>controller</h2>

<p>首先我們先把 tag 的 auto-completion 實作完成，我們需要先將相關的套件載入</p>

<p>  import org.grails.taggable.Tag
  import grails.converters.JSON</p>

<p>接著我們就可以新增 controller 中的 action</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'>  <span class="kt">def</span> <span class="n">tags</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">render</span> <span class="n">Tag</span><span class="o">.</span><span class="na">findAllByNameIlike</span><span class="o">(</span><span class="s2">&quot;${params.term}%&quot;</span><span class="o">).</span><span class="na">name</span> <span class="k">as</span> <span class="n">JSON</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如此就完成了 tag 的 auto-completion 實作，不要懷疑，真的就是這樣！我們來看看這句程式碼代表的意義：</p>

<p>  render &#8230; as JSON</p>

<p>指的是將查出來的結果轉為 JSON，接著看下面：</p>

<p>  Tag.findAllByNameIlike(&#8220;${params.term}%&#8221;)</p>

<p>根據 <a href="http://grails.org/doc/latest/guide/GORM.html#domainClasses">grails domainClasses API</a> 的說明，提到：</p>

<blockquote><p>Ilike - Similar to a Like, except case insensitive</p></blockquote>

<p>也就是區別大小寫，找出所有的 Name like &#8220;${params.term}%&#8221;，其中 params.term 是當你在前端 view 的 tag field keyin 尚未被處理為 tag 時回傳的變數名稱，一旦有定義 tagit 的 tagSource，將透過 get http method 的 url params 回傳；所以一旦你 keyin 就會觸動，http request 查詢相似的 tag 名稱，假設我輸入了 t 就會查出 Tag table 中符合資料的欄位 name 轉換為 json 回傳給前端，如下：</p>

<p>  [&#8220;test1&#8221;,&#8221;test2&#8221;]</p>

<p>如此一來在 web 網頁輸入 tag 名稱時就會帶出候選的 tag 讓使用者選取，執行畫面如下：</p>

<p><img src="https://lh5.googleusercontent.com/-CVYWTvOLJNc/UTClM-RrXQI/AAAAAAAALjg/DKmD2J-EhOU/s743/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-03-01+%E4%B8%8B%E5%8D%888.43.34.jpg" alt="img" /></p>

<p>很棒吧！假設 tag 輸入完畢了，我們必須把 tag 的資料寫入資料庫我們定義 action 為 update，相關程式碼如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'>  <span class="kt">def</span> <span class="nf">update</span><span class="o">(</span><span class="n">Long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">def</span> <span class="n">post</span> <span class="o">=</span> <span class="n">Post</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">id</span><span class="o">)</span>
</span><span class='line'>    <span class="n">post</span><span class="o">.</span><span class="na">properties</span> <span class="o">=</span> <span class="n">params</span>
</span><span class='line'>    <span class="n">post</span><span class="o">.</span><span class="na">tags</span> <span class="o">=</span> <span class="n">params</span><span class="o">.</span><span class="na">tags</span> <span class="c1">// 為了儲存 tags 只要新增這行</span>
</span><span class='line'>    <span class="n">post</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="nl">flush:</span> <span class="kc">true</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>就這樣完成 taggable 的開發，包括漂亮的介面、方便的輸入以及資料的更新與讀取，使用 grails 對於開發 java web 應用程式實在是太幸福了！</p>
<p><a rel="bookmark" href="http://smlsun.com/blog/2013/03/01/grails-taggable/"></a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[學 web 開發以及 sql 語法的好地方]]></title>
<link href="http://smlsun.com/blog/2013/02/28/study-coding/"/>
<updated>2013-02-28T18:45:00+08:00</updated>
<id>http://smlsun.com/blog/2013/02/28/study-coding</id>

      <content type="html"><![CDATA[<p>如果你是你剛踏入軟體開發的行列，很多語法或特性還不是很熟，是不是很想有個地方可以讓你找到各種語法的使用方式。</p>

<p>或者你是已經有經驗的開發者，有些時候你想試試看哪個屬性或者語法執行的結果如何，但當下又沒有環境讓你測試。</p>

<p>下面將介紹幾個不錯的網站讓不管是初學還是有經驗的開發者，都可以有個現成的環境讓你試試每個語法的特性。</p>

<h2><a href="http://jsfiddle.net/">jsfiddle</a></h2>

<p><img src="https://lh5.googleusercontent.com/-yFUqWAT58q0/US9CeiPUAiI/AAAAAAAALiw/L3CanL_aS58/s720/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-02-28+%E4%B8%8B%E5%8D%886.52.46.jpg" alt="img" /></p>

<p>一個可以線上模擬一個網站的環境，只要在上面的 HTML、css 以及 JavaScript 中寫入你要測試的程式碼，一旦執行以後，就可以在 Result 看到輸出的結果，特別的是該網站整合了一些大家都會常用的套件或是 framework，舉凡 jquery、extjs 或者是 YUI 等，都可以很輕易的測試每個套件的特性，圖片中的範例是用 extjs 來做範例</p>

<h2><a href="http://sqlfiddle.com/">sqlfiddle</a></h2>

<p><img src="https://lh5.googleusercontent.com/-iZt6XO24I_U/US9VL4aM9YI/AAAAAAAALjM/YuTxlBkcM58/s774/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-02-28+%E4%B8%8B%E5%8D%889.00.59.jpg" alt="image" /></p>

<p>線上 sql 語法練習網站，與 jsfiddle 類似，只是對象改成 sql，在開始練習前，需要先將範例 table 建立的語法置於左上角區域，接著就點選 Build Schema 就可以開始練習 sql 語法啦！</p>

<p>這網站還有一個特別的地方，他將 sql 的執行計畫也一併產生出來，可以讓你分析你下的 sql 執行效率，真的很方便呢！</p>

<h2><a href="http://www.w3schools.com/">w3schools</a></h2>

<p><img src="https://lh3.googleusercontent.com/-OD_nz64JW8I/US9CfAlsghI/AAAAAAAALi4/EWnAar60Nx0/s720/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-02-28+%E4%B8%8B%E5%8D%887.41.17.jpg" alt="image" /></p>

<p>與 jsfiddle 不同，w3schools 專注於每種語法的特性，一些在 wed 開發中會用到的技術介紹，當然他也可以線上測試各種語法的特性，雖然只是單語言測試，但對於急於查詢相關語法或者測試運行結果非常夠用了，除此之外有蠻詳細的解釋與範例，是個不錯的參考網站。</p>

<p>相關語言有：</p>

<ul>
<li><p>HTML &amp; CSS</p>

<ul>
<li>HTML Tutorial</li>
<li>HTML5 Tutorial</li>
<li>CSS Tutorial</li>
<li>CSS3 Tutorial</li>
</ul>
</li>
<li><p>Browser Scripting</p>

<ul>
<li>JavaScript Tutorial</li>
<li>HTML DOM Tutorial</li>
<li>jQuery Tutorial</li>
<li>JSON Tutorial</li>
<li>Google API Tutorial</li>
</ul>
</li>
<li><p>Server Scripting</p>

<ul>
<li>PHP Tutorial</li>
<li>SQL Tutorial</li>
<li>ASP Tutorial</li>
<li>ASP.NET Tutorial</li>
<li>Web Services Tutorial</li>
<li>Schema Tutorial</li>
<li>SOAP Tutorial</li>
<li>WSDL Tutorial</li>
</ul>
</li>
<li><p>Web Building</p>

<ul>
<li>Web Browsers</li>
<li>Web Certification</li>
<li>Web Hosting</li>
<li>Web TCP/IP</li>
<li>Web W3C</li>
<li>Web Quality</li>
</ul>
</li>
</ul>


<p>上面列出幾項，都是很常見的技術，真的是非常完整，可以參考看看囉！</p>
<p><a rel="bookmark" href="http://smlsun.com/blog/2013/02/28/study-coding/"></a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[javascript: 流程控制 - 並發(類多執行續)與等待(類循序程序)]]></title>
<link href="http://smlsun.com/blog/2013/02/23/javascript-sync/"/>
<updated>2013-02-23T13:50:00+08:00</updated>
<id>http://smlsun.com/blog/2013/02/23/javascript-sync</id>

      <content type="html"><![CDATA[<p>在開發網站應用程式時，假設有用到與後端的 server 透過 ajax 互動交換資料，為了確保當 ajax 執行完成後，能夠循序的執行之後的資料呈現，一般來說我們會使用 callback 來確保順序是正確的，不過 callback 一多程式是比較多層一點，對與我以往的經驗有是用過 DWR 提供的 setAsync(false) 來達到同樣的效果，不過該作法有個缺點，如果某個函數執行時間過長，會感覺好像整個瀏覽器都當掉一樣，因此我們需要更好的作法。</p>

<p>在找相關資料時，剛好有的不錯的參考介紹給大家：<a href="http://book.nodejs.tw/zh-tw/node_javascript.html#id1">JavaScript 與 NodeJS - 流程控制</a>，雖然該篇文章是以 NodeJS 為主，但實際上NodeJS 就是利用 javascript 來進行程式撰寫，所以概念上相當類似，其中關於流程控制章節，就是我們要參考的內容。</p>

<h2>並發與等待</h2>

<p>所謂的併發就是有點像多執行續，而等待就是等所有執行續都完成後在執行指定的函式，簡單來說假設你有 a, b, c 三個函式，其中你必須等待 a, b 兩個函式都執行完成後在執行 c 這個函式，最直覺的作法就是使用 callback 一個一個執行，但實際上如果一多的話程式會變得很難閱讀，所以換個方式來處理這樣的問題，我們來看一下下面的範例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">wait</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">callbacks</span><span class="p">,</span> <span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;wait start&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">counter</span> <span class="o">=</span> <span class="nx">callbacks</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">results</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">var</span> <span class="nx">next</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span><span class="c1">//接收函數執行結果，並判斷是否結束執行</span>
</span><span class='line'>      <span class="c1">//closure </span>
</span><span class='line'>      <span class="nx">results</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="o">--</span><span class="nx">counter</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">done</span><span class="p">(</span><span class="nx">results</span><span class="p">);</span><span class="c1">//如果結束執行，就把所有執行結果傳給指定的callback處理</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">callbacks</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span><span class="c1">//依次呼叫所有要執行的函數</span>
</span><span class='line'>      <span class="c1">//每個 callback 皆呼叫 next 函式，一旦 counter 歸 0 則執行 done 函式。</span>
</span><span class='line'>      <span class="nx">callbacks</span><span class="p">[</span><span class="nx">i</span><span class="p">](</span><span class="nx">next</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;wait end&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的 wait 函式實作了多函數 callbacks 執行完後在執行 done 的函式，透過每個函數執行完後就將 counter 減一，檢查 counter 是否歸 0，而下面就是實際應用的範例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">wait</span><span class="p">(</span>
</span><span class='line'>  <span class="p">[</span>
</span><span class='line'>      <span class="kd">function</span><span class="p">(</span><span class="nx">next</span><span class="p">){</span>
</span><span class='line'>          <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>              <span class="c1">// callback 呼叫 next 函數</span>
</span><span class='line'>              <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;done a&#39;</span><span class="p">);</span>
</span><span class='line'>              <span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="mi">500</span><span class="p">;</span>
</span><span class='line'>              <span class="nx">next</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span>
</span><span class='line'>          <span class="p">},</span><span class="mi">500</span><span class="p">);</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="kd">function</span><span class="p">(</span><span class="nx">next</span><span class="p">){</span>
</span><span class='line'>          <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>              <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;done b&#39;</span><span class="p">);</span>
</span><span class='line'>              <span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="mi">1000</span><span class="p">;</span>
</span><span class='line'>              <span class="nx">next</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span>
</span><span class='line'>          <span class="p">},</span><span class="mi">1000</span><span class="p">);</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="kd">function</span><span class="p">(</span><span class="nx">next</span><span class="p">){</span>
</span><span class='line'>          <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>              <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;done c&#39;</span><span class="p">);</span>
</span><span class='line'>              <span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="mi">1500</span><span class="p">;</span>
</span><span class='line'>              <span class="nx">next</span><span class="p">(</span><span class="mi">1500</span><span class="p">)</span>
</span><span class='line'>          <span class="p">},</span><span class="mi">1500</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>    
</span><span class='line'>  <span class="p">],</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 一旦上述函數皆執行完成，傳入每個函數執行完成的 results 進行處理</span>
</span><span class='line'>  <span class="kd">function</span><span class="p">(</span><span class="nx">results</span><span class="p">){</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">ret</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>      <span class="k">for</span><span class="p">(;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">results</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">ret</span> <span class="o">+=</span> <span class="nx">results</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;done all. result: &#39;</span><span class="o">+</span><span class="nx">ret</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>如上面的例子，我們就可以很簡單的處理需要同步執行的狀況啦！</p>

<p>在舉個例子假設我們要使用 extjs 的 msg box 一旦確定完成後才執行後續程式，我們可以改寫成：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">wait</span><span class="p">(</span>
</span><span class='line'>    <span class="p">[</span>
</span><span class='line'>        <span class="kd">function</span><span class="p">(</span><span class="nx">next</span><span class="p">){</span>
</span><span class='line'>            <span class="nx">Ext</span><span class="p">.</span><span class="nx">MessageBox</span><span class="p">.</span><span class="nx">confirm</span><span class="p">(</span><span class="s1">&#39;Confirm&#39;</span><span class="p">,</span> <span class="s1">&#39;Are you sure you want to do that?&#39;</span><span class="p">,</span> <span class="nx">next</span><span class="p">);</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="kd">function</span><span class="p">(</span><span class="nx">next</span><span class="p">){</span>
</span><span class='line'>            <span class="nx">next</span><span class="p">(</span><span class="s2">&quot; hello!&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 一旦上述函數皆執行完成，傳入每個函數執行完成的 results 進行處理</span>
</span><span class='line'>    <span class="kd">function</span><span class="p">(</span><span class="nx">results</span><span class="p">){</span>
</span><span class='line'>        <span class="nx">Ext</span><span class="p">.</span><span class="nx">MessageBox</span><span class="p">.</span><span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;Status&#39;</span><span class="p">,</span> <span class="s1">&#39;results id &#39;</span><span class="o">+</span> <span class="nx">results</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="s1">&#39; and &#39;</span><span class="o">+</span> <span class="nx">results</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>就是這麼簡單！而在進階一點如果我們需要連續兩次 confirm 該怎麼做？直覺上，如果應該會如此處理：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">wait</span><span class="p">(</span>
</span><span class='line'>    <span class="p">[</span>
</span><span class='line'>        <span class="kd">function</span><span class="p">(</span><span class="nx">next</span><span class="p">){</span>
</span><span class='line'>            <span class="nx">Ext</span><span class="p">.</span><span class="nx">MessageBox</span><span class="p">.</span><span class="nx">confirm</span><span class="p">(</span><span class="s1">&#39;Confirm&#39;</span><span class="p">,</span> <span class="s1">&#39;Are you sure you want to do that?&#39;</span><span class="p">,</span> <span class="nx">next</span><span class="p">);</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="kd">function</span><span class="p">(</span><span class="nx">next</span><span class="p">){</span>
</span><span class='line'>             <span class="nx">Ext</span><span class="p">.</span><span class="nx">MessageBox</span><span class="p">.</span><span class="nx">confirm</span><span class="p">(</span><span class="s1">&#39;Confirm&#39;</span><span class="p">,</span> <span class="s1">&#39;Are you sure you want to do that?&#39;</span><span class="p">,</span> <span class="nx">next</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 一旦上述函數皆執行完成，傳入每個函數執行完成的 results 進行處理</span>
</span><span class='line'>    <span class="kd">function</span><span class="p">(</span><span class="nx">results</span><span class="p">){</span>
</span><span class='line'>        <span class="nx">Ext</span><span class="p">.</span><span class="nx">MessageBox</span><span class="p">.</span><span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;Status&#39;</span><span class="p">,</span> <span class="s1">&#39;results id &#39;</span><span class="o">+</span> <span class="nx">results</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="s1">&#39; and &#39;</span><span class="o">+</span> <span class="nx">results</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是！實際上只會有一個 confirm 跳出來，因為是同時執行對於 ext 而言 Ext.MessageBox 是同一個物件，所以最後一個執行的會把前述的 confirm 蓋掉，因此就只會有一個 confirm，正確來說我們可以在  done 在執行一個 wait，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">wait</span><span class="p">(</span>
</span><span class='line'>    <span class="p">[</span>
</span><span class='line'>        <span class="kd">function</span><span class="p">(</span><span class="nx">next</span><span class="p">){</span>
</span><span class='line'>            <span class="nx">Ext</span><span class="p">.</span><span class="nx">MessageBox</span><span class="p">.</span><span class="nx">confirm</span><span class="p">(</span><span class="s1">&#39;Confirm&#39;</span><span class="p">,</span> <span class="s1">&#39;Are you sure you want to do that?&#39;</span><span class="p">,</span> <span class="nx">next</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">function</span><span class="p">(</span><span class="nx">resultsA</span><span class="p">){</span>
</span><span class='line'>        <span class="nx">wait</span><span class="p">(</span>
</span><span class='line'>            <span class="p">[</span>
</span><span class='line'>                <span class="kd">function</span><span class="p">(</span><span class="nx">next</span><span class="p">){</span>
</span><span class='line'>                    <span class="nx">Ext</span><span class="p">.</span><span class="nx">MessageBox</span><span class="p">.</span><span class="nx">confirm</span><span class="p">(</span><span class="s1">&#39;Confirm&#39;</span><span class="p">,</span> <span class="s1">&#39;Are you sure you want to do that?&#39;</span><span class="p">,</span> <span class="nx">next</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">],</span>
</span><span class='line'>
</span><span class='line'>            <span class="kd">function</span><span class="p">(</span><span class="nx">resultsB</span><span class="p">){</span>
</span><span class='line'>                <span class="nx">Ext</span><span class="p">.</span><span class="nx">MessageBox</span><span class="p">.</span><span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;Status&#39;</span><span class="p">,</span> <span class="s1">&#39;results id &#39;</span><span class="o">+</span> <span class="nx">resultsA</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="s1">&#39; and &#39;</span><span class="o">+</span> <span class="nx">resultsB</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>如此一來，就可以正確擷取到兩次 confirm 的內容，基本上上述的函式在使用上必須注意，所謂的併發就是個函數之間不能有先後關係，只能與等待的函數有先後關係，透過上述的例子要操作相關的函數執行流程就不是問題了。</p>

<p>另外一個流程控制的議題，假設你有個連續的 ajax 請求需求，且必須照順序執行可參考下列文章：<a href="http://blog.darkthread.net/post-2012-09-05-sequential-ajax-with-jquery.aspx">以jQuery循序執行AJAX呼叫，並依結果決定是否繼續</a></p>
<p><a rel="bookmark" href="http://smlsun.com/blog/2013/02/23/javascript-sync/"></a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[ubuntu 中安装 apache ab 進行壓力測試]]></title>
<link href="http://smlsun.com/blog/2013/02/23/ubuntu-apache-ab-benchmarking/"/>
<updated>2013-02-23T11:35:00+08:00</updated>
<id>http://smlsun.com/blog/2013/02/23/ubuntu-apache-ab-benchmarking</id>

      <content type="html"><![CDATA[<p>資料來源： <a href="http://hikin.iteye.com/blog/866582">ubuntu 中安装 apache ab 來進行簡單的壓力測試</a></p>

<p>在 ubuntu 底下安裝 apache ab 很簡單：</p>

<p>apt-get install apache2-utils</p>

<p>我們可以透過以下指令來做簡單測試：</p>

<p>ab -n 100 -c 10 http://localhost:8080/</p>

<p>其中關於 ab 其他指令的運用可以參考 man</p>

<p>Usage: ab [options] [http[s]://]hostname[:port]/path
Options are:</p>

<pre><code>//總需求數
-n requests Number of requests to perform宅 

//一次同時併發的請求數 總的請求數(n)=次數*一次併發數(c) 
-c concurrency Number of multiple requests to make

-t timelimit Seconds to max. wait for responses
-b windowsize Size of TCP send/receive buffer, in bytes
-p postfile File containing data to POST. Remember also to set -T
-u putfile File containing data to PUT. Remember also to set -T
-T content-type Content-type header for POSTing, eg.
'application/x-www-form-urlencoded'
Default is 'text/plain'
-v verbosity How much troubleshooting info to print
-w Print out results in HTML tables
-i Use HEAD instead of GET
-x attributes String to insert as table attributes
-y attributes String to insert as tr attributes
-z attributes String to insert as td or th attributes
-C attribute Add cookie, eg. 'Apache=1234. (repeatable)
-H attribute Add Arbitrary header line, eg. 'Accept-Encoding: gzip'
Inserted after all normal header lines. (repeatable)
-A attribute Add Basic WWW Authentication, the attributes
are a colon separated username and password.
-P attribute Add Basic Proxy Authentication, the attributes
are a colon separated username and password.
-X proxy:port Proxyserver and port number to use
-V Print version number and exit
-k Use HTTP KeepAlive feature
-d Do not show percentiles served table.
-S Do not show confidence estimators and warnings.
-g filename Output collected data to gnuplot format file.
-e filename Output CSV file with percentages served
-r Don't exit on socket receive errors.
-h Display usage information (this message)
-Z ciphersuite Specify SSL/TLS cipher suite (See openssl ciphers)
-f protocol Specify SSL/TLS protocol (SSL2, SSL3, TLS1, or ALL)
</code></pre>

<p>實際的運行報告呈現如下：</p>

<pre><code>Server Software: lighttpd/1.4.20
Server Hostname: hikin.iteye.com
Server Port: 80

Document Path: /
Document Length: 2095 bytes

Concurrency Level: 10

//整個測試持續的時間 
Time taken for tests: 3.303 seconds

//完成的請求數量 
Complete requests: 100
Failed requests: 0
Write errors: 0
Total transferred: 235200 bytes
HTML transferred: 209500 bytes

//平均每秒處理30個請求 
Requests per second: 30.27 [#/sec] (mean)

//平均每個請求處理時間為330毫秒 注:這裡將一次10個併發請求看成一個整體 
Time per request: 330.335 [ms] (mean)

//平均每個併發請求處理 時間 為33毫秒 
Time per request: 33.034 [ms] (mean, across all concurrent requests)
Transfer rate: 69.53 [Kbytes/sec] received

Connection Times (ms)
min mean[+/-sd] median max
Connect: 51 170 35.9 178 230
Processing: 60 153 64.5 121 263
Waiting: 55 148 64.4 115 258
Total: 235 322 59.9 299 437

Percentage of the requests served within a certain time (ms)

//在這100個請求中有50%在299毫秒內完成 
50% 299

//在這100個請求中有66%在312毫秒內完成 
66% 312
75% 383
80% 412
90% 431
95% 432
98% 436
99% 437
100% 437 (longest request)
</code></pre>

<p>以往要用人工來進行測試，使用 apache ab 可以很快速的完成，讓壓力測試不再是個黑盒子，永遠不知道到底系統運行效率如何。</p>
<p><a rel="bookmark" href="http://smlsun.com/blog/2013/02/23/ubuntu-apache-ab-benchmarking/"></a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[mysql5 tomcat7 安裝與注意事項以及透過 apache2 運行 phpmyadmin]]></title>
<link href="http://smlsun.com/blog/2013/02/22/mysql5-tomcat7-install/"/>
<updated>2013-02-22T18:43:00+08:00</updated>
<id>http://smlsun.com/blog/2013/02/22/mysql5-tomcat7-install</id>

      <content type="html"><![CDATA[<p>最近為了運行依一個專案是用 tomcat 作為 AP 與 mysql 作為 DB 的運行環境，實際跑過一次安裝步驟，與過程中的疑難排解，特別寫篇文章記錄一下，順變給有需要的朋友參考看看。</p>

<p>之前在公司時所使用的環境是以 jboss 作為 AP 以及 ms sql 作為 db，而所使用的 os 是 windows xp，基本上還算單純，jboss 解開下載回來的 zip 檔，基本上就可以使用了，而 ms sql 安裝上也不能，只是要注意是否允許資料庫分辨大小寫，以及資料庫編碼方式等。</p>

<p>而這次所要安裝的環境是在 ubuntu 底下，步驟就比較繁瑣了，包括安裝位置什麼的，都有固定位置，更重要的還有權限控管，環境參數等，如果沒有設置好的話是沒有辦法運行的。</p>

<p>首先就先從安裝 mysql 開始啦！</p>

<h2>mysql</h2>

<p>在 ubuntu 安裝 mysql 很簡單只要一句：</p>

<p><code>sudo apt-get install mysql-server</code></p>

<p>安裝完成後會詢問 root 密碼，輸入完成後，接著我們就可進行登入，使用下列語法：</p>

<p><code>mysql -u root -p [資料庫名稱]</code></p>

<p>上述指定，如果沒有如入資料庫名稱，則為資料庫的根目錄，一旦登入後，需要指定操作的資料庫可用下列指令：</p>

<p><code>use [資料庫名稱] ;</code></p>

<p>其中最後的 <code>;</code> 請要記得輸入，那是作為指令結束的識別，有了 <code>;</code> 才會執行，接著一旦登入完成後我們可以建立一個新的資料庫。</p>

<p><code>create database demo</code></p>

<p>預設來說，新增的資料庫是不支援中文，所以如果你要建立資料庫是屬於 utf-8 的編碼方式可以用下列指令：</p>

<p><code>CREATE DATABASE demo DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;</code></p>

<p>再來如果你要新建一個使用者帳號，可以用下列指令，需先登入 mysql：</p>

<p><code>create user 'UserName'@'Host' identified by 'Password';</code></p>

<p>ex:</p>

<p><code>create user 'joey'@'localhost' identified by 'abcd2345';</code></p>

<p>如果你不指定 host 可以先用 <code>%</code> 取代如：</p>

<p><code>create user 'joey'@'%' identified by 'abcd2345';</code></p>

<p>在 mysql 官方的說明如下：</p>

<blockquote><p>If you specify only the user name part of the account name, a host name part of &#8216;%&#8217; is used.</p></blockquote>

<p>user 建立好了，接著就要給予權限啦：</p>

<p><code>grant OPTION on TARGET to USER;</code></p>

<p>範例如下：</p>

<p><code>grant all on *.* to 'joey'@'localhost';</code></p>

<p>上述的意思是 joey 對整個資料庫的所有資料表都擁有全部的權利，如果要指定 joey 只擁有對 demo 這個資料檔[的所有表格]的查詢及新增權利，指令如下：</p>

<p><code>grant select,insert on demo.* to 'joey'@'localhost';</code></p>

<p>假使我們需要知道目前有建立的使用者有哪些，可以使用下列指令顯示 mysql 這個資料庫中 user 資料表的 Host 及 User 欄位：</p>

<p><code>select Host, User from mysql.user;</code></p>

<p>最後如果你要刪除 user 可以用下列指令：</p>

<p><code>drop user OPTION 'UserName'@'Host';</code></p>

<p>如果你需要啟動或停止 mysql 可以用下列指令：</p>

<ul>
<li>啟動： <code>sudo start mysql</code></li>
<li>關閉： <code>sudo stop mysql</code></li>
<li>重啟： <code>sudo restart mysql</code></li>
</ul>


<p>上面就是 mysql 的基礎安裝，當然如果希望一個 gui 元件來管理 mysql，請接著看以下介紹：</p>

<h2>phpmyadmin</h2>

<p>安裝指令也很簡單：</p>

<p><code>sudo apt-get install libapache2-mod-auth-mysql php5-mysql phpmyadmin</code></p>

<p>請根據安裝步驟將他完成，詳細可參考此網址：<a href="http://www.distrogeeks.com/install-phpmyadmin-ubuntu/">Install phpMyAdmin in Ubuntu</a>，其中因為 phpmyadmin 是 php 寫的因此需要運行於 server 上，在這我所使用的是 apache2 可以透過下列指令安裝：</p>

<p><code>sudo apt-get install apache2</code></p>

<p>安裝完成後可以透過瀏覽下列網址來進行操作 <code>http://localhost/phpmyadmin</code>，不過有可能你會看到 404 因此如果你真的遇到了請增加下列步驟：</p>

<p>編輯：</p>

<p><code>sudo vim /etc/apache2/apache2.conf</code></p>

<p>加入下列字串：</p>

<p><code>Include /etc/phpmyadmin/apache.conf</code></p>

<p>重啟 apache2</p>

<p><code>sudo /etc/init.d/apache2 restart</code></p>

<p>你也可以使用啟動與停止：</p>

<pre><code>sudo /etc/init.d/apache2 start   #start apache
sudo /etc/init.d/apache2 stop   #stop apache
sudo /etc/init.d/apache2 restart   #restart apache
</code></pre>

<p>如此一來你就可以用 gui 介面來管理或維護資料庫啦！</p>

<p><img src="https://lh6.googleusercontent.com/-HsxmrVP4C6U/USgqWZS9EaI/AAAAAAAALic/LBXHLR96Wf0/s786/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-02-23+%E4%B8%8A%E5%8D%8810.32.29.jpg" alt="image" /></p>

<p>mysql 的 介紹算是告一段落了，一些進階的就請 google 一下囉！接著來看 tomcat7 的安裝。</p>

<h2>tomcat7</h2>

<p>在 ubuntu 底下我們可用下列指令來安裝 tomcat7：</p>

<p>sudo apt-get install tomcat7</p>

<p>安裝完成後，我們可以透過下列指令來啟動或關閉 tomcat7：</p>

<ul>
<li>啟動： <code>sudo service tomcat7 start</code></li>
<li>關閉： <code>sudo service tomcat7 stop</code></li>
<li>重啟： <code>sudo service tomcat7 restart</code></li>
</ul>


<p>如果是使用 apt-get install tomcat7 相關檔案放置位置如下：</p>

<ul>
<li><code>/etc/tomcat6</code> for configuration and runtime, called CATALINA_HOME</li>
<li><code>/var/lib/tomcat7/webapps/</code> webapps 的位置</li>
<li><code>/usr/share/tomcat7</code>bin 的位置</li>
</ul>


<p>如果你不想透過 apt-get install tomcat7 可以參考這篇文章安裝：<a href="http://diegobenna.blogspot.tw/2011/01/install-tomcat-7-in-ubuntu-1010.html">Install Tomcat 7 on Ubuntu 12.04</a>，需要注意的是，如果是自行安裝 JAVA_HOME 的設定必須確實，如果設定錯誤，啟動 tomcat 時不會出現明確的錯誤訊息。</p>

<p>以上就是 tomcat 與 mysql 的安裝步驟。</p>
<p><a rel="bookmark" href="http://smlsun.com/blog/2013/02/22/mysql5-tomcat7-install/"></a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[程式東西軍： grails & play!]]></title>
<link href="http://smlsun.com/blog/2013/02/21/grails-play/"/>
<updated>2013-02-21T16:37:00+08:00</updated>
<id>http://smlsun.com/blog/2013/02/21/grails-play</id>

      <content type="html"><![CDATA[<p>grails 與 play! 是當今比較完整的 java framework，當然兩者也常被拿來比較，要說比較優？其實各有各的好。</p>

<p>學習一樣工具需要花很多時間，在開始學習一樣新東西時，當然需要知道哪個是比較值得投入的，人生苦短阿！</p>

<p>因此，在搜尋相關資訊時，發現一個比較 grails and play! 的優缺點很不錯的網站，介紹給大家：</p>

<p><a href="http://www.ubertracks.com/preso/#/">Play vs. Grails Smackdown</a></p>

<p><img src="https://lh4.googleusercontent.com/-64F82PXFzn8/USXlKERNNuI/AAAAAAAALiA/4BTWEumSSzg/s786/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-02-21+%E4%B8%8B%E5%8D%885.12.13.jpg" alt="image" /></p>

<p>這網站的內容是用簡報的方式來呈現，個人是蠻喜歡的，他做了兩個網站，分別使用 grails and play! 進行建置，分別是<a href="http://bike.ubertracks.com/">grils - Bike Über Tracks</a> 以及 <a href="http://hike.ubertracks.com/">play! - Hike Über Tracks</a>；當然在比較時需要從各個面向來進行，該網站先從開發一個專案舉凡資料庫、MVC 架構、設定方式等來進行比較。</p>

<p><img src="https://lh4.googleusercontent.com/-fAoYv2Tr204/USXlLVE-RNI/AAAAAAAALiI/AJgJkzTA45w/s786/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-02-21+%E4%B8%8B%E5%8D%885.12.44.jpg" alt="image" /></p>

<p>接著透過一些應用程式評比工具來測試兩者的優劣，除了開發方便性，效能測試外，對於發展趨勢也有很完整的介紹。</p>

<p>最後的結論由三個面向來做為總結，分別是：程式碼、統計分析、生態系統來做為總結。</p>

<p>雖然有時候比較有點無濟於事，況且對於事物的看法每個人都有所不同，沒有絕對對錯，假如你也正在煩惱哪個比較好，希望這樣的資訊能夠協助你判斷囉。</p>

<p>我個人看完以後看起來是 grails 目前佔上風，不過… 科技日新月異，況且 play! 在 hacker news 數上完勝 grails，誰知道呢？</p>

<p>最後提醒大家，不管黑貓白貓，會抓老鼠的就是好貓，用起來最順手的就是好工具！</p>
<p><a rel="bookmark" href="http://smlsun.com/blog/2013/02/21/grails-play/"></a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[extjs: tree 的建立與使用]]></title>
<link href="http://smlsun.com/blog/2013/02/19/extjs-tree/"/>
<updated>2013-02-19T18:40:00+08:00</updated>
<id>http://smlsun.com/blog/2013/02/19/extjs-tree</id>

      <content type="html"><![CDATA[<p>資料來源：</p>

<ul>
<li><a href="http://blog.yslifes.com/archives/738">範例Tree元件的使用Ext.tree.TreePanel</a></li>
<li><a href="http://nano-chicken.blogspot.tw/2009/08/extjs-exttreetreepanel_2847.html">extjs - Ext.tree.TreePanel 簡介</a></li>
</ul>


<p>ExtJS的TreePanel樹是繼承Ext.Panel，所以它可以算是一個Container，不過它也是算是一個ExtJS的Component，給於TreeNode來完成樹狀結果，可以應用在選單或是分類等地方。</p>

<p>這裡將介紹兩種 tree 的建立方式：</p>

<h1>利用物件來產生 tree</h1>

<pre><code>Ext.onReady( function() {

    var root = new Ext.tree.TreeNode( {
        text : '根'
    });

    var node1Child1 = new Ext.tree.TreeNode( {
        text : '個人資料維護',
        leaf : 'true'// 是否為末結果,樹葉
    });
    var node1Child2 = new Ext.tree.TreeNode( {
        text : '密碼變更',
        leaf : 'true'// 是否為末結果,樹葉
    });

    var node1 = new Ext.tree.TreeNode( {
        text : '個人資料'
    });
    node1.appendChild(node1Child1);
    node1.appendChild(node1Child2);

    root.appendChild(node1);

    var viewport = new Ext.tree.TreePanel( {

        title : "系統相關",
        width : 200,

        height : 500,
        rootVisible : true,//root結點顯不顯示
        root : root

    });

    viewport.render('toolbar');
    viewport.doLayout();

});
</code></pre>

<h2>利用 script 來產生 tree 透過 AsyncTreeNode</h2>

<p>若是用此方法需要使用 <code>AsyncTreeNode</code>，此外你的 children 也可以掛載 json Object 需要注意的是組成 tree 所需要的 config 都需要有才能正確產生，以及 <code>AsyncTreeNode</code> 的特性，如果節點一次都沒有打開過，若想要經由 <a href="http://docs.sencha.com/ext-js/3-4/#!/api/Ext.data.Node-method-findChild">findChild</a>來取得參照是沒辦法的，因為是 Async (非同步)，所以未開啟其節點尚未實體化。</p>

<pre><code>Ext.onReady( function() {
    var viewport = new Ext.tree.TreePanel( {

        title : "系統相關",
        width : 200,

        height : 500,
        rootVisible : true,//root結點顯不顯示
        root : new Ext.tree.AsyncTreeNode( {
            text : '根',

            children : [ {
                text : '個人資料',
                children : [ {
                    text : '個人資料維護',
                    leaf : true
                }, {
                    text : '密碼變更',
                    leaf : true
                } ]
            }, {
                text : '客戶資料',
                children : [ {
                    text : '客戶基本資料查詢維護',
                    leaf : true
                }, {
                    text : '客戶基本資料列印',
                    leaf : true
                } ]
            }]
        })

    });

    viewport.render('toolbar');
    viewport.doLayout();

});
</code></pre>

<h2>讀取 json 資料來源產生 tree</h2>

<p>假設遠端的 json 資料來源：</p>

<pre><code>[{
    id: 1,
    text: 'A leaf Node',
    leaf: true
},{
    id: 2,
    text: 'A folder Node',
    children: [{
        id: 3,
        text: 'A child Node',
        leaf: true
    }]
}]
</code></pre>

<p>leaf 屬性會在 load 的時候，判斷是否要在遞迴產生子節點。而原本的 Ext.tree.TreeNode 並不支援 Ajax，所以也要改成 Ext.tree.AsyncTreeNode，程式碼如下：</p>

<pre><code>Ext.onReady(function() {
    var root = new Ext.tree.AsyncTreeNode({text: 'root'});
    var tree = new Ext.tree.TreePanel({
        el: 't',
        width: 150,
        autoHeight: true,
        root: root,
        loader: new Ext.tree.TreeLoader({dataUrl: 'tree.json'})
    });
    tree.render();
});
</code></pre>

<p>與上面的例子差別在多了使用了 Ext.tree.TreeLoader。</p>

<h2>讀取 xml 資料來源產生 tree</h2>

<p>除了 json 結構讀取外，在 extjs 的 <a href="http://dev.sencha.com/deploy/ext-3.4.0/examples/tree/xml-tree-loader.html">官方 sample</a> 有資料來源為 xml 的範例。</p>

<p>其中使用 extjs 延伸套件 <a href="http://dev.sencha.com/deploy/ext-3.4.0/examples/ux/XmlTreeLoader.js">Ext.ux.tree.XmlTreeLoader</a>，使用上必須先自行定義 component extend Ext.ux.tree.XmlTreeLoader 並且實作 processAttributes，使用上無法定義 maping 的方式，他會把所有的 xml tag 跑過一變，必須在 tag 中的 Attribute 能有識別的方式，其中若是 tag 裡的內容預設會塞入 innerText 參數。</p>

<ul>
<li><a href="http://dev.sencha.com/deploy/ext-3.4.0/examples/tree/xml-tree-data.xml">xml 資料來源</a></li>
</ul>


<h2>tree 的操作與參照</h2>

<p>上面介紹了各種產生 tree 的方式，這邊要介紹一下如何透過 extjs 提供的函數來操作相關的節點，幾個重要的函數：</p>

<ul>
<li><p><a href="http://docs.sencha.com/ext-js/3-4/#!/api/Ext.tree.TreePanel-method-expandPath">expandPath( path, [attr], [callback] )</a></p>

<p>  預設的 path 是根據 id 來作為目錄結構的敘述，[attr] 可以改變目錄索引的屬性。</p></li>
<li><p>selectPath( path, [attr], [callback] )</p>

<p>  使用方式同上，不同的是會執行 expandPath 在做 selectPath</p></li>
<li><p><a href="http://docs.sencha.com/ext-js/3-4/#!/api/Ext.data.Node-method-findChild">findChild( attribute, value, [deep] )</a></p>

<p>  用來查詢特定的節點，其中若未設置 deep ＝ tree 將只搜尋使用此函數之物件的下一層，另外在上面有提到，如果是使用 AsyncTreeNode 尚未開啟節點前是找不到的。</p></li>
</ul>


<p>其他請參照 API，以下有實際使用飯例：</p>

<pre><code>Ext.onReady( function() {
  var viewport = new Ext.tree.TreePanel( {
    title : "系統相關",
    width : 200,
    height : 500,
    rootVisible : true,//root結點顯不顯示
    root : new Ext.tree.AsyncTreeNode( {
      text : '根',
      id:'r',

      children : [ {
        text : '個人資料',
        id:'c1',
        children : [ {
            text : '個人資料維護',
            id:'c1c1',
            leaf : true

        }, {
            text : '密碼變更',
            myid:'c1c2',
            leaf : true
        } ]
      }, {
        text : '客戶資料',
        id:'c2',
        children : [ {
            text : '客戶基本資料查詢維護',
            leaf : true,
            id:'c2c1'
        }, {
            text : '客戶基本資料列印',
            leaf : true,
            id:'c2c2'
        } ]
      } ]
    })

  });

  viewport.render('toolbar');
  viewport.doLayout();

  var btn=new Ext.Button({
    renderTo:"btn",
    id:'test',
    text:'test',
    handler:function(){

        // selectPath 可以做到 expand 之後在進行 select
      viewport.selectPath('/r/c2/c2c1');

      // 選取另一個節點需注意的是若 c1c1 此節點未被開啟，結果會為 undifine
      alert(viewport.root.findChild( 'id', 'c1c1', true ));

      // 一旦開啟過節點，再次 findChild 就會取得實體。
      viewport.expandPath('/r/c1/c1c1');
      alert(viewport.root.findChild( 'id', 'c1c1', true ));

      // 除了 id 之外，我們也可以用別的屬性來做搜尋
      viewport.root.findChild( 'myid', 'c1c2', true ).select();
    }
  });

});
</code></pre>

<p>說明都在程式註解中，這邊就不再多做說明，以下是實際範例運行的結果：</p>

<iframe style="width: 100%; height: 600px" src="http://jsfiddle.net/smlsun/xyvJX/2/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>



<p><a rel="bookmark" href="http://smlsun.com/blog/2013/02/19/extjs-tree/"></a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[extjs: component 的使用，找尋 parent & child，以及區別 id、itemid 的不同]]></title>
<link href="http://smlsun.com/blog/2013/02/19/extjs-component/"/>
<updated>2013-02-19T14:47:00+08:00</updated>
<id>http://smlsun.com/blog/2013/02/19/extjs-component</id>

      <content type="html"><![CDATA[<p>了解 component 的運作將有助於在操作 extjs 時，能夠更靈活操作在一個頁面中各個元件的運作，有了 component 查詢父類以及子類的方法可以更方便存取各階層的元件，特別在 single page 的頁面設計下更顯重要，並且在前端程式架構與分工上我們將可以很輕易的將 view 與事件獨立開來，避免重覆設計元件，造成維護上的困擾。</p>

<p>下面將說明查詢父類以及子類的方式</p>

<h2><a href="http://docs.sencha.com/ext-js/3-4/#!/api/Ext.Component">component</a> hierarchy (階層)</h2>

<ul>
<li><p><a href="http://docs-devel.sencha.com/ext-js/3-4/#!/api/Ext.BoxComponent">Ext.BoxComponent</a></p>

<ul>
<li><a href="http://docs-devel.sencha.com/ext-js/3-4/#!/api/Ext.Container">Ext.Container</a></li>
</ul>
</li>
</ul>


<h2>取得特定 component</h2>

<ul>
<li><a href="http://docs-devel.sencha.com/ext-js/3-4/#!/api/Ext-method-getCmp">getCmp</a></li>
</ul>


<h2>取得 parent component</h2>

<p>因為 extjs 所有的元件皆繼承於 component，且 Ext.Container 擁有 component，故通常透過下列方式取得的 parent Component 都屬於 Ext.Container，雖然如此，parent 物件還是擁有當初創建 Component 的屬性或方法。</p>

<ul>
<li><p><a href="http://docs-devel.sencha.com/ext-js/3-4/#!/api/Ext.Component-property-ownerCt">Component.ownerCt</a></p>

<p>  ownerCt 為 Component 的 properties，因此可直接取得，詳細可查找 extjs api</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">parent</span> <span class="o">=</span> <span class="nx">child</span><span class="p">.</span><span class="nx">ownerCt</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="http://docs-devel.sencha.com/ext-js/3-4/#!/api/Ext.Component-method-findParentBy">findParentBy</a></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">form</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">findParentBy</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">p</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">//定義你要索引的 parent 的條件式，若回傳為 true 將會回傳該 container parent</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">p</span><span class="p">.</span><span class="nx">getForm</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="http://docs-devel.sencha.com/ext-js/3-4/#!/api/Ext.Component-method-findParentByType">findParentByType</a> (  String/Class xtype ) : Container</li>
</ul>


<p>主要透過 findParentBy 實作，找出最接近且符合傳入 xtype</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="p">(</span><span class="nx">xtype</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">Ext</span><span class="p">.</span><span class="nx">isFunction</span><span class="p">(</span><span class="nx">xtype</span><span class="p">)</span> <span class="o">?</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">findParentBy</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">p</span><span class="p">){</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">p</span><span class="p">.</span><span class="nx">constructor</span> <span class="o">===</span> <span class="nx">xtype</span><span class="p">;</span>
</span><span class='line'>    <span class="p">})</span> <span class="o">:</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">findParentBy</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">p</span><span class="p">){</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">p</span><span class="p">.</span><span class="nx">constructor</span><span class="p">.</span><span class="nx">xtype</span> <span class="o">===</span> <span class="nx">xtype</span><span class="p">;</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>取得 child component</h2>

<ul>
<li>getComponent</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">childPanel</span> <span class="o">=</span> <span class="nx">Ext</span><span class="p">.</span><span class="nx">getCmp</span><span class="p">(</span><span class="s1">&#39;parentPanel&#39;</span><span class="p">).</span><span class="nx">getComponent</span><span class="p">(</span><span class="s1">&#39;childPanel09&#39;</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">childPanel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;yes. child exists&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>find</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">childPanel</span> <span class="o">=</span> <span class="nx">Ext</span><span class="p">.</span><span class="nx">getCmp</span><span class="p">(</span><span class="s1">&#39;parentPanel&#39;</span><span class="p">).</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">,</span> <span class="s1">&#39;childPanel09&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span> <span class="c1">// [0] because find returns array</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">childPanel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;yes. child exists&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>findBy</p>

<p>  使用方式同 findParentBy</p></li>
<li><p>findByType</p>

<p>  使用方式同 findParentByType</p></li>
</ul>


<h2>id 與 itemid 的不同</h2>

<p>從官方的 <a href="http://docs.sencha.com/ext-js/3-4/#!/api/Ext.Component-cfg-id">Ext.Component-cfg-id</a> 以及 <a href="http://docs.sencha.com/ext-js/3-4/#!/api/Ext.Component-cfg-itemId">Ext.Component-cfg-itemId</a> 的說明可以看到文件內容記載，為了避免翻譯上的落差，使用中英文對照：</p>

<h3>id</h3>

<p>節錄比較重要的部分，全文請參考官方 API</p>

<p>id 是作為 component 的 唯一識別，如果沒有設置 id 將會自動產生 id。</p>

<blockquote><p>The unique id of this component (defaults to an auto-assigned id).</p></blockquote>

<p>必須注意的是 id 會作為 html 中 element 的 id，一旦該物件已經被 rendered。</p>

<blockquote><p>Note that this id will also be used as the element id for the containing HTML element that is rendered to the page for this component.</p></blockquote>

<p>如果你有需要改變 component 的 css 就可以透過 id 來進行操作，如果也需要改變 component 底下的 子元件也必須使用 id 來操作。</p>

<blockquote><p>This allows you to write id-based CSS rules to style the specific instance of this component uniquely, and also to select sub-elements using this component&#8217;s id as the parent.</p></blockquote>

<p>官方文件說明的很清楚，我就不再補述了。接著我們在來看 itemid 的說明。</p>

<h3>itemid</h3>

<p>itemid 可以作為參照 component 的替代方案</p>

<blockquote><p>An itemId can be used as an alternative way to get a reference to a component when no object reference is available.</p></blockquote>

<p>其中：</p>

<ul>
<li>id 可用於 Ext.getCmp</li>
<li>itemid 用於 Ext.Container.getComponent</li>
</ul>


<p>區別兩者不同，並且善用能夠取得設定該 config 相關的元件</p>

<blockquote><p>Instead of using an id with Ext.getCmp, use itemId with Ext.Container.getComponent which will retrieve itemId&#8217;s or id&#8217;s.</p></blockquote>

<p>一旦 itemid 設置於 container 底下的任何物件 (MixedCollection)，則 itemId 他的範圍 (Scope) 將只限於 container 並且是區域性的。</p>

<blockquote><p>Since itemId&#8217;s are an index to the container&#8217;s internal MixedCollection, the itemId is scoped locally to the container</p></blockquote>

<p>最後為了避免淺在衝突，若是使用 Ext.ComponentMgr 必須要有唯一的 id 可進行識別</p>

<blockquote><p>avoiding potential conflicts with Ext.ComponentMgr which requires a unique id.</p></blockquote>

<p>從上面的敘述中可以看出一些使用上需注意的地方</p>

<ol>
<li>若你要取得相關的 Component 若是屬於 container 請設置 id</li>
<li>若是只屬於某個 container 底下的元件，請設置 itemId；某些情況下當然你也可以連同 id 一起設置，比如需要改變 css style，除此之外 itmeid 還是優先的選擇</li>
<li>getCmp 以及 getComponent 是不一樣的，使用上必須注意，必須搭配 id 以及 itemid 使用</li>
</ol>


<p>如此一來 id 與 itemid 就會有從屬關係，非必要不需定義 id，也不會造成在定義 id 時需要編碼避免重覆，而因為 itemid 是屬於某個 id 底下的，所以即使 itemid 重覆，也可以利用唯一的 id 利用 Ext.getCmp 取得參照後，在接著使用 getComponent 取得所屬 itemId 的參照。</p>

<p>實際的使用參考官方範例：</p>

<pre><code>var c = new Ext.Panel({ //
    height: 300,
    renderTo: document.body,
    layout: 'auto',
    items: [
        {
            itemId: 'p1',
            title: 'Panel 1',
            height: 150
        },
       {
        itemId: 'p2',
            title: 'Panel 2',
            height: 150
        }
    ]
})
p1 = c.getComponent('p1'); // not the same as Ext.getCmp()
p2 = p1.ownerCt.getComponent('p2'); // reference via a sibling
</code></pre>

<p>除了上述 id 以及 itemid 可用於索引元件取得參照之外，我們還可以使用以下方法</p>

<h2>ref (extjs 3.x)</h2>

<p>如果你所使用的 extjs 版本為 3.x，利用 ref 可以更加方便得取得 container 底下的 Component，連 getComponent 都可以免了。</p>

<p>參考官方文件 <a href="http://docs.sencha.com/ext-js/3-4/#!/api/Ext.Component-cfg-ref">Ext.Component-cfg-ref</a></p>

<p>ref 是使用路徑的語法，該路徑相關於 Component 的 ownerCt，ownerCt 所參照的是該物件的所屬的 Container 也就是他的上層父元件</p>

<blockquote><p>A path specification, relative to the Component&#8217;s ownerCt specifying into which ancestor Container to place a named reference to this Component.</p></blockquote>

<p>從上面的敘述有個概念後，來看實例會更清楚 ref 的作用，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>    <span class="c1">// 自定義數一個元件，繼承於 Ext.form.FormPanel</span>
</span><span class='line'>    <span class="nx">MyComponent</span> <span class="o">=</span> <span class="nx">Ext</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">Ext</span><span class="p">.</span><span class="nx">form</span><span class="p">.</span><span class="nx">FormPanel</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">frame</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">initComponent</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// 這個元件擁有兩個欄位，以及兩個 button</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">config</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">items</span><span class="o">:</span> <span class="p">[{</span>
</span><span class='line'>                            <span class="nx">xtype</span><span class="o">:</span> <span class="s1">&#39;textfield&#39;</span><span class="p">,</span>
</span><span class='line'>                            <span class="nx">fieldLabel</span><span class="o">:</span> <span class="s1">&#39;Name&#39;</span>
</span><span class='line'>                        <span class="p">},</span> <span class="p">{</span>
</span><span class='line'>                            <span class="nx">xtype</span><span class="o">:</span> <span class="s1">&#39;textfield&#39;</span><span class="p">,</span>
</span><span class='line'>                            <span class="nx">fieldLabel</span><span class="o">:</span> <span class="s1">&#39;Address&#39;</span>
</span><span class='line'>                        <span class="p">}],</span>
</span><span class='line'>                <span class="cm">/* </span>
</span><span class='line'><span class="cm">                * 對於 bbar 裡的 button 使用 ref</span>
</span><span class='line'><span class="cm">                * 在這層結構上為 panel &gt; toolbar &gt; button</span>
</span><span class='line'><span class="cm">                * 為了改變為 panel &gt; button</span>
</span><span class='line'><span class="cm">                * 所以以 button 的 ownerCt 為 root 也就是 toolbar 的情況下</span>
</span><span class='line'><span class="cm">                * 在往上一層就如同上述的結構透過 ../ 將層級提昇</span>
</span><span class='line'><span class="cm">                */</span>
</span><span class='line'>                <span class="nx">bbar</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;-&gt;&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>                            <span class="nx">text</span><span class="o">:</span> <span class="s1">&#39;Cancel&#39;</span><span class="p">,</span>
</span><span class='line'>                            <span class="nx">minWidth</span><span class="o">:</span> <span class="mi">100</span><span class="p">,</span>
</span><span class='line'>                            <span class="nx">ref</span><span class="o">:</span> <span class="s1">&#39;../cancelButton&#39;</span>
</span><span class='line'>                        <span class="p">},</span> <span class="p">{</span>
</span><span class='line'>                            <span class="nx">text</span><span class="o">:</span> <span class="s1">&#39;Save&#39;</span><span class="p">,</span>
</span><span class='line'>                            <span class="nx">minWidth</span><span class="o">:</span> <span class="mi">100</span><span class="p">,</span>
</span><span class='line'>                            <span class="nx">ref</span><span class="o">:</span> <span class="s1">&#39;../saveButton&#39;</span>
</span><span class='line'>                        <span class="p">}]</span>
</span><span class='line'>            <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">//將 initComponent 裡設置好的初始 config 與 initialConfig 合併作為初始的元件</span>
</span><span class='line'>            <span class="nx">Ext</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">Ext</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">initialConfig</span><span class="p">,</span> <span class="nx">config</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">//執行 superclass.initComponent 並且指定自定義好的元件作為 this </span>
</span><span class='line'>            <span class="nx">MyComponent</span><span class="p">.</span><span class="nx">superclass</span><span class="p">.</span><span class="nx">initComponent</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//對新元件註冊 xtype 透過 Ext.reg</span>
</span><span class='line'>    <span class="nx">Ext</span><span class="p">.</span><span class="nx">reg</span><span class="p">(</span><span class="s1">&#39;my_component_xtype&#39;</span><span class="p">,</span> <span class="nx">MyComponent</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Create a display a window with the panel in it...</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">w</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Ext</span><span class="p">.</span><span class="nx">Window</span><span class="p">({</span>
</span><span class='line'>                <span class="nx">modal</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">items</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                    <span class="c1">// 一旦 my_component_xtype 也就是 MyComponent</span>
</span><span class='line'>                    <span class="c1">// 被實體化後就會有兩個欄位與兩個 button</span>
</span><span class='line'>                    <span class="nx">xtype</span><span class="o">:</span> <span class="s1">&#39;my_component_xtype&#39;</span><span class="p">,</span>
</span><span class='line'>                    <span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;Panel 1&#39;</span><span class="p">,</span>
</span><span class='line'>                    <span class="c1">// 在這邊的階層為 window &gt; panel</span>
</span><span class='line'>                    <span class="nx">ref</span><span class="o">:</span> <span class="s1">&#39;theFormPanel&#39;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>    <span class="nx">w</span><span class="p">.</span><span class="nx">show</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// See how we can use the references...</span>
</span><span class='line'>    <span class="c1">// 因為在 MyComponent 改變了 ref 往上一層跳過 toolbar</span>
</span><span class='line'>    <span class="c1">// 所以我們就可以如以下操作該物件</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">w</span><span class="p">.</span><span class="nx">theFormPanel</span><span class="p">.</span><span class="nx">saveButton</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Save was clicked&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="p">},</span> <span class="k">this</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>詳細註解與說明都在上面程式的註解裡，這邊就不多做說明，可以看到透過 ref 的使用，我們可以更加方變得操作 extjs 裡的元件。除了 id 以及 itemid 之外也多了一個可以更方便敘述物件關係的方式。</p>

<p>在這篇文章寫好之前，上面的差異我從來都不知道，也這樣用了好幾年… 說來慚愧，使用一個新的語言或框架基礎還是很重要的。</p>

<p>另外 ref 在 extjs 3.x 還存在，但在 extjs 4.x 已拿掉此屬性，不過別擔心，官方有給我們更好的物件選擇方式，up，down，以及 ComponentQuery</p>

<h2>up，down，以及 ComponentQuery</h2>

<p>使用 ComponentQuery，妳可以利用類似 jquery 的語法來進行查詢 extjs 元件，舉例來看，假設我們有個元件宣告如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Ext</span><span class="p">.</span><span class="nx">define</span><span class="p">(</span><span class="s1">&#39;MyApp.view.MyViewport&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">extend</span><span class="o">:</span> <span class="s1">&#39;Ext.container.Viewport&#39;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">id</span><span class="o">:</span> <span class="s1">&#39;mainvp&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">layout</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">align</span><span class="o">:</span> <span class="s1">&#39;stretch&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;vbox&#39;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">initComponent</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">me</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">Ext</span><span class="p">.</span><span class="nx">applyIf</span><span class="p">(</span><span class="nx">me</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">items</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="nx">xtype</span><span class="o">:</span> <span class="s1">&#39;gridpanel&#39;</span><span class="p">,</span>
</span><span class='line'>                    <span class="nx">flex</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>                    <span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;My Grid Panel&#39;</span><span class="p">,</span>
</span><span class='line'>                    <span class="nx">store</span><span class="o">:</span> <span class="s1">&#39;MyArrayStore&#39;</span><span class="p">,</span>
</span><span class='line'>                    <span class="nx">dockedItems</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>                        <span class="p">{</span>
</span><span class='line'>                            <span class="nx">xtype</span><span class="o">:</span> <span class="s1">&#39;toolbar&#39;</span><span class="p">,</span>
</span><span class='line'>                            <span class="nx">dock</span><span class="o">:</span> <span class="s1">&#39;top&#39;</span><span class="p">,</span>
</span><span class='line'>                            <span class="nx">items</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>                                <span class="p">{</span>
</span><span class='line'>                                    <span class="nx">xtype</span><span class="o">:</span> <span class="s1">&#39;button&#39;</span><span class="p">,</span>
</span><span class='line'>                                    <span class="nx">text</span><span class="o">:</span> <span class="s1">&#39;remove&#39;</span>
</span><span class='line'>                                <span class="p">},</span>
</span><span class='line'>                                <span class="p">{</span>
</span><span class='line'>                                    <span class="nx">xtype</span><span class="o">:</span> <span class="s1">&#39;button&#39;</span><span class="p">,</span>
</span><span class='line'>                                    <span class="nx">text</span><span class="o">:</span> <span class="s1">&#39;add&#39;</span>
</span><span class='line'>                                <span class="p">}</span>
</span><span class='line'>                            <span class="p">]</span>
</span><span class='line'>                        <span class="p">}</span>
</span><span class='line'>                    <span class="p">],</span>
</span><span class='line'>
</span><span class='line'>                    <span class="nx">columns</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>                        <span class="p">{</span>
</span><span class='line'>                            <span class="nx">xtype</span><span class="o">:</span> <span class="s1">&#39;gridcolumn&#39;</span><span class="p">,</span>
</span><span class='line'>                            <span class="nx">dataIndex</span><span class="o">:</span> <span class="s1">&#39;id&#39;</span><span class="p">,</span>
</span><span class='line'>                            <span class="nx">text</span><span class="o">:</span> <span class="s1">&#39;Id&#39;</span><span class="p">,</span>
</span><span class='line'>                            <span class="nx">editor</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                                <span class="nx">xtype</span><span class="o">:</span> <span class="s1">&#39;textfield&#39;</span>
</span><span class='line'>                            <span class="p">}</span>
</span><span class='line'>                        <span class="p">},</span>
</span><span class='line'>                        <span class="p">...</span>
</span><span class='line'>                    <span class="p">],</span>
</span><span class='line'>                    <span class="nx">listeners</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                        <span class="nx">select</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                            <span class="nx">fn</span><span class="o">:</span> <span class="nx">me</span><span class="p">.</span><span class="nx">onGridpanelSelect</span><span class="p">,</span>
</span><span class='line'>                            <span class="nx">scope</span><span class="o">:</span> <span class="nx">me</span>
</span><span class='line'>                        <span class="p">}</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">},</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="nx">xtype</span><span class="o">:</span> <span class="s1">&#39;form&#39;</span><span class="p">,</span>
</span><span class='line'>                    <span class="nx">flex</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>                    <span class="nx">itemId</span><span class="o">:</span> <span class="s1">&#39;form1&#39;</span><span class="p">,</span>
</span><span class='line'>                    <span class="nx">bodyPadding</span><span class="o">:</span> <span class="mi">10</span><span class="p">,</span>
</span><span class='line'>                    <span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;form1&#39;</span><span class="p">,</span>
</span><span class='line'>                    <span class="nx">items</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>                        <span class="p">{</span>
</span><span class='line'>                            <span class="nx">xtype</span><span class="o">:</span> <span class="s1">&#39;textfield&#39;</span><span class="p">,</span>
</span><span class='line'>                            <span class="nx">anchor</span><span class="o">:</span> <span class="s1">&#39;100%&#39;</span><span class="p">,</span>
</span><span class='line'>                            <span class="nx">fieldLabel</span><span class="o">:</span> <span class="s1">&#39;id&#39;</span><span class="p">,</span>
</span><span class='line'>                            <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;id&#39;</span>
</span><span class='line'>                        <span class="p">},</span>
</span><span class='line'>                        <span class="p">{</span>
</span><span class='line'>                            <span class="nx">xtype</span><span class="o">:</span> <span class="s1">&#39;textfield&#39;</span><span class="p">,</span>
</span><span class='line'>                            <span class="nx">anchor</span><span class="o">:</span> <span class="s1">&#39;100%&#39;</span><span class="p">,</span>
</span><span class='line'>                            <span class="nx">fieldLabel</span><span class="o">:</span> <span class="s1">&#39;name&#39;</span><span class="p">,</span>
</span><span class='line'>                            <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;name&#39;</span>
</span><span class='line'>                        <span class="p">}</span>
</span><span class='line'>                    <span class="p">]</span>
</span><span class='line'>                <span class="p">},</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="nx">xtype</span><span class="o">:</span> <span class="s1">&#39;form&#39;</span><span class="p">,</span>
</span><span class='line'>                    <span class="nx">flex</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>                    <span class="nx">itemId</span><span class="o">:</span> <span class="s1">&#39;form2&#39;</span><span class="p">,</span>
</span><span class='line'>                    <span class="nx">bodyPadding</span><span class="o">:</span> <span class="mi">10</span><span class="p">,</span>
</span><span class='line'>                    <span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;form2&#39;</span><span class="p">,</span>
</span><span class='line'>                    <span class="nx">items</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>                        <span class="p">{</span>
</span><span class='line'>                            <span class="nx">xtype</span><span class="o">:</span> <span class="s1">&#39;textfield&#39;</span><span class="p">,</span>
</span><span class='line'>                            <span class="nx">anchor</span><span class="o">:</span> <span class="s1">&#39;100%&#39;</span><span class="p">,</span>
</span><span class='line'>                            <span class="nx">fieldLabel</span><span class="o">:</span> <span class="s1">&#39;title&#39;</span><span class="p">,</span>
</span><span class='line'>                            <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;title&#39;</span>
</span><span class='line'>                        <span class="p">}</span>
</span><span class='line'>                    <span class="p">]</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">]</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">me</span><span class="p">.</span><span class="nx">callParent</span><span class="p">(</span><span class="nx">arguments</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>呈現畫面如下：</p>

<p><img src="https://lh4.googleusercontent.com/-GK2_yMQlCVM/UYi_vpyUXEI/AAAAAAAALpw/KpxVYWZNrwU/w603-h540-no/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7+2013-05-07+%25E4%25B8%258B%25E5%258D%25884.47.25.jpg" alt="image" /></p>

<p>這樣的例子中，可以看到，在底下有兩個 panel，如果我們要操作第二個 form，在上面的程式碼中我們將其 itemid 設為 form2，如此一來我們可以利用下列程式來取得參照</p>

<p><code>Ext.ComponentQuery.query('panel[itemId=form1]');</code></p>

<p>當然除了 itemid，只要是屬於該物件的屬性皆可以拿來進行查詢，比如說我們自定一個屬性為 <code>cls:form2-cls</code>，那我們就可以依樣畫葫蘆：</p>

<p><code>Ext.ComponentQuery.query('panel[cls=form2-cls]');</code></p>

<p>就是如此方便！除了 Ext.ComponentQuery.query 另外還有提供兩個好用的方法 <code>up()</code>，<code>down()</code>，同樣以上面為例子，來進行 remove 的實作，一旦點選 remove 按鈕時要將在 grid 中選中的 record 移除，程式碼如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nx">xtype</span><span class="o">:</span> <span class="s1">&#39;button&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">handler</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">button</span><span class="p">,</span> <span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">grid</span> <span class="o">=</span> <span class="nx">button</span><span class="p">.</span><span class="nx">up</span><span class="p">().</span><span class="nx">up</span><span class="p">();</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">sm</span> <span class="o">=</span> <span class="nx">grid</span><span class="p">.</span><span class="nx">getSelectionModel</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">button</span><span class="p">.</span><span class="nx">up</span><span class="p">().</span><span class="nx">up</span><span class="p">().</span><span class="nx">store</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="nx">sm</span><span class="p">.</span><span class="nx">getSelection</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">button</span><span class="p">.</span><span class="nx">up</span><span class="p">().</span><span class="nx">up</span><span class="p">().</span><span class="nx">store</span><span class="p">.</span><span class="nx">getCount</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">sm</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">text</span><span class="o">:</span> <span class="s1">&#39;remove&#39;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>文章中有提到 extjs 會記住使用到的各個 Component 以及之間的關係，因此一旦能夠存取到事件發動的物件妳就可以從該物件找到互動的物件，參考範例的介面，元件結構上為 grid > toolbar > button，因此一旦我點選了 button 我要找到 grid 只要往上兩層 <code>button.up().up()</code> 即可，<code>down()</code> 的部份同理。</p>

<p>除了單純的使用之外，還可以搭配 ComponentQuery 語法使用，假設妳目前已可以存取 grid，要取得 button 的參照，妳可以這樣做：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">grid</span><span class="p">.</span><span class="nx">down</span><span class="p">(</span><span class="s2">&quot;button[itemId=updateBtn]&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>即使層級上不只一層，透過妳下的條件，extjs 會找出符合條件最接近的物件，如此一來妳就可以輕鬆遊走各個元件之間了！</p>
<p><a rel="bookmark" href="http://smlsun.com/blog/2013/02/19/extjs-component/"></a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[extjs: grid 中的欄位使用 templete 並且能夠呼叫 rowIndex 以及 colIndex 屬性]]></title>
<link href="http://smlsun.com/blog/2013/02/18/extjs-grid-column-use-templete-get-rowindex-and-colindex/"/>
<updated>2013-02-18T19:12:00+08:00</updated>
<id>http://smlsun.com/blog/2013/02/18/extjs-grid-column-use-templete-get-rowindex-and-colindex</id>

      <content type="html"><![CDATA[<p>在 grid 中的 column 使用 templete 除了顯示自定的欄位內容外，有些時候我們希望可以存取資料行的索引，如此一來才可以對資料內容進行相對定的事件處理並且能夠正確操作相關的物件。</p>

<p>但是原生的 templete 並沒有對應的 rowIndex 或者事件定義可以讓我們存取，所以我們必須轉個彎來達到這目的，有兩個方式 &#8230;</p>

<h2>透過對 Ext.grid.TemplateColumn 進行繼承改寫</h2>

<p>開始說明作法之前需先了解在 extjs 中 Ext.grid.TemplateColumn 的運作方式，原始碼如下：</p>

<pre><code>Ext.grid.TemplateColumn = Ext.extend(Ext.grid.Column, {

    constructor: function(cfg){
        Ext.grid.TemplateColumn.superclass.constructor.call(this, cfg);
        var tpl = (!Ext.isPrimitive(this.tpl) &amp;&amp; this.tpl.compile) ? this.tpl : new Ext.XTemplate(this.tpl);
        this.renderer = function(value, p, r){
            return tpl.apply(r.data);
        };
        this.tpl = tpl;
    }
});
</code></pre>

<p>其中</p>

<pre><code>this.renderer = function(value, p, r){
    return tpl.apply(r.data);
};
</code></pre>

<p>可以看到其實他的實作方式就是利用 <a href="http://docs.sencha.com/ext-js/3-4/#!/api/Ext.grid.Column">Ext.grid.Column 中的 renderer</a> config 來自動呼叫 tpl.apply，其實在官方文件中 renderer 還有後面的參數可以使用，分別是 rowIndex，colIndex，store，完整可以參考 API。</p>

<p>既然原生的 renderer 就有 rowIndex，colIndex 我們只要 extent Ext.grid.TemplateColumn 並且改寫 renderer 令 templete 新增參數即可，所以我們可以這樣做：</p>

<pre><code>Ext.grid.CusTemplateColumn = Ext.extend(Ext.grid.TemplateColumn, {
constructor: function(cfg){
    Ext.grid.TemplateColumn.superclass.constructor.call(this, cfg);
        var tpl = (!Ext.isPrimitive(this.tpl) &amp;&amp; this.tpl.compile) ? this.tpl : new Ext.XTemplate(this.tpl);    

    this.renderer = function(value, p, r, rowIndex, colIndex){

            //第一種方法 
            var newData=Ext.apply({rowIndex: rowIndex, colIndex: colIndex}, r.data);
            return tpl.apply(newData);

            //第二種方法
            //r.data.rowIndex = rowIndex;
            //r.data.colIndex = colIndex;
            //return tpl.apply(r.data);

            //未修改前
            //return tpl.apply(r.data);
        };

        this.tpl = tpl;
}
});
</code></pre>

<p>在上面程式碼中， Ext.apply 所做的就是將目前的物件與傳進來的物件屬性進行合併，如 API 中的敘述</p>

<blockquote><p>Copies all the properties of config to obj. apply</p></blockquote>

<p>其中，tpl 所使用的 tpl.apply 與 Ext.apply 是不一樣的，他是 applyTemplate 的別名</p>

<blockquote><p>Alias for applyTemplate Returns an HTML fragment of this template with the specified values applied.</p></blockquote>

<p>最主要的概念就是針對 tpl.apply 參數所需傳入的物件加上 rowIndex，colIndex 就可以令 temlete 中 html可以存取該屬性，如此一來一旦 grid 有分頁的狀況或者改變排序，在 templete 中的 rowindex 也會隨著改變。</p>

<p>實際上範例的運作如下：</p>

<iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/smlsun/TfnRS/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p>接著我們就可以將其應用於 grid 的欄位建立：</p>

<pre><code>var template = new Ext.XTemplate('&lt;input type="checkbox" name="check{rowIndex}" id="checkbox" value="{title}"/&gt;');

var myColumn==new Ext.grid.CusTemplateColumn({ 
    ...
tpl:template     
});

var grid = new Ext.grid.GridPanel({
    ...
columns: [
    { id: 'title-col', header: "Title", width: 225, dataIndex: 'title' },
    myColumn     
],
});
</code></pre>

<p>一旦 grid render 時就會觸動在剛剛所實作的 renderer，在 templete 中的 {rowIndex} 也會正確取得對應的值。</p>

<p>有了上面的概念，其實換個方法可以不用 extent TemplateColumn 也可以做到相同效果 &#8230;</p>

<h2>透過 grid 欄位之 renderer</h2>

<p>我們可以在 renderer 中直接使用定義好的 template 如下面程式碼：</p>

<pre><code>var myColumn={ 
    ...
    renderer : function(value, p, r, rowIndex, colIndex){
        r.data.rowIndex = rowIndex;
        r.data.colIndex = colIndex;
        return template.apply(r.data);
    }
}

var grid = new Ext.grid.GridPanel({
    ...
columns: [
    { id: 'title-col', header: "Title", width: 225, dataIndex: 'title' },
    myColumn     
],
});
</code></pre>

<p>效果是一樣的，可以更直接做到相同的效果，實際上範例的運作如下：</p>

<iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/smlsun/A2eUb/2/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<h2>實際在使用上該選擇哪種方式？</h2>

<p>方法有很多種，只要能夠達到目的都是可用的方法，但總是有較適合的，一個簡單的判斷方式：如果有很多地方需要用到 extend 的 template 那建議用第一個方法，只要寫一次任何時候需要用到只要引入該客製元件即可，一旦往後有需要在對該元件進行修改調整，只要修正一個地方即可；但如果只有一處用會用到那就用第二種方法，避免過度設計，對於資源載入更加精簡。</p>
<p><a rel="bookmark" href="http://smlsun.com/blog/2013/02/18/extjs-grid-column-use-templete-get-rowindex-and-colindex/"></a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[extjs: DOM、Element 以及 Component 的差別]]></title>
<link href="http://smlsun.com/blog/2013/02/18/extjs-dom-element-component/"/>
<updated>2013-02-18T12:32:00+08:00</updated>
<id>http://smlsun.com/blog/2013/02/18/extjs-dom-element-component</id>

      <content type="html"><![CDATA[<p>資料來源：</p>

<ul>
<li><a href="http://hi.baidu.com/andriond/item/757d24dcb1b8f139e3108f8a">理解Html DOM、Ext Element及Component</a></li>
</ul>


<p>學習及應用 extjs，需要理解 Html DOM、Ext Element及Component 三者的區別。extjs 是 Wed 前端框架，基於標準 W3C 構建設的，使用到的都是HTML、CSS、DIV 等相關技術。無論元件有多少屬性、還是事件、方法等，其最終都會轉化為 HTML 在瀏覽器上顯示出來，而每一個 HTML 頁面都有 DOM，瀏覽器中的所有內容都有相應的 DOM，動態改變頁面的內容正是透過 javascript 來操作 DOM 進行實現。</p>

<p>而在 extjs 中就有個專門用來處理 DOM 的類別 &#8230;</p>

<h2>Ext.DomHelper</h2>

<p>DOM其實就是 W3C 標準定義的原始 API，在 extjs 中對 dom 進行強化，製作了 <a href="http://docs.sencha.com/ext-js/3-4/#!/api/Ext.DomHelper">Ext.DomHelper</a></p>

<p>在官方 API 中可以看到該類別屬於 singleton，所謂的 singleton 就是所謂的整個程式在運行時只有一份，且不需宣告即已被實體化，官方文件中的範例：</p>

<pre><code>var dh = Ext.DomHelper; // create shorthand alias
// specification object
var spec = {
    id: 'my-ul',
    tag: 'ul',
    cls: 'my-list',
    // append children after creating
    children: [     // may also specify 'cn' instead of 'children'
        {tag: 'li', id: 'item0', html: 'List Item 0'},
        {tag: 'li', id: 'item1', html: 'List Item 1'},
        {tag: 'li', id: 'item2', html: 'List Item 2'}
    ]
};
var list = dh.append(
    'my-div', // the context element 'my-div' can either be the id or the actual node
    spec      // the specification object
);
</code></pre>

<p>可以看到 <code>var dh = Ext.DomHelper;</code> 並未透過 new 來進行建立實體，而在 Ext.DomHelper 特別針對了原生 javascript 的 Insertion methods 進行封裝，如下：</p>

<ul>
<li>append</li>
<li>insertBefore</li>
<li>insertAfter</li>
<li>overwrite</li>
<li>createTemplate</li>
<li>insertHtml</li>
</ul>


<p>當然 extjs 不只是單純的進行封裝那麼簡單，他還避免了一些在效能上容易造成問題的地方，比如說在我另一篇文章<a href="http://smlsun.com/blog/2013/02/01/javascript-performance/">Javascript: Performance &amp; Tip</a> 有提到的 『9. DOM』 使用 DocumentFragment 避免 ReFlow 的問題，在 extjs 中已採用此作法，可以從原始碼<a href="http://docs.sencha.com/ext-js/3-4/source/DomHelper-more.html#Ext-DomHelper">DomHelper-more</a> 中的 <code>createDom</code> 看到 <code>el = doc.createDocumentFragment();</code> 使用了 DocumentFragment。</p>

<p>而DOM是W3C標準定義的原始API，如果我們要取得 dom 可以透過 <a href="http://docs.sencha.com/ext-js/3-4/#!/api/Ext-method-getDom">Ext.getDom(el)</a>，除了用 dom id 來索引之外，也可以傳入 Element，如：</p>

<pre><code>// gets dom node based on id
var elDom = Ext.getDom('elId');
// gets dom node based on the dom node
var elDom1 = Ext.getDom(elDom);

// If we don't know if we are working with an
// Ext.Element or a dom node use Ext.getDom
function(el){
    var dom = Ext.getDom(el);
    // do something with the dom node
}
</code></pre>

<p>接著來看在 extjs 對 DOM 進行封裝後的物件帶來什麼樣的功能 &#8230;</p>

<h2>Ext.Element</h2>

<p>Ext.Element 是Ext的底層API，主要是由Ext或自定義組件來進行呼叫。並且將 DOM 進行封裝，使用方式如下：</p>

<pre><code>// by id
var el = Ext.get("my-div");

// by DOM element reference
var el = Ext.get(myDivElement);
</code></pre>

<p>可以看到只要透過 <a href="http://docs.sencha.com/ext-js/3-4/#!/api/Ext-method-getDom">Ext.get</a> 取得的物件，將會作為 Ext.Element 回傳。</p>

<p>透過 extjs 將 DOM 封裝為 Ext.Element，通過其操作 DOM 來實現頁面的效果顯示，可以方便做到若要把頁面中的某一個節點移到其它位置，要給某一個節點添加陰影效果，要隱藏或顯示某一個節點等，可以很輕易的執行相關的動畫特效，主要是因為在 Ext.Element 中包含了專門處理特效的類別：<a href="http://docs.sencha.com/ext-js/3-4/#!/api/Ext.Fx">Ext.Fx</a>，而以往都需要通過幾句 javascript 才能完成。舉例來說，下面這段取得 DOM 的語法：</p>

<pre><code>var el = Ext.get("my-div");

// no animation
el.setWidth(100);
</code></pre>

<p>只是單純的將寬度設為 100 ，若要有類似特效的效果，很簡單：</p>

<pre><code>// default animation
el.setWidth(100, true);
</code></pre>

<p>修改為上面的程式碼即可，詳細可參照 <a href="http://docs.sencha.com/ext-js/3-4/#!/api/Ext.Element">API-Ext.Element</a></p>

<p>因此，Ext 在 DOM 的基礎上創建了 Ext.Element，可以使用 Element 來包裝任何 DOM；Element 類別中添加了一系列快捷、簡便的實用方法。其中對於事件上的使用，不像 Component 中的事件是屬於 Ext events，在 Element 中的事件是屬於 browser events，在 extjs 官方 api 中有提到：</p>

<blockquote><p>Note that the events documented in this class are not Ext events, they encapsulate browser events.</p></blockquote>

<p>其中因為是屬於原生的 browser events 所以不是所有的事件在較舊的 browser 中都有支援，不過如果是屬於 Ext events 的範圍則都有支援。如官方所言：</p>

<blockquote><p>Some older browsers may not support the full range of events. Which events are supported is beyond the control of ExtJs.</p></blockquote>

<p>extjs 實作了 Element 來對原生的 dom 操作進行了強化，並且透過 Element 的使用可以不必擔心跨瀏覽器的相容性，解決前端令人困擾的問題，但對於終端用戶來說，僅僅有Element是不夠的，也因此 extjs 最強大的部份就是 &#8230;</p>

<h2>Ext.Component</h2>

<p>假設我們需要在開發時要顯示一個表格、樹狀結構或者彈出一個視窗等，為了方便建立相關的元件，除了 Element 以外，Extjs 還建立了一系列的前端顯示元件 Component，我們在撰寫程式時，只要使用這些組件 Componet 即可實現相關數據展示及交互等，而 Component 是較高層次的抽象，每一個組件在渲染 render 的時候，都會依次通過 Element、DOM 來生成最終的頁面效果。</p>

<p>在Ext中，組件 render 以後可以通過存取 Component 的 properties <a href="http://docs.sencha.com/ext-js/3-4/#!/api/Ext.Component-property-el">api-el</a> 屬性來得到 Component 對應的 Element ，通過存取 Element 的 dom 屬性可以得到其下面的 DOM。</p>

<p>其中如果要取得某元件可以透過 Ext.getCmp 來得到，相關詳細說明可參考我的另一篇文章：<a href="http://smlsun.com/blog/2013/02/05/extjs-component/">Extjs: Component 的使用，找尋 Parent &amp; Child</a></p>

<p>而下面範例說明實際上的使用狀況：</p>

<pre><code>var view=new Ext.Viewport();                
//建立了一個組件 Component 
view.el.setOpacity(.5);                     
//呼叫 Element 的 setOpacity 方法
view.el.dom.innerHTML="Hello Ext";  //透過 Element 的 dom 屬性操作 DOM
</code></pre>

<p>以及如何分別取得 dom、element 以及 component</p>

<pre><code>var win=new Ext.Window({id:"win1",title:"my window",width:200,height:200}); 
win .show(); 
var c=Ext.getCmp("win1");           //得到 win 
var e=Ext.get("win1");              //根據 id 得到 win 相應的 Element 
var dom=Ext .getDom("win1");        //得到 id 為 win1 的 DOM 節點
</code></pre>

<p>若要進一步了解 extjs 的 Class Diagram 可參考下列網址：<a href="http://d.hatena.ne.jp/Tommy1/searchdiary?word=%2A%5BExtJS%5D">Ext JS 3.0 - Class Diagram</a></p>

<h2>深入 extjs</h2>

<p>如果要想深入應用 Ext，那麼閱讀Ext項目的原始碼是必要的，該原始碼非常值的學習，一些 js 技巧，以及應該要避免的 js 陷阱都有考慮到，透過閱讀原始碼可以更加深刻的了解 javascript 的程式開發，其包含了很多精巧的 js 開發與設計模式。在使用Ext的過程中，需要 extend extjs 的元件作為自定義的元件時，如何實作有時就要從原始碼找答案。</p>

<p>當然 Ext 的原始碼是很龐大的，並不需要從頭開始看，建議可以從元件 Component.js、容器 Container.js 以及 Panel.js；而核心中的 Element.js 以及 Ext.js 等也是蠻重要的。</p>
<p><a rel="bookmark" href="http://smlsun.com/blog/2013/02/18/extjs-dom-element-component/"></a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[javascript: Memory Leaks 的情況以及如何解決與偵測]]></title>
<link href="http://smlsun.com/blog/2013/02/17/javascript-memory-leaks/"/>
<updated>2013-02-17T13:40:00+08:00</updated>
<id>http://smlsun.com/blog/2013/02/17/javascript-memory-leaks</id>

      <content type="html"><![CDATA[<p>文章來源：</p>

<ul>
<li><a href="http://fred-zone.blogspot.tw/2012/05/javascript_22.html">簡單理解 JavaScript 的記憶體管理機制</a></li>
<li><a href="http://www.ppzhang.com/?p=8">配合GC，JavaScript性能優化之：邪惡閉包，對象引用清除深入探究</a></li>
</ul>


<p>若要知曉如何避免 Memory Leaks 就要先了解 &#8230;</p>

<h2>JavaScript 的記憶體管理機制</h2>

<p>不像其他的語言，JavaScript 開發者永遠沒有辦法自己去釋放記憶體，頂多只能移除物件的 Reference （代表這物件已經沒有人在使用），而且這物件所佔的記憶體並不會馬上被釋放，而是 Garbage Collection 在滿足某些條件的情況下，才在背景自動去尋找沒有被使用的物件，然後釋放。若你嘗試過尋找釋放記憶體或移除物件 Reference 的方法，得到的解答，應該不外乎是使用 delete 關鍵字或是將變數設為 null，若在不瞭解的情況下使用它們，可能因此產生 Memory leaks 的狀況。JavaScript 的記憶體管理機制，更準確的說，是物件的管理機制。</p>

<p>從 JavaScript 開發者角度來看，JavaScript Engine 在運作時，記憶體使用是呈現樹狀結構，也就是所有命名或建立的變數或物件，都是存放在一個全域(global)的 Object 中。</p>

<p>我們可以做個實驗理解一下：</p>

<pre><code>var myVar = 'Hello';
function myFunc() {
    return 123;
}
var myObj = {
    a: 1,
    b: 2
};

console.log(global);
</code></pre>

<p>執行以上程式，你應該可以從 global 中找到我們自己定義的變數和函式：</p>

<pre><code>{
    ...（已省略基本預設的環境變數）...
    myVar: 'Hello',
    myFunc: [function],
    myObj: {
        a: 1,
        b: 2
    },
    ...
}
</code></pre>

<p>從結果可以發現，所有的物件都以樹狀的形式被 global Object 保存著，無論是變數還是任何一種類型的物件，都是一組組 Key/Value 的存在。而 Value 就是各種不同形態的物件，如字串、函數、陣列、數值等。</p>

<p>所以，移除某物件的 Reference，就意味著將把物件從這棵樹上拔除掉。因此，我們可以直接將該變數設為 null：</p>

<pre><code>myVar = null;
</code></pre>

<p>由於該變數被設為 null，原本的字串（包含著『Hello』）物件就失去了依附的樹枝，如枯葉般從樹上掉下來，等著 Garbage Collection 來回收它。對於開發者而言，其實就是告訴 GC 我不需要這物件了，隨時可以把這個物件的記憶體釋放。</p>

<p>然而，雖然變數被設為 null 後，原本的物件被釋放了，但該變數還是存在的，別忘了，他是一個在 global Object 中的 Key，現在只是沒有 Value 為 null 而已。要真正把這個變數給刪除，這時就要用到 delete 關鍵字。如果你去查一下 JavaScript 的 API 參考文獻，就會發現 delete 關鍵字其實是拿來刪除 Object 中的一組 Key/Value。因此，既然 JavaScript 所有的變數其實都只是一組存放在 global Object 的 Key/Value，我們理所當然可以用 delete 關鍵字去移除掉他：</p>

<pre><code>delete myVar;
</code></pre>

<p>知曉了 JavaScript 的記憶體管理機制後，你就會了解使用 delete 關鍵字和將變數設為 null，其實並不是代表物件就會被釋放，只是砍樹枝去減少物件的 Reference。</p>

<p>此外，如果一個物件有多個 Reference，只是單單刪其中一個也不會讓物件被 GC 釋放：</p>

<pre><code>var myVar = 'Hello';
var myVar1 = myVar;

myVar = null;
delete myVar;

console.log(myVar1);
</code></pre>

<p>以上的程式會顯示『Hello』字串，該物件並不會因為失去 myVar 這 Reference 而被 GC 移除。若想要這一個字串被釋放，必需清空物件所有的 Reference（包括 myVar 和 myVar1），才能讓物件具有被 GC 回收的條件。所以，如果你不小心讓一個不明顯的變數勾搭上了物件，然後你忘記了這個變數的存在，很有可能就會造成 Memory Leaks，讓以為已經被釋放的物件，偷偷存活在於記憶體上。</p>

<p>其中 Reference 是常見於各種系統的設計，主要做法是幫物件建立一個 Reference 計數器，當有人關聯或使用到他，就會讓這計數器加一，等到關聯被移除或使用完畢後，就會讓計數器減一。所以，一旦計數器為零時，代表現在沒有任何外部的物件在使用或關聯到它，是可以被釋放掉的狀態。</p>

<p>對於記憶體的管理機制了解之後，接著看 &#8230;</p>

<h2>GC 的判定方式</h2>

<p>mark-and-sweep（標記清除）算法，即：</p>

<p>（1）遍歷所有可訪問的對象。</p>

<p>（2）回收已不可訪問的對象。</p>

<p>實際運作上，就如同上一節有講到的，透過檢查計數器是否為 0 來確認是否可以進行 GC</p>

<p>正常來說，如果有確實將全域變數的 Reference 正確清除的話，記憶體應該會被 GC。</p>

<h2>如何避免無法 GC 的情形？</h2>

<ol>
<li>定義變數一定要用 var，否則預設宣告出來的變量都是全域變量，不是區域變數</li>
<li>全域變數沒用時記得要指定為 null，確實將全域變數的 Reference 正確清除</li>
<li>正確使用 delete ，刪除沒用的一些函數屬性；</li>
<li>window.open 出來的視窗即使 close 了，它的 window 對象還是存在的，要記得刪除引用；</li>
<li>frame 和 iframe 的情況和 window.open 的情況類似。</li>
</ol>


<h2>如何透過工具偵測 leaks 情形？</h2>

<p>下面例子是全域變數之 Reference 沒有確實清除的情形：</p>

<pre><code>function Library(name){
    this.name = name;
}
var PIPI = {
    Mapping : [],
    get : function(){
         return PIPI.Mapping[0];
    }
}
var externLib = new Library("0000");
PIPI.Mapping.push(externLib);
(function(){
    var lib = PIPI.get();
    lib = null;
    var lib2 = PIPI.Mapping[0];
    lib2 = null;
})();
</code></pre>

<p>一旦上面得程式碼執行後，可以透過 chrome 的開發者工具中的 Profiles 來觀看變數的使用情形，如下圖：</p>

<p><img src="https://lh5.googleusercontent.com/-1I9sdsmLfxo/USCnHcVdzVI/AAAAAAAALhs/1udovkwXtfE/s604/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-02-17+%E4%B8%8B%E5%8D%885.43.34.jpg" alt="img" /></p>

<p>可以看到，有兩個 library 對象：一個是函數宣告，另外一個才是 <code>new Library("0000")</code>，下面的 Retaining tree 呈現有哪些物件引用了 <code>new Library("0000")</code>，分別是外部變數 externLib 以及 <code>PIPI.Mapping[0]</code> (圖中樹狀從節點往 root)。</p>

<p>透過該工具的協助既然知道了有哪些 Reference 沒有確實清除，要解決此問題就簡單多了只要加入：</p>

<pre><code>PIPI.Mapping[0] = null ;
externLib = null ;
</code></pre>

<p>將 Reference 清除，完成程式碼如下：</p>

<pre><code>function  Library(name){
        this .name = name;
}
var  PIPI = {
    Mapping : [],
    get : function (){
         return  PIPI.Mapping[0];
    }
}
var  externLib = new  Library( "0000" );
PIPI.Mapping.push(externLib);
//此時new Library("0000")對像有2個引用
( function (){
    var  lib = PIPI.get();
    //引用數+1：3
    lib = null ;
    //引用數-1：2
    var  lib2 = PIPI.Mapping[0];
    //引用數+1：3
    lib2 = null ;
    //引用數-1：2
    PIPI.Mapping[0] = null ;
    //引用數-1：1
    externLib = null ;
    //引用數-1：0
})();
</code></pre>

<p>接著我們在用 chrome 的開發者工具檢視，如下圖：</p>

<p><img src="https://lh5.googleusercontent.com/-LMw8XLJlJBM/USCnHEzC08I/AAAAAAAALhk/RAo0i4Yi97k/s604/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-02-17+%E4%B8%8B%E5%8D%885.31.45.jpg" alt="img" /></p>

<p>可以看到原本除了宣告函數存在之外，另一個變數已消失，表示 leaks 的情形已被解決！當然上述的狀況說明的是關於全域變數如果要確實 GC 的方式，關於區域變數，照理來說一旦所屬函數被執行完之後，區域變數應該會馬上被回收，要注意的是如果是有 closure 的情形，如果 closure 未被執行，表示函數尚未完全執行結束，也就代表區域變數無法被正確回收，這點必須特別注意，也因此再次強調使用 closure 要特別小心 leaks 的情形。</p>

<p>另外只要將游標指向你欲查看的變數上面，profiles 將顯示該變數被宣告的程式檔與行號，透過超連結，可以直接開啟，可以方便找出有問題的全域變數位置。</p>

<p>其中針對圖中的欄位解釋如下:</p>

<ul>
<li><p>Shallow Size: 對象自身佔用的內存大小，不包括它引用的對象。</p>

<p>  針對非數組類型的對象，它的大小就是對象與它所有的成員變量大小的總和。當然這裡面還會包括一些語言特性的數據存儲單元。針對數組類型的對象，它的大小是數組元素對象的大小總和。</p></li>
<li><p>Retained Size: 當前對像大小 + 當前對象可直接或間接引用到的對象的大小總和。</p>

<p>  間接引用的含義：A->B->C，B 是直接引用，C 就是間接引用；換句話說，Retained Size 就是當前對像被 GC 後，從 Heap 上總共能釋放掉的內存。</p></li>
</ul>


<blockquote><p>一旦客戶說速度變得異常的慢，記憶體標高時，就是時候分析客戶目前瀏覽器關於記憶體使用的 profile，麻煩使用者改用 chrome 在關鍵時刻，請他將瀏覽網頁 snapshot 起來分析一下囉！</p></blockquote>

<p>所謂的 <strong>不正常</strong> leaks 情形，幾乎只有在 IE 瀏覽器中會出現，以下將詳細說明在 IE 中為什麼會造成 leaks，首先必須先了解在舊版 IE 中 GC 的運作與現在的瀏覽器有什麼不同。</p>

<blockquote><p>如果所開發的產品不考慮 IE 的使用者，那可以直接跳過下面這段，以下所敘述的問題其實也只在舊版的 IE6 以前會有問題，不過&#8230; 基本上世界上還是有不少 IE 的舊版，了解一下並且盡量避免可以活的比較快樂&#8230;</p></blockquote>

<h2>IE 中 Leaks</h2>

<h3>JScript 與 Native Object(om、ActiveX Object) 交互參照，造成 leaks</h3>

<p>在 IE6 中，對於 GC 的判定有兩種情形：</p>

<ol>
<li>javascript object內部：jscript使用的是mark-and-sweep（標記清除）算法</li>
<li>javascript object與外部object：(包括native object和vbscript object等等)的引用時，IE 6使用的是計數器的算法。</li>
</ol>


<p>因為第 2 點的狀況GC算法是計數器，因此只碰到循環 引用就會造成 memory leakage，也就是說 IE6 中 JScript 的 GC 算法使用的是 nongeneration mark-and-sweep。</p>

<p>對於 javascript 對算法的實現缺陷，也就是說，IE 6 對於純粹的 Script Objects 間的 Circular References 是可以正確處理的，可惜它處理不了的是 JScript 與 Native Object (例如Dom、ActiveX Object) 之間的 Circular References。</p>

<p>所以，當我們出現Native對象 (例如Dom、ActiveX Object) 與 Javascript 對象間的循環引用時，內存泄露的問題就出現了。</p>

<blockquote><p>好消息是，這個bug在 IE 7 中已經被修復了！</p></blockquote>

<p>簡單的例子來重現這個問題：</p>

<pre><code>&lt; html &gt; 
    &lt; head &gt; 
        &lt; script language = " JScript " &gt; 

            var  myGlobalObject;

            function  SetupLeak(){  // 產生循環引用，因此會造成內存泄露 
                //  First set up the script scope to element reference 
                myGlobalObject  = 
                    document.getElementById( " LeakedDiv " );

                //  Next set up the element to script scope reference 
                document.getElementById( " LeakedDiv " ).expandoProperty  = 
                    myGlobalObject;
            }


            function  BreakLeak()  // 解開循環引用，解決內存泄露問題 
            {
                document.getElementById( " LeakedDiv " ).expandoProperty  = 
                        null ;
            }
        &lt;/ script &gt; 
    &lt;/ head &gt; 

    &lt; body onload = " SetupLeak() "  onunload = " BreakLeak() " &gt; 
         &lt; div id = " LeakedDiv " &gt;&lt;/ div &gt; 
    &lt;/ body &gt; 
&lt;/ html &gt;
</code></pre>

<p>上面這個例子，很簡單就能夠解決內存泄露的問題。可惜的是，當結構復雜了以後，造成循環引用的原因開始變得多樣，我們就沒法那麽容易觀察到了，這時候，我們必須對代碼進行仔細的檢查。尤其是當碰到&#8230;</p>

<h3>Closure 中的 leaks</h3>

<p>當我們針對 Native Object (例如Dom對象、ActiveX Object)上綁定事件時，一不小心就會制造出 Closure Memory Leak 。其關鍵原因，其實和前者是一樣的，也是一個跨 javascript object 和 native object 的交互引用。只是代碼更為隱蔽。但在使用類似內嵌函數的時候，內嵌的函數有擁有一 個 reference 指向外部函數的 scope ，包括外部函數的參數，因此也就很容易造成一個很隱蔽的循環引用</p>

<p>下列例子可以說明該隱蔽性：</p>

<pre><code>&lt; html &gt; 
    &lt; head &gt; 
        &lt; script language = " JScript " &gt; 

            function  AttachEvents(element){

                //This structure causes element to ref ClickEventHandler  
                //element有個引用指向函數ClickEventHandler()

                element.attachEvent("onclick" , ClickEventHandler);

                function  ClickEventHandler(){

                    //This closure refs element  
                    //該函數有個引用指向AttachEvents(element)調用Scope，也就是執行了參數 element。             element.click();

                }
            }

            function  SetupLeak(){

                //The leak happens all at once 
                AttachEvents(document.getElementById( " LeakedDiv " ));
            }

        &lt;/ script &gt; 
    &lt;/ head &gt; 

    &lt; body onload = " SetupLeak() "  onunload = " BreakLeak() " &gt; 
        &lt; div id = " LeakedDiv " &gt;&lt;/ div &gt; 
    &lt;/ body &gt; 
&lt;/ html &gt;
</code></pre>

<p>還有這個例子在IE6 中同樣原因會引起 leaks</p>

<pre><code>function  leakmaybe() {
    var  elm  =  document.createElement( " DIV " );
    elm.onclick  =   function () {
        return   2   +   2 ;
    }
}

for  ( var  i  =   0 ; i   10000 ; i ++ ) {
    leakmaybe();
}
</code></pre>

<p>當然既然已經知道問題，拜網路上的大大所助&#8230;</p>

<h3>簡單的 leaks 解決方案</h3>

<p>當離開網頁時，透過 onunload 事件綁定，清除所有與 DOM 綁定的事件，如下</p>

<pre><code>if (window.attachEvent) {
    var clearElementProps = [
        'data',
        'onmouseover',
        'onmouseout',
        'onmousedown',
        'onmouseup',
        'ondblclick',
        'onclick',
        'onselectstart',
        'oncontextmenu'
    ];

    window.attachEvent("onunload", function() {
        var el;
        for(var d = document.all.length;d--;){
            el = document.all[d];
            for(var c = clearElementProps.length;c--;){
                el[clearElementProps[c]] = null;
            }
        }
    });
}
</code></pre>

<p>由上面的程式碼可以了解到關於 leak 的解決方式，當然也有更嚴謹的解決方式可參考下列文章：</p>

<ul>
<li><a href="http://novemberborn.net/javascript/event-cache">event-cache</a></li>
<li><a href="http://talideon.com/weblog/2005/03/js-memory-leaks.cfm">js-memory-leaks</a></li>
<li><a href="http://birdshome.cnblogs.com/archive/2005/02/16/104967.html">用innerHTML 代替 appendChild，避開互相參照</a></li>
</ul>


<p>接著介紹其他幾種特別的 leaks 類型，同樣的也只有 IE 會遇到</p>

<h3>Cross-Page Leaks</h3>

<p>直接看以下例子:</p>

<pre><code>&lt; html &gt; 
    &lt; head &gt; 
        &lt; script language = " JScript " &gt; 

        function  LeakMemory()  // 這個函數會引發Cross-Page Leaks 
        {
            var  hostElement  =  document.getElementById( " hostElement " );

            //  Do it a lot, look at Task Manager for memory response 

            for (i  =   0 ; i  &lt;   5000 ; i ++ )
            {
                var  parentDiv  = document.createElement( " &lt;div onClick='foo()'&gt; " );
                var  childDiv  = document.createElement( " &lt;div onClick='foo()'&gt; " );

                //  This will leak a temporary object 
                parentDiv.appendChild(childDiv);
                hostElement.appendChild(parentDiv);
                hostElement.removeChild(parentDiv);
                parentDiv.removeChild(childDiv);
                parentDiv  =   null ;
                childDiv  =   null ;
            }
            hostElement  =   null ;
        }


        function  CleanMemory()  // 而這個函數不會引發Cross-Page Leaks 
        {
            var  hostElement  =  document.getElementById( " hostElement " );

            //  Do it a lot, look at Task Manager for memory response 

            for (i  =   0 ; i  &lt;   5000 ; i ++ )
            {
                var  parentDiv  =   document.createElement( " &lt;div onClick='foo()'&gt; " );
                var  childDiv  =   document.createElement( " &lt;div onClick='foo()'&gt; " );

                //  Changing the order is important, this won't leak 
                hostElement.appendChild(parentDiv);
                parentDiv.appendChild(childDiv);
                hostElement.removeChild(parentDiv);
                parentDiv.removeChild(childDiv);
                parentDiv  =   null ;
                childDiv  =   null ;
            }
            hostElement  =   null ;
        }
        &lt;/ script &gt; 
    &lt;/ head &gt; 

    &lt; body &gt; 
        &lt; button onclick = " LeakMemory() " &gt; Memory Leaking Insert &lt;/ button &gt; 
        &lt; button onclick = " CleanMemory() " &gt; Clean Insert &lt;/ button &gt; 
        &lt; div id = " hostElement " &gt;&lt;/ div &gt; 
    &lt;/ body &gt; 
&lt;/ html &gt;
</code></pre>

<p>LeakMemory 和 CleanMemory 這兩段函數的唯一區別就在於他們的代碼的循序，從代碼上看，兩段代碼的邏輯都沒有錯。</p>

<p>但 LeakMemory 卻會造成泄露。原因是 LeakMemory() 會先建立起 parentDiv 和 childDiv 之間的連接，這時候，為了讓 childDiv 能夠獲知 parentDiv 的信息，因此 IE 需要先建立一個臨時的 scope 對象。而後 parentDiv 建立了和 hostElement 對象的聯系， parentDiv 和 childDiv 直接使用頁面 document 的 scope 。可惜的是，IE 不會釋放剛才那個臨時的 scope 對象的內存空間，直到我們跳轉頁面，這塊空間才能被釋放。而 CleanMemory 函數不同，他先把 parentDiv 和 hostElement 建立聯系，而後再把 childDiv 和 parentDiv 建立聯系，這個過程不需要單獨建立臨時的 scope ，只要直接使用頁面 document 的 scope 就可以了， 所以也就不會造成內存泄露了</p>

<p>詳細可參考：<a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/IETechCol/dnwebgen/ie_leak_patterns.asp">ie_leak_patterns</a></p>

<h3>Pseudo-Leaks (秀逗 Leaks)</h3>

<p>看看這個例子:</p>

<pre><code>&lt; html &gt; 
    &lt; head &gt; 
        &lt; script language = " JScript " &gt; 

        function  LeakMemory()
        {
            //  Do it a lot, look at Task Manager for memory response 

            for (i  =   0 ; i  &lt;   5000 ; i ++ )
            {
                hostElement.text  =   " function foo() { } " ;／／看內存會不斷增加
            }
        }
        &lt;/ script &gt; 
    &lt;/ head &gt; 

    &lt; body &gt; 
        &lt; button onclick = " LeakMemory() " &gt; Memory Leaking Insert &lt;/ button &gt; 
        &lt; script id = " hostElement " &gt; function  foo() { } &lt;/ script &gt; 
    &lt;/ body &gt; 
&lt;/ html &gt;
</code></pre>

<p>從上面的程式碼來看，不停的更新 hostElement.text 照理來說都是同一個位置不應該會有 leaks 的問題但MS是這麽解釋的:</p>

<blockquote><p>這不是內存泄漏。如果您創建了許多無法獲得也無法釋放的對象，那才是內存泄漏。在這裏，您將創建許多元素，Internet Explorer 需要保存它們以正確呈現頁面。Internet Explorer 並不知道您以後不會運行操縱您剛剛創建的所有這些對象的腳本。當頁面消失時（當您瀏覽完，離開瀏覽器時）會釋放內存。它不會泄漏。當銷毀頁面時，會中斷循環引用。</p></blockquote>

<p>因此，雖然不知道新版的 IE 是否已沒有上述問題，保險起見，避免上述狀況的程式撰寫風格才是上上策。</p>
<p><a rel="bookmark" href="http://smlsun.com/blog/2013/02/17/javascript-memory-leaks/"></a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[extjs 3.x: 本地資料 PagingStore 的使用]]></title>
<link href="http://smlsun.com/blog/2013/02/15/extjs-pagingstore/"/>
<updated>2013-02-15T18:04:00+08:00</updated>
<id>http://smlsun.com/blog/2013/02/15/extjs-pagingstore</id>

      <content type="html"><![CDATA[<p>extjs 3.x 再原生的 PagingStore 只支援遠端 paging，也就是分頁處理必須交由遠端的 server，透過傳入起始頁數以及每頁顯示的筆數，這樣的結構上會造成對 server request 次數大增，有些時候將所資料都載入前端，分散 server loading 是提高效能以及使用體驗的手段之一。</p>

<p>當然文章一開始有提到 extjs 3 原生未支援這樣處理的方式，好家在網路上的大神已經有幫我們開發出外掛，讓我們可以很方便去使用，該外掛相關說明以及下載地址：</p>

<p><a href="http://www.sencha.com/forum/showthread.php?71532-Ext.ux.data.PagingStore-v0.5">Ext.ux.data.PagingStore [v0.5]</a></p>

<p>使用是需要注意的重點：</p>

<ul>
<li>根據資料來源的不同會有不同的 store</li>
<li>在分頁 toolbar 的使用，記得也要使用 ux 的版本 <code>Ext.ux.PagingToolbar</code></li>
<li>可以使用 <code>Ext.data.MemoryProxy</code> 當畫面 render 完成後在進行 store.load</li>
</ul>


<p>最後提供一個已經寫好的小範例讓大家參考一下，希望可以讓需要的人快速上手囉！</p>

<iframe style="width: 100%; height: 500px" src="http://jsfiddle.net/smlsun/pw9EK/4/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<p><a rel="bookmark" href="http://smlsun.com/blog/2013/02/15/extjs-pagingstore/"></a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[如何令各個 OS 透過 andorid 手機的 usb 網路共用來進行 3g 網路上網]]></title>
<link href="http://smlsun.com/blog/2013/02/15/mac-andorid-usb-3g/"/>
<updated>2013-02-15T16:55:00+08:00</updated>
<id>http://smlsun.com/blog/2013/02/15/mac-andorid-usb-3g</id>

      <content type="html"><![CDATA[<p>在智慧型手機盛行的現在，很多時候出門在外需要共享網路時 android 提供很方便的網路分享機制可以讓我將 3g 網路分享給周遭的設備，一個是透過 wifi 另一個就是透過 usb 網路共享啦。</p>

<p>當然很多時候透過 wifi 是很方便，但是利用 wifi 分享網路有些問題：那就是有可能不穩定，手機耗電，以及最重要的傳輸速度比使用 usb 網路共用來的慢很多很多，假設在外工作的話，你可不想讓網路速度影響你的工作效率吧！</p>

<p>已筆者身邊的手機 nexus one 為例，將一一介紹如何在目前三個最大的 os 進行 usb 網路共享。</p>

<h2>Windows</h2>

<ol>
<li>請先下載 android  windows 專用的驅動程式：<a href="http://www.android.com/drivers/tetherxp.inf">tetherxp.inf</a></li>
<li>將 android 設定中的 USB 網路共用開啟</li>
<li>把手機連結到 windows 上，會跳出安裝驅動程式的訊息，此時驅動選擇第一步驟所下載的檔案</li>
<li>等待安裝完成，就可以快快樂樂上網啦！</li>
</ol>


<h2>Ubuntu</h2>

<p>沒什麼好說的，Ubuntu 沒想到是最方便的，手機插上電腦，開啟 android 網路共享，就可以上網了，連驅動都不用裝，太棒了！</p>

<h2>Apple MacBook</h2>

<p>參考這篇文章 <a href="http://smartphones.wonderhowto.com/how-to/usb-tether-your-android-device-your-mac-without-rooting-0140478/">How to USB Tether Your Android Device to Your Mac—Without Rooting</a></p>

<ol>
<li>請先下載 <a href="https://github.com/downloads/jwise/HoRNDIS/HoRNDIS-rel2.pkg">HoRNDIS-rel2.pkg</a>，將他安裝完成</li>
<li>連上你的 andorid phone</li>
<li>開啟 usb 網路共用</li>
<li>接著你就可以在網路偏好設定中看到你的手機已被掛載上網路啦！</li>
</ol>


<p>上面就是各 os 使用 android usb 網路共用的步驟，即使你是使用桌機沒有牽網路，也沒有 wifi 也可以透過這樣的方式分享網路進行上網，對於遊牧各地只有 3g 在手的朋友，可以更方便的讓其他設備上網，工作起來也將更得心應手，能夠全速飆網，工作才能行雲流水阿！</p>
<p><a rel="bookmark" href="http://smlsun.com/blog/2013/02/15/mac-andorid-usb-3g/"></a></p>]]></content>
    </entry>
  
</feed>
