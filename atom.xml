<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[蹤影]]></title>
  <link href="http://smlsun.com/atom.xml" rel="self"/>
  <link href="http://smlsun.com/"/>
  <updated>2014-03-31T17:57:11+08:00</updated>
  <id>http://smlsun.com/</id>
  <author>
    <name><![CDATA[smlsun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
    <entry>
      




<title type="html"><![CDATA[spring-boot: server startup or shutdown listener]]></title>
<link href="http://smlsun.com/blog/2014/03/31/spring-boot-start-shutdown/"/>
<updated>2014-03-31T00:00:00+08:00</updated>
<id>http://smlsun.com/blog/2014/03/31/spring-boot-start-shutdown</id>

      <content type="html"><![CDATA[<p>在之前的專案中遇到一種狀況，使用者說他們的服務沒有反應？通常會有幾種情形：</p>

<ol>
<li>服務被人為關閉</li>
<li>作業系統被關閉</li>
<li>記憶體不足造成服務終止</li>
</ol>


<p>第三點的原因有很多，這邊先不談，關於 1、2 點可能是人為，或者管理者在做系統維護時，不知道需要在重新啟動服務，或是錯誤關閉，不管哪一種，都會造成服務無法運作，接著你就會接到電話或信件，系統不 work 了。</p>

<p>通常，也只能問有沒有人去操作主機，或是有沒有人去關閉服務？常常問不出所以然，當然就如同上面所舉的幾點，不一定是人為因素，但我們希望可以加快系統出現異常時的反應速度，將服務停止時間降到最低。</p>

<p>因此，主動通知是比較積極的作法，唯有當下接收到服務開啟或關閉的訊息，才能夠在最接近問題發生的點來釐清問題，另一方面，也是較有效率的作法，誰也不想定期每天去檢查你所安裝的服務今天是否有正常運行。</p>

<p>說這麼多，此篇要介紹的是如何在使用 spring-boot 時，定義 server 開啟或關閉時執行特定的程式，比如發 mail 或是寫 log，當然使用傳統 spring 也可以，參考：<a href="http://www.mkyong.com/spring/spring-postconstruct-and-predestroy-example/">Spring @PostConstruct And @PreDestroy Example</a>。</p>

<p>在實作上，我們可以利用 @Configuration 的特性，在類別中，只要我們打上 @Configuration，該類別就會作為類似 xml 設定檔，在服務啟動時將在類別中定義的方法根據每個方法的 annotation 註冊，下面將分別針對啟動與關閉服務利用 @PostConstruct，以及 @PreDestroy 來達成。</p>

<h2>服務啟動時 @PostConstruct</h2>

<p>@PostConstruct，官方 api 參考下面連結 <a href="http://docs.oracle.com/javaee/5/api/javax/annotation/PostConstruct.html">Annotation Type PostConstruct</a>，文件中有詳細說明使用時機，其中：</p>

<blockquote><p>The PostConstruct annotation is used on a method that needs to be executed after dependency injection is done to perform any initialization.</p></blockquote>

<p>可以看到執行的時機點在依賴注入後進行初始作業的執行，正是我們想要的。</p>

<h2>服務關閉時 @PreDestroy</h2>

<p>@PreDestroy，官方 api 參考下面連結 <a href="http://docs.oracle.com/javaee/5/api/javax/annotation/PreDestroy.html">Annotation Type PreDestroy</a></p>

<blockquote><p>The PreDestroy annotation is used on methods as a callback notification to signal that the instance is in the process of being removed by the container.</p></blockquote>

<p>文中說明，當執行實體被容器移除時會執行該動作，若我們將 @PreDestroy 定義在有 @Configuration 標註的類別中，因為 @Configuration 在服務啟動時只會產生一個實體，因此一旦服務被關閉時進行類別 GC 時，就會連帶觸動執行有標註 @PreDestroy 的函式。</p>

<p>透過上述兩個 annotation 就可以做到啟動或關閉時發出 mail 通知，不過這邊要注意關閉的情形，若使用者強制將服務關閉，不等待 server 的後續處理，那標註 @PreDestroy 的函式將無法完全執行完畢，目前個人沒有更好的方式可以避免，若讀者有不錯的作法，務必讓我知道，或者是關於上述應用情境有更好的處理方式，比如該 annotation 有錯用的地方，也請不吝指教。</p>

<p>最後附上開關 server 自動送出 mail 的程式碼給大家參考，以 gmail 為例：</p>

<p>定義 MailSender 以及預設的 SimpleMailMessage</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import org.springframework.context.annotation.Bean;
</span><span class='line'>import org.springframework.context.annotation.Configuration;
</span><span class='line'>import org.springframework.mail.MailSender;
</span><span class='line'>import org.springframework.mail.SimpleMailMessage;
</span><span class='line'>import org.springframework.mail.javamail.JavaMailSenderImpl;
</span><span class='line'>
</span><span class='line'>import java.util.Properties;
</span><span class='line'>
</span><span class='line'>@Configuration
</span><span class='line'>public class ApplicationConfig{
</span><span class='line'>
</span><span class='line'>    @Bean
</span><span class='line'>    public MailSender mailSender(){
</span><span class='line'>        JavaMailSenderImpl javaMailSenderImpl = new JavaMailSenderImpl();
</span><span class='line'>        javaMailSenderImpl.setHost("smtp.gmail.com");
</span><span class='line'>        javaMailSenderImpl.setPort(587);
</span><span class='line'>        javaMailSenderImpl.setUsername("user");
</span><span class='line'>        javaMailSenderImpl.setPassword("password");
</span><span class='line'>
</span><span class='line'>        Properties mailProp = new Properties();
</span><span class='line'>        mailProp.put("mail.smtp.auth", true);
</span><span class='line'>        mailProp.put("mail.smtp.starttls.enable", true);
</span><span class='line'>
</span><span class='line'>        javaMailSenderImpl.setJavaMailProperties(mailProp);
</span><span class='line'>        return (MailSender) javaMailSenderImpl;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    @Bean
</span><span class='line'>    public SimpleMailMessage simpleMailMessage() {
</span><span class='line'>        SimpleMailMessage msg = new SimpleMailMessage();
</span><span class='line'>        msg.setTo("to@gmail.com");
</span><span class='line'>        msg.setFrom("from@gmail.com");
</span><span class='line'>        msg.setText("內文");
</span><span class='line'>        return msg;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>定義開關服務處理函式，將定義好的 MailSender 以及 SimpleMailMessage 注入並且使用：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import org.springframework.beans.factory.annotation.Autowired;
</span><span class='line'>import org.springframework.context.annotation.Configuration;
</span><span class='line'>import org.springframework.mail.MailException;
</span><span class='line'>import org.springframework.mail.MailSender;
</span><span class='line'>import org.springframework.mail.SimpleMailMessage;
</span><span class='line'>
</span><span class='line'>import javax.annotation.PostConstruct;
</span><span class='line'>import javax.annotation.PreDestroy;
</span><span class='line'>
</span><span class='line'>@Configuration
</span><span class='line'>public class ContextListener {
</span><span class='line'>
</span><span class='line'>    @Autowired
</span><span class='line'>    MailSender mailSender;
</span><span class='line'>
</span><span class='line'>    @Autowired
</span><span class='line'>    SimpleMailMessage simpleMailMessage;
</span><span class='line'>
</span><span class='line'>    @PostConstruct
</span><span class='line'>    public void startupMailNotify(){
</span><span class='line'>
</span><span class='line'>        simpleMailMessage.setSubject("服務啟動");
</span><span class='line'>
</span><span class='line'>        try{
</span><span class='line'>            mailSender.send(simpleMailMessage);
</span><span class='line'>        }
</span><span class='line'>        catch(MailException ex) {
</span><span class='line'>            System.err.println(ex.getMessage());
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>    @PreDestroy
</span><span class='line'>    public void shutdownMailNotify(){
</span><span class='line'>        simpleMailMessage.setSubject("服務關閉");
</span><span class='line'>        try{
</span><span class='line'>            mailSender.send(simpleMailMessage);
</span><span class='line'>        }
</span><span class='line'>        catch(MailException ex) {
</span><span class='line'>            System.err.println(ex.getMessage());
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>其實可以在精簡，不過也夠簡單了，並且降低耦合，是吧～</p>

<p>在 spring 與 spring-boot 其中之一的差別，就是 spring-boot 可以不需要 xml 定義，寫起來又更方便了點、精簡了點。</p>
<p><a rel="bookmark" href="http://smlsun.com/blog/2014/03/31/spring-boot-start-shutdown/"></a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[grails: 靜態資源或網址加入快取機制]]></title>
<link href="http://smlsun.com/blog/2014/03/31/grails-plugin-cache-head/"/>
<updated>2014-03-31T00:00:00+08:00</updated>
<id>http://smlsun.com/blog/2014/03/31/grails-plugin-cache-head</id>

      <content type="html"><![CDATA[<p>關於瀏覽器的 cache 機制可以參考下列文章：</p>

<ul>
<li><a href="https://blog.othree.net/log/2012/12/22/cache-control-and-etag/">Cache Control 與 ETag</a></li>
<li><a href="http://blog.toright.com/posts/3414/%E5%88%9D%E6%8E%A2-http-1-1-cache-%E6%A9%9F%E5%88%B6">初探 HTTP 1.1 Cache 機制</a></li>
</ul>


<p>其中 <a href="https://blog.othree.net/log/2012/12/22/cache-control-and-etag/">Cache Control 與 ETag</a> 這編寫的蠻清楚的，可以清楚知道 Cache 的使用還有相關的屬性差別，基本上對於瀏覽器是否使用 cache 可以從時間的判斷，以及  etag(Entity Tag) 的判斷來決定 server 回傳的 http status 是否為 304，若為 304 則瀏覽器就會讀取 cache 而不會對 server 請求 request。</p>

<p>知道瀏覽器判斷使用 cache 的原理後，以 grails 為例，我們可以加入如下的判斷式：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if (isRequestedFileModified(req)) {
</span><span class='line'>  //get Program and return the image data
</span><span class='line'>} else {
</span><span class='line'>  //file is the same
</span><span class='line'>  response.sendStatus(304)
</span><span class='line'>  return
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>def isRequestedFileModified(req) {
</span><span class='line'>  // check etag and/or compare last modified date/time
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>如此，當我們對後端請求取得資源時，先檢查 etag 有沒有存在，若沒有表示為全新請求，若 etag 相同，可在進一步檢查有沒有更新過或是快取距離最後一次更新是否超過 max-age 所定義的時間。</p>

<p>在實際網站的開發，對於需要大量資源進行計算的請求，或是靜態圖片的讀取，就可以使用快取的機制，來減少 server 的負載，畢竟若不是經常更新的資料，我們可以不用每次都向 server 請求重新取得資源。</p>

<p>雖然上述範例是用 grails 為例，但對於其他語言的實作，不外乎就使檢查 etag 以及最後更新時間，另外若你是使用 grails 進行開發，可以直接使用下列 plugin:</p>

<ul>
<li><a href="http://grails.org/plugin/cache-headers">Caching Headers Plugin</a></li>
</ul>


<p>使用此 plugin 你可以事先定義各種 cache 機制的政策比如 plugin 中的範例：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cache.headers.presets = [
</span><span class='line'>    unauthed_page: [shared:true, validFor: 300], // 5 minute refresh window
</span><span class='line'>    authed_page: false, // No caching for logged in user
</span><span class='line'>    content: [shared:true, validFor: 3600], // 1hr on content
</span><span class='line'>    recent_items_feed: [shared: true, validFor: 1800], // 30 minute throttle on RSS updates
</span><span class='line'>    search_results: [validFor: 60, shared: true],
</span><span class='line'>    taxonomy_results: [validFor: 60, shared: true]
</span><span class='line'>]</span></code></pre></td></tr></table></div></figure>


<p>以便根據不同狀況來有效使用 cache，實際在 controller 中定義 cache 所需屬性可以使用其提供的 DSL 來進行，如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>def object = s3Service.getObject("${grailsApplication.config.grails.aws.root}/${params.name}/${file}")
</span><span class='line'>
</span><span class='line'>withCacheHeaders {
</span><span class='line'>    def image = object
</span><span class='line'>    delegate.lastModified {
</span><span class='line'>        image.getLastModifiedDate()
</span><span class='line'>    }
</span><span class='line'>    etag {
</span><span class='line'>        image.getKey()  
</span><span class='line'>     }
</span><span class='line'>    generate {
</span><span class='line'>        response.contentType = "image/jpeg"
</span><span class='line'>        response.outputStream &lt;&lt; image.dataInputStream
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>其中：</p>

<ol>
<li><code>delegate.lastModified</code> closure 定義比對時間的資料來源。</li>
<li><code>etag</code> closure 定義資源識別的方式。</li>
<li><code>generate</code> closure 會在判斷該請求需要重新取得進行呼叫，若不需要重新取的則會回傳 status 304，使用瀏覽器快取。</li>
</ol>


<blockquote><p>補充：若要了解上述 closure 的使用原理可參考下述連結，範例簡單清楚：</p>

<ul>
<li><a href="http://www.codedata.com.tw/java/groovy-tutorial-03-closure/">Groovy Tutorial（3）淺談 Closure 程式設計</a></li>
</ul>


<p>可以幫助更進一步理解運作原理。</p></blockquote>

<p>如此，若要自己撰寫快取機制，或是使用既有的 plugin 都可以在關鍵時刻讓你的網站能夠有更快的效能。</p>
<p><a rel="bookmark" href="http://smlsun.com/blog/2014/03/31/grails-plugin-cache-head/"></a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[grails: gorm 自動更新與 discard 方法 使用特性與注意事項]]></title>
<link href="http://smlsun.com/blog/2014/03/31/grails-gorm-discard/"/>
<updated>2014-03-31T00:00:00+08:00</updated>
<id>http://smlsun.com/blog/2014/03/31/grails-gorm-discard</id>

      <content type="html"><![CDATA[<p>在使用 grails domain 時，有時候雖然我們有對 domain 變更值，但我們需要經過一些判斷後，才要正確寫入資料庫，但在 grails 的環境在你還沒有下 save 的指令時，他會因為函式執行的需要進行 auto save，關於 gorm 原理可以參考下列文章</p>

<p><a href="http://spring.io/blog/2010/06/23/gorm-gotchas-part-1/">GORM Gotchas (Part 1)</a></p>

<p>其中有一段如下：</p>

<blockquote><p>   def b = Book.findByAuthor(params.author)
   b.title = b.title.reverse()</p>

<p>Note that there is no call to save() here. When the request has completed you will find that the book&#8217;s title has been reversed in the database - the change has been persisted without an explicit save. This is because:</p>

<ol>
<li>the book is attached to the session (by virtue of being retrieved by a query);</li>
<li>the title property is persistent (all properties are persistent unless configured as transient); and</li>
<li>the property value has changed by the time the session closes.</li>
</ol>
</blockquote>

<p>上述說明了就算沒有下 save() 的指令，特定的狀況下 domain 還是有可能自動寫入資料庫。</p>

<p>如果我們不想要自動更新怎麼辦？文中也有提到下述狀況將放棄自動更新：</p>

<blockquote><p>if any of the property values fail validation, the changes will not be persisted. Of course, if the values are valid and yet you still don&#8217;t want to persist them, you can call <code>discard()</code> on your instance. This won&#8217;t reset the values of the instance&#8217;s properties, but it will ensure that they aren&#8217;t saved to the database.</p></blockquote>

<p>當 validation 不通過，或是執行 <code>discard()</code> 將取消更新。</p>

<p>對於 grails domain 自動儲存以及取消自動儲存的特性有所了解後，
筆者目前遇到的狀況如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def purchaseSheetDet = PurchaseSheetDet.get(params.id)
</span><span class='line'>purchaseSheetDet.properties = params
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>def batch = Batch.findByName(params["batch.name"])
</span><span class='line'>purchaseSheetDet.batch = batch
</span><span class='line'>
</span><span class='line'>purchaseSheetDet.discard()
</span></code></pre></td></tr></table></div></figure>


<p>上述程式碼就算最後執行了 discard() 自動更新沒有被取消，檢查實際將執行的 sql 開出 log 記錄如下</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Hibernate: update purchase_sheet_det set ...
</span><span class='line'>Hibernate: select ... from batch this_ where this_.name=?</span></code></pre></td></tr></table></div></figure>


<p>可以看到，在執行查詢 batch 之前就先對 update purchase_sheet_det 進行更新，當然之後的 <code>purchaseSheetDet.discard()</code> 就會失效，因為 update 語法已經在之前就已執行了。</p>

<p>筆者推測當你下 find 時 gorm 為了確保查到的資料是正確的，會強制將未 persist 的 domain 進行 save。</p>

<p>知道發生的原因後，我們可以將程式改寫如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def batch = Batch.findByName(params["batch.name"])
</span><span class='line'>
</span><span class='line'>def purchaseSheetDet = PurchaseSheetDet.get(params.id)
</span><span class='line'>purchaseSheetDet.properties = params
</span><span class='line'>purchaseSheetDet.batch = batch
</span><span class='line'>
</span><span class='line'>purchaseSheetDet.discard()</span></code></pre></td></tr></table></div></figure>


<p>一旦我們這樣調整順序以後，在預計要更新的 domain 之前，先把要 find 的 domain 準備好，這樣就不會因為 find 去觸動自動將有變動的 domain 進行更新，造成 <code>discard()</code> 指令失效。</p>

<h2>結論</h2>

<p>透過上面的結果，我們可以整理出幾個規則：</p>

<ol>
<li>若操作的 domain 的屬性變更有可能因為之後的檢查透過 discard 放棄變更，在檢查的過程中務必不可觸動 find 的執行，避免因為 find 把尚未確定的變更寫入實體資料庫</li>
<li>若有必要使用到其他 domain 透過 find 取得實體，務必在可能執行 discard 的 domain 實體話之前透過 find 取得</li>
<li>一旦上述規則都有遵守，但執行 discard 還是無效，可以透過開啟 hibernate 的 sql log 來檢查到底何時執行了更新的語法。開啟 sql log 的方式可參考:<a href="http://stackoverflow.com/questions/2568507/how-to-log-sql-statements-in-grails">How to log sql statements in grails</a></li>
</ol>

<p><a rel="bookmark" href="http://smlsun.com/blog/2014/03/31/grails-gorm-discard/"></a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[AWS S3: 設定特定網站直接存取雲端圖片(不使用 accessKey ，secretKey)]]></title>
<link href="http://smlsun.com/blog/2014/03/31/AWS-S3-noaccessKey-nosecretKey/"/>
<updated>2014-03-31T00:00:00+08:00</updated>
<id>http://smlsun.com/blog/2014/03/31/AWS-S3-noaccessKey-nosecretKey</id>

      <content type="html"><![CDATA[<p>關於 Amazon S3 的申請，可參考下列文章：</p>

<ul>
<li><a href="http://s3131212.com/amazon-simple-storage-service/">Amazon Simple Storage Service (Amazon S3) </a>: 介紹如何註冊使用 S3 服務</li>
</ul>


<p>一旦申請完成，我們可以透過 Make Public 來使資源可以透過 url 直接存取，一旦設定完成可以使用下列範例網址直接存取而不需要 accessKey 以及 secretKey:</p>

<p><code>https://s3.amazonaws.com/upload.sample.net/attachment/XXXXXX/111111.jpg</code></p>

<p>這樣做有什麼好處？既然使用 S3 作為圖片或是檔案的來源，當然希望可以利用 S3 的服務分散網站運作所需資源，特別是圖檔呈現部分，其中包括圖檔 cache 的機制，也將由 S3 進行判斷。</p>

<p>不過若將 S3 存放的檔案設為 public 看來是最快的方式，卻令資源暴露在網際網路之中，有沒有更折衷的方式，只允許目標網站可以以不透過 accessKey 以及 secretKey 進行存取，單純透過 url？答案是可以的，首先點選 <code>Edit bucket polocy</code>，如下圖：</p>

<p><img src="https://lh6.googleusercontent.com/-upmGYOEmyR8/UzkIupOGWtI/AAAAAAAAOSg/-bn11ssJVsA/s0/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2014-03-31+%E4%B8%8B%E5%8D%882.12.49.png" title="螢幕快照 2014-03-31 下午2.12.49.png" alt="enter image description here" /></p>

<p>點選之後會跳出定義 bucket polocy 視窗，我們可以填入下列 json 格式:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "Version": "2012-10-17",
</span><span class='line'>  "Id": "S3PolicyId1",
</span><span class='line'>  "Statement": [
</span><span class='line'>      {
</span><span class='line'>          "Sid": "IPAllow",
</span><span class='line'>          "Effect": "Allow",
</span><span class='line'>          "Principal": {
</span><span class='line'>              "AWS": "*"
</span><span class='line'>          },
</span><span class='line'>          "Action": "s3:*",
</span><span class='line'>          "Resource": "arn:aws:s3:::upload.net/*",
</span><span class='line'>          "Condition": {
</span><span class='line'>              "IpAddress": {
</span><span class='line'>                  "aws:SourceIp": "192.168.0. 1/24"
</span><span class='line'>              }
</span><span class='line'>          }
</span><span class='line'>      },
</span><span class='line'>      {
</span><span class='line'>          "Sid": "Allow get requests originated from sample.net",
</span><span class='line'>          "Effect": "Allow",
</span><span class='line'>          "Principal": "*",
</span><span class='line'>          "Action": "s3:GetObject",
</span><span class='line'>          "Resource": "arn:aws:s3:::upload.sample.net/*",
</span><span class='line'>          "Condition": {
</span><span class='line'>              "StringLike": {
</span><span class='line'>                  "aws:Referer": [
</span><span class='line'>                      "http://sample.net/*",
</span><span class='line'>                      "http://dev.sample.net:8080/*",
</span><span class='line'>                      "http://www.sample.net/*"
</span><span class='line'>                  ]
</span><span class='line'>              }
</span><span class='line'>          }
</span><span class='line'>      }
</span><span class='line'>  ]
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>上述設定檔中，定義 <code>aws:SourceIp</code> 可以讓我們在主機上操作 S3 而不需要 accessKey 以及 secretKey，舉例來說可以透過如同 <code>wget  https://s3.amazonaws.com/upload.sample.net/attachment/XXXXXX/111111.jpg</code> 來取得資源。</p>

<p>定義 <code>aws:Referer</code> 的話，則可以指定特定的 domain 才可以進行資源的存取，也就是說一旦使用者瀏覽 <code>www.sample.net</code> 這個網站時，則該瀏覽器在讀取圖檔時傳送目前所屬網址資訊(refer 屬性)，則圖檔就可以直接透過 url 向 S3 取得檔案資源。</p>

<p>當然這些 polocy 變化百百種我們可以參考 aws 提供的範例進行修改：<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/AccessPolicyLanguage_UseCases_s3_a.html">Example Cases for Amazon S3 Bucket Policies</a></p>

<h1>結論</h1>

<p>透過上述的設定，可以帶來的好處：</p>

<ol>
<li>S3 分散了資源載入所需系統效能，還有頻寬</li>
<li>判斷是否重新取得(http starus 200) 或是沒有變動使用快取(http starus 304) 交由 S3 判斷，自行開發的服務不需實作。</li>
<li>安全性與方便度兼具，可以直接透過 url 存取，又不致於暴露在網際網路之中，透過定義 polocy 指定特定的 domain 可以直接存取支援</li>
</ol>


<p>經由這次對 S3 操作上的了解，若想要製作網站靜態資源的快取機制，也就不是難事，下一篇在說明如何自行開發快取機制。</p>
<p><a rel="bookmark" href="http://smlsun.com/blog/2014/03/31/AWS-S3-noaccessKey-nosecretKey/"></a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[服務上線發表-Moto Ranger 線上摩托維修記錄]]></title>
<link href="http://smlsun.com/blog/2014/01/20/Moto-Ranger/"/>
<updated>2014-01-20T00:00:00+08:00</updated>
<id>http://smlsun.com/blog/2014/01/20/Moto-Ranger</id>

      <content type="html"><![CDATA[<p>服務上線發表，不知道別人在產品上線的情形是如何，我個人是非常緊張&#8230;</p>

<p>因為家裡開的是機車維修店，常常遇到客戶明明很久以前就換過機油，或是輪胎煞車皮之類的日常保養，卻還是說我前不久才換過，苦無證據，因此開發了一個可以記錄客戶維修歷史記錄的服務，順便也幫傳統的機車行加入一些資訊管理。</p>

<p>傳統摩托維修店家，沒有一個簡易的維修記錄軟體，很難記錄到底熟客有哪些，一個月的營業額有多少，所使用的零件成本也是憑感覺，往往沒辦法確實估算一個車行營運的成本與利潤，並且沒有辦法好好管理客戶資料，有時候確實會發生車子修理好，但是聯絡客戶的資訊找不到的窘境，維修車行是個需要專業並且辛苦的工作，工時又長，來客就是賺錢的機會，憑著維修記錄，也可以提醒客戶該做定期的維修保養，提供完善的服務。</p>

<p>並且在車行的營業環境中會有很多粉塵，在開發此系統時，也考慮提供手機或是平板瀏覽器（android 或是 iOS）的相容，即使沒有 PC 也可以進行。</p>

<p>在打造維修記錄的服務時，一開始的開發對象是店家的維修記錄的管理，但在過程中，發現個人也有需求，相信有在開車或是騎車的朋友一定也會有忘記自己的愛車是什麼時候加過機油（在下也是），觀察一下網路上的服務，甚至是手機 app  似乎沒有一個比較合適簡單的維修記錄軟裡，也有看到很多朋友使用 blog 來記錄維修記錄(辛苦！)，每個人的生命中多少有幾個 [第二老婆] 陪你浪跡天涯，好好愛護才能走更遠的路，萬一因為忘記什麼時候加過機油造成引擎損壞，那就得不償失了。</p>

<p>此外，一旦您的愛車要出售時，也可以附上維修記錄，證明皆有正常維修，讓你的愛車更有價格上的競爭力。</p>

<p>於是基於店家的管理，以及個人的需求，筆者開發一個線上服務，恭敬的為大家介紹；</p>

<h2><a href="http://motoranger.net/">Moto Ranger - 線上摩托維修記錄</a></h2>

<p><img src="https://lh6.googleusercontent.com/--p7y5sSzaIw/UtzT00Q2siI/AAAAAAAAMEs/n3MRFddM8jE/s0/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2014-01-20+%E4%B8%8B%E5%8D%883.43.42.png" title="螢幕快照 2014-01-20 下午3.43.42.png" alt="enter image description here" /></p>

<h2>店家首頁</h2>

<p><img src="https://lh5.googleusercontent.com/-Z0OB8dowktA/Utzjhr4-Q3I/AAAAAAAAMFU/_LNNBRVDtYU/s0/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2014-01-20+%E4%B8%8B%E5%8D%883.52.24.png" title="螢幕快照 2014-01-20 下午3.52.24.png" alt="enter image description here" /></p>

<h2>維修記錄</h2>

<p><img src="https://lh4.googleusercontent.com/-7x73juU0x9Q/Ut0Cq2N_ezI/AAAAAAAAMF8/w2ZkLskZJe8/s0/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2014-01-20+%E4%B8%8B%E5%8D%887.03.22.png" title="螢幕快照 2014-01-20 下午7.03.22.png" alt="enter image description here" /></p>

<p>取名為 Moto Ranger 是要向我「<a href="http://blog.smlsun.com/2013/12/this-guy-is-my-bro.html">那流浪漢黑手 bro</a>」，「<a href="http://blog.tin613.com/">tin613</a>」 致敬，勇於追逐自己的夢想，雖然這只是一個小服務，但這是我的第一步，2013 年的總結，雖不知道這服務會發展到什麼程度，但至少在路上了，歡迎大家來使用。</p>

<p>再將近一年陸陸續續的開發中，由家裡的師父當我的早期試用者，陸陸續續也改善了一些流程的問題，在 2013 年末 密集的開發下，總算可以推出供個人與車行使用的線上維護記錄軟體，為了因應個資法，也加入相關的資料防護，方便大家使用的通用維修項目，以及使用導覽，若一開始不知道如何操作的朋友，註冊完成後，登入系統會先進行導覽，幫助您快速上手。</p>

<p>若是個人使用，可以直接線上註冊，若是車行有興趣，可以與我聯繫，期初我會在挑選幾家進行早期測試。</p>

<p>因為剛開始公開測試，若再使用中有任何問題或意見歡迎來信建議，或是直接在服務中的「意見回饋」進行留言，您的意見會讓這個服務更好！</p>

<p>或者，您也可以在我們的 <a href="https://www.facebook.com/pages/%E5%8B%9D%E7%A5%A5%E6%A9%9F%E8%BB%8A%E8%A1%8C-Moto-Ranger/252043181598683">facebook 專頁 Moto Ranger</a> 留下您的意見。</p>
<p><a rel="bookmark" href="http://smlsun.com/blog/2014/01/20/Moto-Ranger/"></a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[ubuntu 忘記密碼怎麼辦？三個步驟完成修改]]></title>
<link href="http://smlsun.com/blog/2014/01/19/ubuntu/"/>
<updated>2014-01-19T00:00:00+08:00</updated>
<id>http://smlsun.com/blog/2014/01/19/ubuntu</id>

      <content type="html"><![CDATA[<ol>
<li><p>游標移到 recovery mode (不要 enter)，鍵盤輸入 e，表示編輯 command</p>

<p> <img src="https://lh3.googleusercontent.com/-IIwTTUyywEk/UsYdxqpauxI/AAAAAAAAL_k/drrfABMruQI/s0/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2014-01-03+%E4%B8%8A%E5%8D%8810.16.36.png" title="螢幕快照 2014-01-03 上午10.16.36.png" alt="enter image description here" /></p></li>
<li><p>修改關鍵字 <code>ro recovery nomodeset</code>：</p>

<p> <img src="https://lh5.googleusercontent.com/-WMKHLt4bS5s/UsYgsBGuviI/AAAAAAAAL_4/q8PIplU5CLU/s0/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2014-01-03+%E4%B8%8A%E5%8D%8810.29.47.png" title="螢幕快照 2014-01-03 上午10.29.47.png" alt="enter image description here" /></p>

<p> ro 表示 readonly，標準只有提供幾個內建功能，若要修改密碼我們需要用到 bash 的 passwd 的指令，將其改為 <code>rw single init=/bin/bash</code>，表示進入 single user mode，也就是 root 使用者，並且載入 bash 令我們可以修改密碼：</p>

<p> <img src="https://lh5.googleusercontent.com/-V7A7bn00g50/UsYhmVEx6gI/AAAAAAAAMAE/v8B8EEJwl1k/s0/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2014-01-03+%E4%B8%8A%E5%8D%8810.33.42.png" title="螢幕快照 2014-01-03 上午10.33.42.png" alt="enter image description here" /></p></li>
<li><p>修改完成後，鍵盤輸入 ctrl-x 進入 recovary：</p>

<p> 可以看到游標停在 <code>root@(none):/#:</code>，現在我們有了 root 權限，如此一來在有最大權限的情況下，你就可以任意調整 server</p></li>
<li><p>輸入 <code>passwd username</code> 就可以進行修改密碼。</p></li>
</ol>


<h3>完工</h3>
<p><a rel="bookmark" href="http://smlsun.com/blog/2014/01/19/ubuntu/"></a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Rabbit Mq Spring Boot]]></title>
<link href="http://smlsun.com/blog/2014/01/19/rabbit-MQ-Spring-boot/"/>
<updated>2014-01-19T00:00:00+08:00</updated>
<id>http://smlsun.com/blog/2014/01/19/rabbit-MQ-Spring-boot</id>

      <content type="html"><![CDATA[<hr />

<p>title: &#8220;rabbit MQ 與 Spring boot 整合，以 RPC mode 為例&#8221;
layout: post</p>

<h2>categories: rabbit MQ, java, spring, spring boot</h2>

<p>最近在開發的專案剛好有使用到 rabbit MQ，也花了一點時間了解運作原理，關於使用 MQ 的好處，與各種應用情形，網路上有很多，有需要可以搜尋看看，本篇要說明的是 rabbit MQ 與 java 的串接，在實作的過程中花了一些時間，希望透過這篇的說明可以幫助到有需要的人。</p>

<p>在開始說明前，先簡單說明一下 RPC 模式的運作：</p>

<p>在 rabbit MQ 的官網<a href="http://www.rabbitmq.com/tutorials/tutorial-six-python.html">關於 RPC 的介紹</a>，模型示意圖如下：</p>

<p><img src="http://www.rabbitmq.com/img/tutorials/python-six.png" alt="enter image description here" /></p>

<p>可以看到在 RPC 模式下分為 client 與 server，request 與 Reply 分別有各自的隊列負責，本範例使用 spring AmqpTemplate 作為 client 進行操作，在上圖中總共有四個重要的成員，分為 client 與 server 跟大家介紹。</p>

<p>一開始要先跟大家說明的是，在整個 java 與 rabbit MQ 整合有個很重要的物件為 <code>ConnectionFactory connectionFactory</code>，該物件存放了存取 rabbit MQ server 的相關資訊，包括登入帳號與密碼，因此在此範例中不管 client、server 或是去跟回的隊列都會跟他有關係，因此一開始我們需要先建立 ConnectionFactory。</p>

<p>因為是用 spring boot 開發，預設只要有使用到  amqp 套件，spring 在啟動時就算你沒有特別設定，就會產生好有預設參數的 bean 等待你取用，本範例沒有用到特殊參數，因此透過下列程式就可以取得 ConnectionFactory 實體：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@Autowired
</span><span class='line'>ConnectionFactory connectionFactory;</span></code></pre></td></tr></table></div></figure>


<p>所謂的預設值分別是 ip、port、帳號、密碼等，client 與 server 用的會是一個物件，接著我們就可以來看 client 的定義。</p>

<h2>client</h2>

<p>client 是訊息的發起方，一開始我們需要先定義 client 的隊列，RPC 模式有去有回，對於 client 而言，他需要消化的隊列是 reply，因此我們需要先將 client 與 reply 進行綁定，首先需要先定義 reply 隊列：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>final static String queueName = "reply";
</span><span class='line'>
</span><span class='line'>@Bean
</span><span class='line'>public Queue responseQueue() {
</span><span class='line'>    return new Queue(queueName);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>一旦隊列建立完成，再來要設定 amqpTemplete，還記得剛剛說的 connectionFactory 儲存了存取  MQ server 的相關資訊，因此在建立時需要傳入，建立以後綁定 reply 隊列，如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@Bean
</span><span class='line'>public RabbitTemplate amqpTemplate() {
</span><span class='line'>    RabbitTemplate rabbitTemplate = new RabbitTemplate(connectionFactory);
</span><span class='line'>    rabbitTemplate.setReplyQueue(responseQueue());
</span><span class='line'>    return rabbitTemplate;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>接著我們需要設定 SimpleMessageListenerContainer，首先為了讓 SimpleMessageListenerContainer 可以存取隊列訊息，所以他也需要 ConnectionFactory，一旦 amqpTemplate 送出訊息後，將透過 SimpleMessageListenerContainer 去監看 replay 的隊列有沒有新的訊息近來並且要將訊息傳給 amqpTemplate，因此 SimpleMessageListenerContainer 需要綁定 amqpTemplate 與 replay 隊列，設定的程式碼如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@Bean
</span><span class='line'>public SimpleMessageListenerContainer clientMessageListenerContainer() {
</span><span class='line'>    SimpleMessageListenerContainer container = new SimpleMessageListenerContainer();
</span><span class='line'>    container.setConnectionFactory(connectionFactory);
</span><span class='line'>    container.setQueues(responseQueue());
</span><span class='line'>    container.setMessageListener(amqpTemplate());
</span><span class='line'>    return container;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>如此就完成 client 的設定，完整程式碼如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package goinfo.test;
</span><span class='line'>
</span><span class='line'>import org.springframework.amqp.core.Queue;
</span><span class='line'>import org.springframework.amqp.rabbit.connection.ConnectionFactory;
</span><span class='line'>import org.springframework.amqp.rabbit.core.RabbitTemplate;
</span><span class='line'>import org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer;
</span><span class='line'>import org.springframework.beans.factory.annotation.Autowired;
</span><span class='line'>import org.springframework.context.annotation.Bean;
</span><span class='line'>import org.springframework.context.annotation.Configuration;
</span><span class='line'>
</span><span class='line'>@Configuration
</span><span class='line'>public class MqClientConfig {
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    @Autowired
</span><span class='line'>    ConnectionFactory connectionFactory;
</span><span class='line'>
</span><span class='line'>    final static String queueName = "reply";
</span><span class='line'>
</span><span class='line'>    @Bean
</span><span class='line'>    public Queue responseQueue() {
</span><span class='line'>        return new Queue(queueName);
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    @Bean
</span><span class='line'>    public RabbitTemplate amqpTemplate() {
</span><span class='line'>        RabbitTemplate rabbitTemplate = new RabbitTemplate(connectionFactory);
</span><span class='line'>        rabbitTemplate.setReplyQueue(responseQueue());
</span><span class='line'>        return rabbitTemplate;
</span><span class='line'>    }
</span><span class='line'>    @Bean
</span><span class='line'>    public SimpleMessageListenerContainer clientMessageListenerContainer() {
</span><span class='line'>        SimpleMessageListenerContainer container = new SimpleMessageListenerContainer();
</span><span class='line'>        container.setConnectionFactory(connectionFactory);
</span><span class='line'>        container.setQueues(responseQueue());
</span><span class='line'>        container.setMessageListener(amqpTemplate());
</span><span class='line'>
</span><span class='line'>        return container;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h1>server</h1>

<p>server 的部分同樣需要 ConnectionFactory connectionFactory，跟  client 一樣，這邊不多說明，除了 connectionFactory，第一步要定義的是 server 所要消化的對列，也就是上圖中的 rpc_queue，我們將隊列命名為 spring-boot 如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@Autowired
</span><span class='line'>ConnectionFactory connectionFactory;
</span><span class='line'>
</span><span class='line'>final static String queueName = "spring-boot";
</span><span class='line'>
</span><span class='line'>@Bean
</span><span class='line'>Queue queue() {
</span><span class='line'>    return new Queue(queueName, false);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>我們需要一個類別來處理由 rpc_queue 傳入的訊息，並且定義一旦接收到 message 之後，要呼叫哪個函式，透過 MessageListenerAdapter 來幫我們完成：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@Bean
</span><span class='line'>AmqpController receiver() {
</span><span class='line'>    return new AmqpController();
</span><span class='line'>}
</span><span class='line'>@Bean
</span><span class='line'>MessageListenerAdapter listenerAdapter(AmqpController receiver) {
</span><span class='line'>    return new MessageListenerAdapter(receiver, "receiveMessage");
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>AmqpController 是我們要處理 message 的類別，而 <code>MessageListenerAdapter(receiver, "receiveMessage");</code>這一句表示，一旦接收到訊息，要呼叫 receiver 物件中所定義的 <code>receiveMessage</code> 方法， AmqpController 程式碼如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>import goinfo.service.ApiFecadeService;
</span><span class='line'>import org.springframework.beans.factory.annotation.Autowired;
</span><span class='line'>
</span><span class='line'>public class AmqpController {
</span><span class='line'>
</span><span class='line'>    @Autowired
</span><span class='line'>    private ApiFecadeService apiFecadeService;
</span><span class='line'>
</span><span class='line'>  public String receiveMessage(String message) {
</span><span class='line'>        return apiFecadeService.excute(apiFecadeService, message);
</span><span class='line'>    }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>可以看到我們定義了 receiveMessage method，所傳入的 message 將透過 MessageListenerAdapter 傳入，return 的部份就是要傳入 reply 隊列的內容。</p>

<p>這邊不得不補充一下，自己在研究時，一直想不透到底要怎麼將處理的結果回傳給 reply，因為 spring AMQP 官方的範例是最單純的有去沒回的模式，因此在宣告 receiveMessage 是  void 而不是 String，嘗試許多方法，靈機想說該不會直接 return 就會傳給 reply，果不其然&#8230;就是這麼簡單！</p>

<p>一旦 MessageListenerAdapter 設定好，我們同樣需要設定 SimpleMessageListenerContainer，該物件的建立同樣需要 ConnectionFactory 作為存取隊列的依據，與 client 類似，但不一樣的是隊列對象是 rpc_queue，而訊息的處理交由 MessageListenerAdapter 傳入 AmqpController，設定如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@Bean
</span><span class='line'>SimpleMessageListenerContainer serverMessageListenerContainer(MessageListenerAdapter listenerAdapter) {
</span><span class='line'>    SimpleMessageListenerContainer container = new SimpleMessageListenerContainer();
</span><span class='line'>    container.setConnectionFactory(connectionFactory);
</span><span class='line'>    container.setQueues(queue());
</span><span class='line'>    container.setMessageListener(listenerAdapter);
</span><span class='line'>    return container;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>完整的程式如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package goinfo.cfg;
</span><span class='line'>
</span><span class='line'>import goinfo.web.AmqpController;
</span><span class='line'>import org.springframework.amqp.core.Queue;
</span><span class='line'>import org.springframework.amqp.rabbit.connection.ConnectionFactory;
</span><span class='line'>import org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer;
</span><span class='line'>import org.springframework.amqp.rabbit.listener.adapter.MessageListenerAdapter;
</span><span class='line'>import org.springframework.beans.factory.annotation.Autowired;
</span><span class='line'>import org.springframework.context.annotation.Bean;
</span><span class='line'>import org.springframework.context.annotation.Configuration;
</span><span class='line'>
</span><span class='line'>@Configuration
</span><span class='line'>public class MqServerConfig {
</span><span class='line'>
</span><span class='line'>    @Autowired
</span><span class='line'>    ConnectionFactory connectionFactory;
</span><span class='line'>
</span><span class='line'>    final static String queueName = "spring-boot";
</span><span class='line'>
</span><span class='line'>    @Bean
</span><span class='line'>    Queue queue() {
</span><span class='line'>        return new Queue(queueName, false);
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    @Bean
</span><span class='line'>    AmqpController receiver() {
</span><span class='line'>        return new AmqpController();
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    @Bean
</span><span class='line'>    MessageListenerAdapter listenerAdapter(AmqpController receiver) {
</span><span class='line'>        return new MessageListenerAdapter(receiver, "receiveMessage");
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    @Bean
</span><span class='line'>    SimpleMessageListenerContainer serverMessageListenerContainer(MessageListenerAdapter listenerAdapter) {
</span><span class='line'>        SimpleMessageListenerContainer container = new SimpleMessageListenerContainer();
</span><span class='line'>        container.setConnectionFactory(connectionFactory);
</span><span class='line'>        container.setQueues(queue());
</span><span class='line'>        container.setMessageListener(listenerAdapter);
</span><span class='line'>        return container;
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>如此就完成 client 與 server 端的設定，可以開始實際使用。</p>

<p>另外在 MQ 的運行中還有一個很重要的參與者名為 exchange，若有需要也可以透過下面的程式碼綁定：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@Bean
</span><span class='line'>TopicExchange exchange() {
</span><span class='line'>    return new TopicExchange("spring-boot-exchange");
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>@Bean
</span><span class='line'>Binding binding(Queue queue, TopicExchange exchange) {
</span><span class='line'>    return BindingBuilder.bind(queue).to(exchange).with(queueName);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>沒有設定也沒有關係，spring boot 會幫你設定好預設為 server 的 queue 名稱加上 -exchange，此例來說就是 spring-boot-exchange。</p>

<h2>範例訊息送出與接收</h2>

<p>在這裡我們建立一個 TestController 進行訊息的組成在透過一開始在 client 說明中建立的 AmqpTemplete 將訊息送出，如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import org.springframework.amqp.rabbit.core.RabbitTemplate;
</span><span class='line'>import org.springframework.beans.factory.annotation.Autowired;
</span><span class='line'>
</span><span class='line'>@Controller
</span><span class='line'>public class TestController {
</span><span class='line'>
</span><span class='line'>    @Autowired
</span><span class='line'>    RabbitTemplate amqpTemplate;
</span><span class='line'>    public String sendMsg() {
</span><span class='line'>        Object o = amqpTemplate.convertSendAndReceive("spring-boot", "{test: 'OK'}");
</span><span class='line'>        return result;
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>最後再整理一下整個執行的過程：</p>

<ol>
<li>使用 amqpTemplate 所提供的 convertSendAndReceive，表示送出訊息後要等待接收 reply</li>
<li>透過該函式將訊息送到指定的隊列名稱為 <code>spring-boot</code>，透過 connectionFactory 將訊息傳給 rpc_quene</li>
<li>Server 端的  serverMessageListenerContainer，一發現 rpc_quene 有新的訊息，就會把訊息傳給 listenerAdapter，交由 AmqpController 處理</li>
<li>一旦 AmqpController 的 receiveMessage 函式處理完成後，將處理結果 return</li>
<li>此時 serverMessageListenerContainer 根據從 amqpTemplate 送出訊息裡包含的 <a href="http://stackoverflow.com/questions/18403623/rabbitmq-amqp-basicproperties-builder-values">BasicProperties</a> 知道要回傳到隊列 reply</li>
<li>一旦隊列 reply 有了新訊息，client 的 clientMessageListenerContainer 監控到 reply 新的訊息需要處理，根據 clientMessageListenerContainer 綁定的 MessageListener 對象為一開始發出訊息的 amqpTemplate，將處理結果傳入，回到原點，完成整個交易過程。</li>
</ol>


<p>最後附上在 MQ server 控制頁的模型圖示：</p>

<p><img src="https://lh6.googleusercontent.com/-rhWN2FC7ceo/Us9gs33fNeI/AAAAAAAAMBQ/oU231Uq9gP8/s0/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2014-01-10+%E4%B8%8A%E5%8D%8810.52.55.png" title="螢幕快照 2014-01-10 上午10.52.55.png" alt="enter image description here" /></p>

<p>若是以 rabbit MQ server 角度來看，當你送出訊息時，訊息會送到與 spring-boot 隊列成對的 exchange，spring-boot-exchange 綁定了 spring-boot 與 reply 隊列。</p>

<p>上圖中的藍色線就是當你送出 message 時會出現代表有新訊息傳入，在交由 exchange 去分派到對應的隊列。</p>

<p>寫了很多，希望可以幫助到需要的朋友。</p>
<p><a rel="bookmark" href="http://smlsun.com/blog/2014/01/19/rabbit-MQ-Spring-boot/"></a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[rabbit MQ 使用者建立與權限設定]]></title>
<link href="http://smlsun.com/blog/2014/01/19/rabbit-MQ/"/>
<updated>2014-01-19T00:00:00+08:00</updated>
<id>http://smlsun.com/blog/2014/01/19/rabbit-MQ</id>

      <content type="html"><![CDATA[<p>安裝 rabbit MQ 非常簡單，<a href="https://www.rabbitmq.com/download.html">官方就有介紹</a>，安裝完成後，可以透過指令 <code>rabbitmq-server</code> 來啟動 MQ server。</p>

<p>一旦安裝完成，可透過下面網址進入控管 MQ server 的主控台：</p>

<p><code>http://localhost:15672/</code></p>

<p>在瀏覽器輸入上述網址後，預設帳號密碼為 <code>guest/guest</code>，登入後會看到畫面如下：</p>

<p><img src="https://lh5.googleusercontent.com/-QLG8IN_RDtI/Ur0lQZP-imI/AAAAAAAAL70/2N3Rb4O1pCQ/s0/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-12-27+%E4%B8%8B%E5%8D%882.58.50.png" title="螢幕快照 2013-12-27 下午2.58.50.png" alt="enter image description here" /></p>

<p>主要頁面呈現了關於 MQ server 目前的狀態，包括隊列的情形，環境參數等，有需要可以點選看看，本篇要說明的是如何建立或改變使用者帳號。</p>

<h4>建立或改變使用者帳號</h4>

<ol>
<li><p>點選上圖中導覽列的 Admin 會進入下面的畫面</p>

<p> <img src="https://lh3.googleusercontent.com/-cvd7yKB403c/Ur0lrKf1LyI/AAAAAAAAL8A/ZUd-FF8KvXY/s0/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-12-27+%E4%B8%8B%E5%8D%883.00.39.png" title="螢幕快照 2013-12-27 下午3.00.39.png" alt="enter image description here" /></p></li>
<li><p>點選 add a user 就可以輸入要新增的帳號</p>

<p> <img src="https://lh4.googleusercontent.com/-jOyv6P2vvO8/Ur0mGS9N5VI/AAAAAAAAL8M/H73RkFTDZ8c/s0/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-12-27+%E4%B8%8B%E5%8D%883.02.24.png" title="螢幕快照 2013-12-27 下午3.02.24.png" alt="enter image description here" /></p></li>
<li><p>輸入完成後，可以看到如下圖：</p>

<p> <img src="https://lh4.googleusercontent.com/-fCYZHvcrbI0/Ur0mVLaKgdI/AAAAAAAAL8c/DSXoXMqtKZQ/s0/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-12-27+%E4%B8%8B%E5%8D%883.03.26.png" title="螢幕快照 2013-12-27 下午3.03.26.png" alt="enter image description here" /></p>

<p> 表示使用者新增完成。</p></li>
<li><p>接著設定存取權限，所以接著點選上圖表格中 Name 欄位的 admin，進入下面畫面：</p>

<p> <img src="https://lh5.googleusercontent.com/-yeuQj-nJAHY/Ur0m4_r0bJI/AAAAAAAAL8s/EJEkATgSeeY/s0/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-12-27+%E4%B8%8B%E5%8D%883.05.38.png" title="螢幕快照 2013-12-27 下午3.05.38.png" alt="enter image description here" /></p>

<p> 預設為全部允許，如此一來就可以透過設定好的帳號密碼來進行控管。</p></li>
</ol>

<p><a rel="bookmark" href="http://smlsun.com/blog/2014/01/19/rabbit-MQ/"></a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Window 設定：開機自動執行程式或 *.bat 不需登入，以啟動 spring-boot 應用程式為例，加映 command line 就能搞定的 geek 版]]></title>
<link href="http://smlsun.com/blog/2014/01/19/Window/"/>
<updated>2014-01-19T00:00:00+08:00</updated>
<id>http://smlsun.com/blog/2014/01/19/Window</id>

      <content type="html"><![CDATA[<p>使用 spring-boot 的好處之一，不需要額外安裝 tomcat，也不需要包成 war 檔進行 deploy，我們可以直接包成 jar 檔之後透過比如下面的指令進行啟動服務：<code>java -jar service-1.0.0.jar</code>，可以這麼做的原因是 spring-boot 使用 tomcat-embed 作為 service，所以可以直接使用 jar 運行，作為 server 啟動。</p>

<p>完整的啟動 bat 內容如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>set JAVA_HOME=E:\service\Java\jdk1.7.0_45
</span><span class='line'>set JAVA_JRE=E:\service\Java\jre7
</span><span class='line'>java -jar service-1.0.0.jar</span></code></pre></td></tr></table></div></figure>


<p>設定好 JAVA_HOME 以及 JAVA_JRE 即可不受 window 自動更新 JDK 造成相容性問題，最後再執行 <code>java -jar service-1.0.0.jar</code> 即可啟動服務。</p>

<p>當程式開發好之後，實際發佈到主機作為 production 運行時，我們不希望偶爾的 window 自動更新重啟時造成服務未開啟，讓客戶錯以為系統有問題，在 window 底下最簡單的自動啟動指定的應用程式是將捷徑放置於開始功能列中的 [<code>啟動</code>] 資料夾，這樣的作法有幾個問題：</p>

<ol>
<li>需要登入才會觸動，所以若是自動更新重啟沒有登入也是沒效</li>
<li>若有遠端登入也會啟動，造成重覆開啟</li>
</ol>


<p>我們可以用另外一種設定方式來進行透過 [工作排程器]，步驟如下：</p>

<ol>
<li><p>啟動工作排程器
 <img src="https://lh6.googleusercontent.com/-sY2DBkcNQmg/UteGzqS4V0I/AAAAAAAAMCc/a3jB0bIxGhE/s0/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2014-01-16+%E4%B8%8B%E5%8D%882.52.44.png" title="螢幕快照 2014-01-16 下午2.52.44.png" alt="enter image description here" /></p></li>
<li><p>建立基本工作
 <img src="https://lh6.googleusercontent.com/-GvMx7nrfvHk/UteG_RMFp8I/AAAAAAAAMCo/k4R8KaF-EJ8/s0/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2014-01-16+%E4%B8%8B%E5%8D%882.53.13.png" title="螢幕快照 2014-01-16 下午2.53.13.png" alt="enter image description here" /></p></li>
<li><p>定義服務名稱
 <img src="https://lh5.googleusercontent.com/-sijmvNua4Ik/UteHI0q2lsI/AAAAAAAAMC0/jhZ7yxP6UH8/s0/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2014-01-16+%E4%B8%8B%E5%8D%882.53.46.png" title="螢幕快照 2014-01-16 下午2.53.46.png" alt="enter image description here" /></p></li>
<li><p>定義啟動時機
 <img src="https://lh3.googleusercontent.com/-8NGvtH4yfog/UteI1fvaaxI/AAAAAAAAMDo/sW64MwnYkZw/s0/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2014-01-16+%E4%B8%8B%E5%8D%883.20.49.png" title="螢幕快照 2014-01-16 下午3.20.49.png" alt="enter image description here" /></p></li>
<li><p>選擇工作類型，選擇啟動程式
 <img src="https://lh4.googleusercontent.com/-z0JtzmxDECc/UteHSqKqU9I/AAAAAAAAMDA/SySPxMM9bfg/s0/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2014-01-16+%E4%B8%8B%E5%8D%882.54.16.png" title="螢幕快照 2014-01-16 下午2.54.16.png" alt="enter image description here" /></p></li>
<li><p>選擇要執行的 bat 檔
 <img src="https://lh3.googleusercontent.com/-PUmGanA4O7w/UteI9opVxdI/AAAAAAAAMD0/SEWz5gr0p5k/s0/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2014-01-16+%E4%B8%8B%E5%8D%883.21.23.png" title="螢幕快照 2014-01-16 下午3.21.23.png" alt="enter image description here" /></p></li>
</ol>


<p>如此一來，系統就會在啟動時執行目標工作啦，記得要寫 log，因為這樣的運行模式下沒有 console 視窗，有任何異常都要從 log 檔查看。</p>

<p>同場加映：</p>

<p>宏大 <a href="http://blog.lyhdev.com/">lyhcode</a> 詢問：</p>

<blockquote><p>有沒有用 command line 就能搞定的 geek 版？</p></blockquote>

<p>感謝 <a href="http://www.dotblogs.com.tw/jamesfu/">jamesFu</a> 大師解答：</p>

<blockquote><p>schtask /create /sc onstart /tn Service /tr &#8220;E:\service\run.bat&#8221; /ru</p></blockquote>
<p><a rel="bookmark" href="http://smlsun.com/blog/2014/01/19/Window/"></a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Spring Security: oauth2 運作原理解析筆記]]></title>
<link href="http://smlsun.com/blog/2014/01/19/Spring-Security-oauth2/"/>
<updated>2014-01-19T00:00:00+08:00</updated>
<id>http://smlsun.com/blog/2014/01/19/Spring-Security-oauth2</id>

      <content type="html"><![CDATA[<p>繼上一篇 <a href="http://blog.smlsun.com/2013/12/spring-security-basic-authentication.html">Spring Security Basic Authentication with Ajax request 失敗處理</a>，說明關於如何在 Spring Security 設定 Basic Authentication 以及透過 ajax 來進行資料請求後，這篇要來說明如何使用目前各大網站常用的 oauth 驗證機制。</p>

<p>關於 oauth 的特性網路上有很多不錯的文章，推薦大家先閱讀：</p>

<h2><a href="http://www.im47.cn/post/2012/08/2012-08-04-oauth2">OAuth原理初探</a></h2>

<p>這篇有很詳細的圖文解說，最後還有關於 OAuth 和 OpenID 的區別:</p>

<blockquote><p>OAuth 關注的是授權，即：“用戶能做什麼”；而 OpenID 關注的是證明，即：“用戶是誰”。</p></blockquote>

<h2><a href="http://www.techiekernel.com/2013/02/oauth2-in-simple-way.html">OAuth2 - In a Simple Way</a></h2>

<p>這篇是英文，但在解釋 oauth 使用時機有較精準的說明:</p>

<blockquote><p>OAuth 2 provides several grant types for different use cases. The grant types defined are:</p>

<ol>
<li>Authorization Code: for apps running on a web server</li>
<li>Implicit: for browser-based or mobile apps</li>
<li>Password: for logging in with a username and password</li>
<li>Client credentials: for application access</li>
</ol>
</blockquote>

<p>可以看到 oauth 提供了各種不同狀況的應用的驗證機制，算是很完整的安全機制，另外在文中還有針對每種驗證方式提供 curl 或是 網址的驗證流程，上述兩篇文章的閱讀可以充分了解 oauth 是什麼。</p>

<h2><a href="http://cscarioni.blogspot.tw/2013/04/pro-spring-security-and-oauth-2.html">Pro Spring Security and OAUTH 2</a></h2>

<p>這邊講的就是實作啦，沒有看過上面兩篇會不知道他在幹嘛，建議可以依序在看到這一篇，該作者為 <a href="http://it-ebooks.info/book/2364/">Pro Spring Security</a> (連結可下載原文 pdf) 的作者，對於 Spring Security 的實作細節有很詳盡的說明，在書中並未包含 oauth 的說明該文章算是補足 oauth 的說明，且說明的是 oauth2 的規範，簡單來說 oauth2 簡化了 oauth，在實作上更加簡單。</p>

<p>該文章範例程式碼：<code>https://github.com/spring-projects/spring-security-oauth</code>，下載之後取出 1.0.1 版<code>git checkout 1.0.1.RELEASE</code>，在專案根目錄使用 maven，在 command 執行 <code>mvn clean install -P bootstrap</code>，將會在該專案底下的 sample 各資料夾底下 target 資料夾找到各別的 war 檔，如此就可以將 war 檔放至於 tomcat 下運行。</p>

<p>整個文章讀下來幾個比較重要的步驟說明筆記如下</p>

<h3>Tonr 之 OAuth2ClientContextFilter 過濾處理</h3>

<ol>
<li>當登入網頁需要驗證時</li>
<li>登入失敗時</li>
<li>已驗證通過會透過該 filter 到達 SparklrServiceImpl</li>
</ol>


<h3>SparklrServiceImpl 將實作存取 Sparklr 相關方法</h3>

<ol>
<li>呼叫後端 Sparklr 取得使用者特有的圖片</li>
<li>透過使用 RestOperations(OAuth2RestTemplate)取得 Sparklr 上的圖片</li>
</ol>


<h3>取得 Access Token</h3>

<ol>
<li>需要先取得 Access Token，一旦取得會存於 DefaultOAuth2ClientContext</li>
<li>一開始 DefaultOAuth2ClientContext 尚未有 Access Token 時，會從 DefaultOAuth2ClientContext 取得 AccessTokenRequest，兩者當 Spring 啟動時會自動設定，透過 bean 定義 <code>&lt;oauth:rest-template resource="sparklr" /&gt;</code> 傳給 RestTemplateBeanDefinitionParser。</li>
<li>接著在從呼叫 AccessTokenProvider 取的 Token</li>
<li>將會被 AccessTokenRequest 以及 AuthorizationCodeResourceDetails 呼叫 AccessTokenProviderChain 中的 obtainAccessToken 方法。</li>
<li>其中 AuthorizationCodeResourceDetails 定義如下，將在動時透過 ResourceBeanDefinitionParser 解析</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;oauth:resource id="sparklr" type="authorization_code" client-id="tonr" client-secret="secret"
</span><span class='line'>                access-token-uri="${accessTokenUri}" user-authorization-uri="${userAuthorizationUri}" scope="read,write" /&gt;
</span><span class='line'>&lt;oauth:rest-template resource="sparklr" /&gt;</span></code></pre></td></tr></table></div></figure>


<h3>取得 Authorization Code Access Token</h3>

<ol>
<li>AccessTokenProviderChain 的 obtainAccessToken 方法將透過 設定 AccessTokenProvider 實體來取的 token，指的就是 AuthorizationCodeAccessTokenProvider</li>
<li>AuthorizationCodeAccessTokenProvider 將透過 POST 呼叫 <code>http://localhost:8080/sparklr2/oauth/authorize</code> 取得驗證碼</li>
<li>sparklr2 其中 <code>/sparklr2/oauth/authorize</code> 將定義於 FilterSecurityInterceptor</li>
<li><p>一旦 FilterSecurityInterceptor 發現沒有權限登入將會將頁面導入 <code>http://localhost:8080/sparklr2/login.jsp</code>，設定如下：</p>

<p>&#8220;`
<http access-denied-page="/login.jsp?authorization_error=true" disable-url-rewriting="true" xmlns="http://www.springframework.org/schema/security"></p>

<pre><code>&lt;intercept-url pattern="/oauth/**" access="ROLE_USER" /&gt;
&lt;intercept-url pattern="/**" access="IS_AUTHENTICATED_ANONYMOUSLY" /&gt;
&lt;form-login authentication-failure-url="/login.jsp?authentication_error=true" default-target-url="/index.jsp" login-page="/login.jsp" login-processing-url="/login.do" /&gt;
&lt;logout logout-success-url="/index.jsp" logout-url="/logout.do" /&gt;
&lt;anonymous /&gt;
</code></pre>

<p></http>
&#8220;`</p></li>
<li>redirect 到 login 頁面將會被 Tonr 的 AuthorizationCodeAccessTokenProvider 接收並且被 UserRedirectRequiredException 擷取並且丟出由 Oauth2ClientContextFilter 處理，加入額外的參數 <code>http://localhost:8080/sparklr2/login.jsp?response_type=code&amp;client_id=tonr&amp;scope=read+write&amp;state=dWby7l&amp;redirect_uri=http%3A%2F%2Flocalhost%3A8080%2Ftonr2%2Fsparklr%2Fphotos</code>，如此就可以開始進行登入</li>
</ol>


<h3>進行登入取得 USER ROLE</h3>

<ol>
<li>登入步驟請參考原文</li>
<li>一旦取得 role ROLE_USER 將會再次導入之前的網址 <code>/sparklr2/oauth/authorize</code></li>
<li><p>該網址一旦安裝 core Spring Security OAuth project，透過下述設定就會產生該 endpoint</p>

<p> &#8220;`
 &lt;oauth:authorization-server client-details-service-ref=&#8221;clientDetails&#8221; token-services-ref=&#8221;tokenServices&#8221;</p>

<pre><code> user-approval-handler-ref="userApprovalHandler"&gt;
 &lt;oauth:authorization-code /&gt;
 &lt;oauth:implicit /&gt;
 &lt;oauth:refresh-token /&gt;
 &lt;oauth:client-credentials /&gt;
 &lt;oauth:password /&gt;
</code></pre>

<p> &lt;/oauth:authorization-server>
 &#8220;`</p></li>
<li>其中 AuthorizationEndpoint 對應  <code>/oauth/authorize</code></li>
</ol>


<h3>透過 AuthorizationEndpoint 取得 CLIENT ROLE</h3>

<p>關於登入者可執行的操作將透過 InMemoryClientDetailsService 取得，該物件將讀取設定如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;oauth:client-details-service id="clientDetails"&gt;
</span><span class='line'>
</span><span class='line'>    &lt;oauth:client client-id="my-trusted-client" authorized-grant-types="password,authorization_code,refresh_token,implicit" authorities="ROLE_CLIENT, ROLE_TRUSTED_CLIENT" scope="read,write,trust" access-token-validity="60" /&gt;
</span><span class='line'>    ...    
</span><span class='line'>    &lt;oauth:client client-id="my-untrusted-client-with-registered-redirect" authorized-grant-types="authorization_code" authorities="ROLE_CLIENT" redirect-uri="http://anywhere" scope="read" /&gt;
</span><span class='line'>    
</span><span class='line'>    &lt;oauth:client client-id="tonr" resource-ids="sparklr" authorized-grant-types="authorization_code,implicit" authorities="ROLE_CLIENT" scope="read,write" secret="secret" /&gt;
</span><span class='line'>&lt;/oauth:client-details-service&gt;</span></code></pre></td></tr></table></div></figure>


<p>這裡就是 oauth 與一般使用者驗證的差別，定義的是可對 resource 的操作有哪些如 <code>read,write,trust</code>，這邊的權限設定沒有 user 的概念，只有 server 對不同 client-id 與有無 secret 的差別對 client 提供的功能有哪些，一旦確認有存在於設定檔將會取得 ClientDetails 物件。</p>

<h3>sparklr 請使用者確認是否允許該存取</h3>

<p>一旦確認 AuthorizationRequest 有取得 ClientDetails 物件，將會在被導入 <code>/oauth/confirm_access</code> 該網址的實作必須由我們自己開發的應用程式來實作，也就是 Sparklr 中的 AccessConfirmationController 進而顯示 <code>access_confirmation.jsp</code>，讓使用者確認是否允許存取</p>

<h3>確認允許，透過 PhotoController 取得照片</h3>

<p>一旦點選允許將發生下面的事情：</p>

<ol>
<li>確認 AuthorizationRequest 是有效可進行存取的。</li>
<li>透過呼叫 AuthorizationRequest 的 getResponseTypes 取得 code，不是 token</li>
<li>framework 會產生新的 authorization code，交由 approveOrDeny 方法完成之後的事情，將會從 Sparklr 導回 tonr，實際的範例網址為 <code>http://localhost:8080/tonr2/sparklr/photos;jsessionid=03B2E814391E010B3D1210241ECF6C0A?code=vqMbuf&amp;state=aTSlVl</code></li>
<li><p>OAuth2RestTemplate 與 AuthorizationCodeAccessTokenProvider 結合，從 Sparklr 取得 token，實際上，將會 request <code>/sparklr/oauth/token</code>包含下列參數：</p>

<p> &#8220;`
 {</p>

<pre><code> grant_type=’authorization_code’,
 redirect_uri=’http://localhost:8080/tonr2/sparklr/photos’,
 code=xxxx
</code></pre>

<p> }
 &#8220;`</p></li>
<li>該次呼叫會被 <code>org.springframework.security.oauth2.provider.endpoint.TokenEndpoint</code> 處理產生 OAuth2AccessToken 並且 response Bearer token。</li>
<li>一旦取得 token，Tonr 會再一次呼叫 Sparklr，這次將會傳入取得的 Bearer token 於該次請求的 header</li>
<li>透過 OAuth2AuthenticationProcessingFilter 解開 token 在由 Oauth2AuthenticationManager 確認該請求是否合法。</li>
<li>一旦確認無誤，終於可以到達 PhotoController 取得照片的資源。</li>
</ol>


<p>步驟很多，也許有說明不清楚的地方，不過確實把 oauth 的運作詳細走過一遍，希望可以幫助到有需要的人，上述範例是使用 xml 來定義安全性相關的設定，下一篇將進一步說明使用 spring-boot 透過 java config(java 物件)來定義 oauth 過程會精簡很多，筆者也是先瞭解最基本得 xml 設定，才能完成 java config 型式的應用，若有需要，可以先參考下列專案，利用 java config 完成 Spring Security 設定：</p>

<ul>
<li><a href="https://github.com/spring-projects/spring-security-javaconfig">Spring Security Java Config</a>: 各種使用 java config 的安全性設定</li>
<li><a href="https://github.com/spring-projects/spring-security-oauth-javaconfig">spring-security-oauth-javaconfig</a>: 針對 oauth 的 java config 設定，算是還在概念階段</li>
</ul>

<p><a rel="bookmark" href="http://smlsun.com/blog/2014/01/19/Spring-Security-oauth2/"></a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Spring Security Basic Authentication with Ajax request 失敗處理]]></title>
<link href="http://smlsun.com/blog/2014/01/19/Spring-Security-Basic-Authentication-with-Ajax-request/"/>
<updated>2014-01-19T00:00:00+08:00</updated>
<id>http://smlsun.com/blog/2014/01/19/Spring-Security-Basic-Authentication-with-Ajax-request</id>

      <content type="html"><![CDATA[<p>當你在製作一個 rest service，提供 API 另外部的程式存取，比如說網頁中的 ajax request，且必須要有基本的安全性防護，在 java base 底下我們可以引入 Spring Security 來幫我們處理安全性的大小事。</p>

<p>關於安全性驗證的方式，可參考官方的文件:<a href="http://docs.spring.io/spring-security/site/docs/3.0.x/reference/introduction.html">Spring Security doc</a></p>

<p>基於 rest service 的特性，既然是提供給第三方軟體呼叫，我們就不希望還需要 login 頁面來登入 rest service，可以的話當然希望在進行請求時就驗證存取權限，所以我們需要使用的是 <a href="http://docs.spring.io/spring-security/site/docs/3.0.x/reference/basic.html">Basic Authentication</a>。</p>

<p>簡單來說 Basic Authentication 就是將驗證資訊透過 http headers 傳遞，交由 server 驗證之後，返回通過或失敗，範例的 request 呼叫如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function make_base_auth(user, password) {
</span><span class='line'>    var tok = user + ':' + password;
</span><span class='line'>    var hash = $.base64.encode(tok);
</span><span class='line'>    return "Basic "+hash;
</span><span class='line'>}
</span><span class='line'>$.ajax("http://localhost:8080/test/sendMsg", {
</span><span class='line'>    type: "GET",
</span><span class='line'>    success: function(){
</span><span class='line'>        alert("OK");
</span><span class='line'>    },
</span><span class='line'>    xhrFields: {
</span><span class='line'>        withCredentials: true
</span><span class='line'>    }, 
</span><span class='line'>    beforeSend: function (xhr) {
</span><span class='line'>        xhr.setRequestHeader('Authorization', 
</span><span class='line'>            make_base_auth("user", "password"));
</span><span class='line'>    }
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>其中 Authorization 的值必須以 Basic 開頭，接著將 username:password 透過 base64 編碼，上述 <code>make_base_auth("user", "password")</code> 回傳的內容為： <code>Basic dXNlcjpwYXNzd29yZA==</code>，並且需要設定 <code>withCredentials</code>，表示包含驗證資訊。</p>

<p>前端的呼叫程式準備好了以後，我們需要對後端的 http 網路存取權限進行設定，rest server 與呼叫端屬於 cross domain 的呼叫，因此需要設置 CorsFilter，如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@Component
</span><span class='line'>public class CorsFilter extends OncePerRequestFilter
</span><span class='line'>{
</span><span class='line'>
</span><span class='line'>    @Override
</span><span class='line'>    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
</span><span class='line'>            throws ServletException, IOException
</span><span class='line'>    {
</span><span class='line'>        response.addHeader("Access-Control-Allow-Origin", "http://192.168.0.100:8080");
</span><span class='line'>        response.addHeader("Access-Control-Allow-Methods", "HEAD, GET, POST, OPTIONS");
</span><span class='line'>        response.addHeader("Access-Control-Allow-Headers","Authorization, Content-Type, Origin, Accept");
</span><span class='line'>        response.addHeader("Access-Control-Max-Age", "1800");
</span><span class='line'>        response.addHeader("Access-Control-Allow-Credentials", "true");
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        filterChain.doFilter(request, response);
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>rest server 使用 <a href="http://projects.spring.io/spring-boot/">spring-boot</a> 製作，傳統建立 filter 時需要在維護 web.xml，在這裡只要註記為 <code>@Component</code>，且 <code>extends OncePerRequestFilter</code>，服務啟動時 spring 會自動配置 filter，透過設置 Access-Control-* 的相關屬性，我們可以限制對 server 的存取限制。</p>

<p>接著，我們需要定義 Security Config：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@EnableWebSecurity
</span><span class='line'>@Configuration
</span><span class='line'>public class SecurityConfig extends WebSecurityConfigurerAdapter {
</span><span class='line'>    @Override
</span><span class='line'>    protected void configure(HttpSecurity http) throws Exception {
</span><span class='line'>        http.authorizeRequests()
</span><span class='line'>                .antMatchers("/test/sendMsg").hasRole("USER")
</span><span class='line'>                .anyRequest().authenticated();
</span><span class='line'>        http.httpBasic();
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    @Override
</span><span class='line'>    protected void configure(AuthenticationManagerBuilder authManagerBuilder) throws Exception {
</span><span class='line'>        authManagerBuilder.inMemoryAuthentication()
</span><span class='line'>                .withUser("user").password("password").roles("USER");
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>在 <code>configure(HttpSecurity http)</code> 我們定義了 <code>/test/sendMsg</code> 的存取者必須要有 <code>USER</code> 的權限，且驗證方式使用 <code>Basic</code>；在 <code>configure(AuthenticationManagerBuilder authManagerBuilder)</code> 定義使用者帳號。</p>

<p>如此一來，程式算是準備好，我們可以利用 <code>curl</code> 指令來驗證：</p>

<p><code>curl --url http://localhost:8080/test/sendMsg -H 'Authorization: Basic dXNlcjpwYXNzd29yZA=='</code></p>

<p>可以正常取得 response，但是一旦我們透過 ajax 的方式存取，總會跳出下面的畫面：</p>

<p><img src="https://lh6.googleusercontent.com/-mUoOv_pKbzQ/UsJObr558rI/AAAAAAAAL9s/pni0SJbDEyQ/s0/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-12-31+%E4%B8%8B%E5%8D%8812.55.37.png" title="螢幕快照 2013-12-31 下午12.55.37.png" alt="enter image description here" /></p>

<p>這是我們不想要的，且與程式邏輯不符，畢竟我們在 CorsFilter 定義了允許 <code>Authorization</code> 的 header 卻沒有通過驗證，並且在 <code>curl</code> 的模式下是可正常存取。</p>

<p>且既然是提供給第三方軟體呼叫，對使用者而言，一定不知道遠端 rest server 的存取密碼，為了跳過這個帳號密碼驗證步驟，查了相關處理程式 <code>BasicAuthenticationEntryPoint</code> 的原始碼說明：</p>

<p><a href="http://git.springsource.org/~rwinch/spring-security/rwinchs-spring-security/blobs/bf9d4a97470c679008ef6ce42681e3d0c1992636/web/src/main/java/org/springframework/security/web/authentication/www/BasicAuthenticationEntryPoint.java">BasicAuthenticationEntryPoint.java</a></p>

<blockquote><p> Once a user agent is authenticated using BASIC authentication, logout requires that the browser be closed or an unauthorized (401) header be sent.</p></blockquote>

<p>也就是說預設的處理方式，一律會回傳 <code>unauthorized (401)</code>，處理的原始碼如下：</p>

<p>&#8220;
public void commence(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException)</p>

<pre><code>throws IOException, ServletException {
response.addHeader("WWW-Authenticate", "Basic realm=\"" + realmName + "\"");
response.sendError(HttpServletResponse.SC_UNAUTHORIZED, authException.getMessage());
</code></pre>

<p>}
&#8220;</p>

<p>所以無論你怎麼調整 CorsFilter 或是 ajax request 參數，就是沒有辦法通過 http 驗證，總是跳出 dialog 需要驗證帳號與密碼，檢查 request method 雖然設置的是 <code>GET</code> 但總是傳出 <code>OPTIONS</code>。</p>

<p>至於為什麼，可參考下列文章：</p>

<p><a href="http://stackoverflow.com/questions/11199426/jquery-cors-json-without-padding-and-authentication-issues">jQuery, CORS, JSON (without padding) and authentication issues</a></p>

<p>文中提到：</p>

<blockquote><p>Basically, because I need authentication, the GET request is sending an Authorization header. However, this is not a &#8220;simple&#8221; header, and so the browser is sending a pre-flight request (the OPTIONS). This preflight request doesn&#8217;t have any authentication, though, and so the server was rejecting it. The &#8220;solution&#8221; was to set the server to let OPTIONS request not require authentication, and report an HTTP status of 200 to it.</p>

<p>Reference: http://www.kinvey.com/blog/item/61-kinvey-adds-cross-origin-resource-sharing-cors</p></blockquote>

<p>也就是說，瀏覽器檢查有驗證資訊，就不是&#8221;簡單&#8221;的 http request，所以會先送出一個 pre-flight request，也就是 <code>OPTIONS</code>，該 OPTIONS 就不會有驗證資訊，以致於 server 就會拒絕請求，也就呼應為什麼 <code>curl</code> 的情況下可以正常請求，為了解決此問題，就必須要讓 server 能夠接受 OPTIONS 可包含 authentication 的 header 來進行驗證。</p>

<p>上述的說明在一開始看到時還不清楚處理邏輯，真要親身體驗才能了解，花了一天的時間的重覆嘗試，總算讓我找到解法，參考下列文章：</p>

<p><a href="https://github.com/davidtinker/grails-cors/issues/12">Basic Auth filter authenticates OPTIONS requests and breaks CORS</a></p>

<p>從上面關於瀏覽器對於&#8221;不簡單&#8221;的 request 的敘述，瀏覽器的處理流程會是：</p>

<ol>
<li>先送出一個 OPTIONS 的 request 進行驗證</li>
<li>如果 OPTIONS 的 request 不是回傳 401 UNAUTHORIZED 會接著送出在 ajax 定義的 http mathod 的 request</li>
</ol>


<p>會這樣處理，是因為瀏覽器預設是一旦檢查第一步驟沒有通過，就會跳出 dialog 請使用者輸入帳號密碼(開啟 withCredentials 的前提下)，一旦通過，就會將驗證資訊存於 cookies，接著進入第二步驟時，會將已存在 cookies 的驗證資訊加入到第二步驟的 header，之後再重覆請求時就會一直有效，直到 cookies 過期。</p>

<p>有這樣的認知後，在看上面連結中程式部分的解法時就比較能夠理解。</p>

<p>透過繼承 <code>BasicAuthenticationEntryPoint</code> 覆寫 <code>commence</code>，判斷如果是 <code>Preflight</code> 依據傳入的 http method 是否為 <code>OPTIONS</code> 來判斷，若是，則回傳 <code>HttpServletResponse.SC_NO_CONTENT</code>。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if(isPreflight(request)){
</span><span class='line'>    response.setStatus(HttpServletResponse.SC_NO_CONTENT);</span></code></pre></td></tr></table></div></figure>


<p>因為 OPTIONS 只是瀏覽器為了驗證進行的 request，並不是我們主要的 request 所以將其設為 SC_NO_CONTENT(204)，沒有內容，但沒有失敗，一旦瀏覽器接收到沒有失敗的情形，就會進行主要的 request 請求，此時主要的 request 就會包含 Authentication 的資訊，接著看下面一個判斷式。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if (isRestRequest(request)) {
</span><span class='line'>    response.sendError(HttpServletResponse.SC_UNAUTHORIZED, "Unauthorized");</span></code></pre></td></tr></table></div></figure>


<p>再來，這邊限制了如果有 <code>X-Requested-With ,XMLHttpRequest</code> 這樣的 header 就直接回傳 <code>SC_UNAUTHORIZED</code>(401)， 有沒有必要，就看服務的性質與需求，可以針對各種狀況，設定不允許存取的條件，最後其他狀況就走一般的處理模式了，完整的程式碼如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class AjaxAwareLoginUrlAuthenticationEntryPoint extends
</span><span class='line'>        BasicAuthenticationEntryPoint {
</span><span class='line'>
</span><span class='line'>    private static final RequestMatcher requestMatcher = new ELRequestMatcher(
</span><span class='line'>            "hasHeader('X-Requested-With','XMLHttpRequest')");
</span><span class='line'>
</span><span class='line'>    public CustomAuthenticationEntryPoint() {
</span><span class='line'>        super();
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    public CustomAuthenticationEntryPoint(String realmName) {
</span><span class='line'>        setRealmName(realmName);
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    @Override
</span><span class='line'>    public void commence(final HttpServletRequest request, final HttpServletResponse response, final AuthenticationException authException) throws IOException, ServletException {
</span><span class='line'>
</span><span class='line'>        if(isPreflight(request)){
</span><span class='line'>            response.setStatus(HttpServletResponse.SC_NO_CONTENT);
</span><span class='line'>        } else if (isRestRequest(request)) {
</span><span class='line'>            response.sendError(HttpServletResponse.SC_UNAUTHORIZED, "Unauthorized");
</span><span class='line'>        } else {
</span><span class='line'>            super.commence(request, response, authException);
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    /**
</span><span class='line'>     * Checks if this is a X-domain pre-flight request.
</span><span class='line'>     * @param request
</span><span class='line'>     * @return
</span><span class='line'>     */
</span><span class='line'>    private boolean isPreflight(HttpServletRequest request) {
</span><span class='line'>        return "OPTIONS".equals(request.getMethod());
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    /**
</span><span class='line'>     * Checks if it is a rest request
</span><span class='line'>     * @param request
</span><span class='line'>     * @return
</span><span class='line'>     */
</span><span class='line'>    protected boolean isRestRequest(HttpServletRequest request) {
</span><span class='line'>        return requestMatcher.matches(request);
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>一旦定義好 AuthenticationEntryPoint 在文章中的使用的方式是用 grails 的語法與定義檔：</p>

<blockquote><p>Open resources.groovy and add the following lines:</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>beans = {
</span><span class='line'>
</span><span class='line'>    basicAuthenticationEntryPoint(CustomAuthenticationEntryPoint) { bean -&gt;
</span><span class='line'>        realmName = 'Your Realm'
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>spring boot 的情形，我們只要修改一開始建立的 SecuityConfig：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@Override
</span><span class='line'>protected void configure(HttpSecurity http) throws Exception {
</span><span class='line'>
</span><span class='line'>    AjaxAwareLoginUrlAuthenticationEntryPoint ajaxAwareLoginUrlAuthenticationEntryPoint = new AjaxAwareLoginUrlAuthenticationEntryPoint();
</span><span class='line'>    ajaxAwareLoginUrlAuthenticationEntryPoint.setRealmName("testAp");
</span><span class='line'>    http.httpBasic().authenticationEntryPoint(ajaxAwareLoginUrlAuthenticationEntryPoint);
</span><span class='line'>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>新增客製的 <code>ajaxAwareLoginUrlAuthenticationEntryPoint</code>，設置 RealmName，並且加入 <code>httpBasic().authenticationEntryPoint</code> 即可，省去繁瑣的 xml 定義，程式更加的精簡。</p>

<p>實際執行，我們可以看到，一次 ajax 呼叫，有兩個 request：</p>

<p><img src="https://lh6.googleusercontent.com/--XnQ7f4ItTQ/UsKALIrzHOI/AAAAAAAAL-E/cbnNgTDJYP4/s0/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-12-31+%E4%B8%8B%E5%8D%883.53.51.png" title="螢幕快照 2013-12-31 下午3.53.51.png" alt="enter image description here" /></p>

<p>且第一次呼叫的 http method 為 OPTIONS，http code 為 204，第二次才是主要的 ajax request，在看下圖，為 header 資訊：</p>

<p><img src="https://lh4.googleusercontent.com/-JcEBuYSzsSY/UsKAneA8uuI/AAAAAAAAL-Q/s1Tlly239K4/s0/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-12-31+%E4%B8%8B%E5%8D%883.54.38.png" title="螢幕快照 2013-12-31 下午3.54.38.png" alt="enter image description here" /></p>

<p>可以看到 <code>Authorization</code> 已有存在 header，且 request 正常，已有正確執行 rest server 的服務。</p>

<p>這問題著實困擾了我好久，對於不是 IT 背景的我，理解花了好多時間，不過也總算對網路安全，還有驗證的方式，以及瀏覽器對於安全性驗證的處理邏輯有一定的認知，不過畢竟是新鮮的理解，如果有說錯還請不吝指教。</p>
<p><a rel="bookmark" href="http://smlsun.com/blog/2014/01/19/Spring-Security-Basic-Authentication-with-Ajax-request/"></a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Spring boot: 監控 memory useage & 執行 GC]]></title>
<link href="http://smlsun.com/blog/2014/01/19/Spring+boot-memory-useage/"/>
<updated>2014-01-19T00:00:00+08:00</updated>
<id>http://smlsun.com/blog/2014/01/19/Spring boot-memory-useage</id>

      <content type="html"><![CDATA[<p>參考下面連結：<a href="http://xantorohara.blogspot.tw/2013/11/spring-boot-memory-usage.html">Spring-boot memory usage</a></p>

<p>因為 spring boot 可使用 jar 檔直接運行，不需要打包成 war，也不需要實體 tomcat，實際上，spring boot 使用的是 embedded tomcat，整個專案打包後的大小非常小，使得記憶體可用空間也能夠更多。</p>

<p>文中利用下面的 controller 來輸出記憶體使用量：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import org.springframework.stereotype.Controller;
</span><span class='line'>import org.springframework.web.bind.annotation.RequestMapping;
</span><span class='line'>import org.springframework.web.bind.annotation.RequestMethod;
</span><span class='line'>import org.springframework.web.bind.annotation.ResponseBody;
</span><span class='line'>
</span><span class='line'>@Controller
</span><span class='line'>public class AdminController {
</span><span class='line'>
</span><span class='line'>    @RequestMapping(value = "/admin/mem", method = {RequestMethod.GET}
</span><span class='line'>            , produces = "text/html;charset=UTF-8")
</span><span class='line'>    @ResponseBody
</span><span class='line'>    public String mem() {
</span><span class='line'>        long max = Runtime.getRuntime().maxMemory();
</span><span class='line'>        long total = Runtime.getRuntime().totalMemory();
</span><span class='line'>        long free = Runtime.getRuntime().freeMemory();
</span><span class='line'>        long used = total - free;
</span><span class='line'>
</span><span class='line'>        return String.format("Memory:\n" +
</span><span class='line'>                "max: %,d bytes\n" +
</span><span class='line'>                "total: %,d bytes\n" +
</span><span class='line'>                "free: %,d bytes\n" +
</span><span class='line'>                "used: %,d bytes\n",
</span><span class='line'>                max, total, free, used);
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    @RequestMapping(value = "/admin/rungc" , method = RequestMethod.GET)
</span><span class='line'>    @ResponseBody
</span><span class='line'>    public String rungc() {
</span><span class='line'>        Runtime.getRuntime().gc();
</span><span class='line'>        return "Run GC finish";
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>自己的專案，包含了 spring security、jdbc、rest service、以及 rabbitmq client
執行的結果如下：</p>

<blockquote><p>剛啟動時記憶體使用量
(http://localhost:8080/admin/mem):
max:    1,908,932,608 bytes
total:    372,768,768 bytes
free:     274,485,040 bytes
used:      98,283,728 bytes</p></blockquote>

<hr />

<blockquote><p>執行GC後的使用量
(http://localhost:8080/admin/rungc):
max: 1,908,932,608 bytes
total: 374,865,920 bytes
free:  346,690,128 bytes
used:   28,175,792 bytes</p></blockquote>

<p>還不賴！</p>
<p><a rel="bookmark" href="http://smlsun.com/blog/2014/01/19/Spring+boot-memory-useage/"></a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[SQL state [HY010]; error code [0]; Invalid state, the Connection object is closed 處理筆記]]></title>
<link href="http://smlsun.com/blog/2014/01/19/SQL-state-HY010/"/>
<updated>2014-01-19T00:00:00+08:00</updated>
<id>http://smlsun.com/blog/2014/01/19/SQL-state-HY010</id>

      <content type="html"><![CDATA[<p>之前曾經遇到過，最近又來了&#8230;</p>

<p>果然該還的還是要還，因此這次要詳細記錄處理過程，希望以後再發生可以更快釐清問題。</p>

<p>首先需要先確定發生可能原因，google 了一下目前比較明確的錯誤狀況如下：</p>

<ol>
<li>到了連線 timeout 時間</li>
<li>drive 的問題</li>
<li>或是 database server 被重啟</li>
</ol>


<p>我查了一下預設的 connection pool 的 timeout 時間有 30000 ms，所以第一項先不考慮。</p>

<p>drive 問題目前發生問題的是 jtds 1.3.1，有人說換換看 ms sql 所提供的 drive，在 sql 2008、O.S. 為 64 位元的情況會比較沒問題，well 姑且試試看。</p>

<p>檢視 database 的 log 記錄，似乎有重啟的狀況，如下圖：</p>

<p><img src="https://lh4.googleusercontent.com/-ZQwS21llDr4/Us0VNJxSjwI/AAAAAAAAMA4/BED3lh6m6vo/s0/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2014-01-08+%E4%B8%8B%E5%8D%885.05.15.png" title="螢幕快照 2014-01-08 下午5.05.15.png" alt="enter image description here" /></p>

<p>在持續觀察中發現確實隔天早上資料庫被重啟(os 重新啟動)，另外一個可調整的地方就是設置 connection pool 的 setTestOnBorrow：取出 pool 中的連線時進行驗證，若沒有通過則會在取出新的連線，這應該是我們要的參數，經過下列測試步驟：</p>

<h2>未設置 testOnBorrow 的情形</h2>

<ol>
<li>啟動服務，進行資料查詢正常</li>
<li>暫停 sql server</li>
<li>暫停中進行資料查詢，吐出訊息 <code>SQLServerException: Broken pipe</code></li>
<li>啟動 sql server</li>
<li>再次進行查詢，吐出訊息 <code>SQL state [null]; error code [0]; 連接已關閉</code></li>
</ol>


<h2>有設置 testOnBorrow 的情形</h2>

<ol>
<li>啟動服務，進行資料查詢正常</li>
<li>暫停 sql server</li>
<li>暫停中進行資料查詢，吐出訊息 <code>SQLServerException: Broken pipe</code></li>
<li>啟動 sql server</li>
<li>再次進行查詢，資料查詢正常</li>
</ol>


<p>這樣一來即使遠端連結的資料庫主機重啟，或是關閉的情形，一旦該主機重新上線，我們的應用程式也不用重開令 pool 重新連線，才不會總是鬼打牆，服務明明好好得但就是會出現連線異常，檢視遠端 db 主機也在線上，殊不知曾經被重啟過。</p>

<p>另外 testOnBorrow 需要搭配 validationQuery 使用，可參考下面連結：<a href="https://wiki.shibboleth.net/confluence/plugins/viewsource/viewpagesrc.action?pageId=4358588">Database Connectors</a>，最下方的 Database Reference Table 有各個不同 databse 的 validationQuery 可以參考。</p>

<p>一件落著！</p>

<p>不過我的測試案例出現的是 <code>SQL state [null];</code> 而不是 <code>SQL state [HY010];</code>，還是要在觀察一下。</p>

<p>若有朋友有關於此問題有處理經驗或建議，也請指教，感謝！</p>
<p><a rel="bookmark" href="http://smlsun.com/blog/2014/01/19/SQL-state-HY010/"></a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Grails migrations: database 的版本控管]]></title>
<link href="http://smlsun.com/blog/2014/01/19/Grails-migrations-database/"/>
<updated>2014-01-19T00:00:00+08:00</updated>
<id>http://smlsun.com/blog/2014/01/19/Grails-migrations-database</id>

      <content type="html"><![CDATA[<p>說到版本控管，就一定跟版本顯示，更新舊有版本有關，在程式碼部分使用版本控管已經習以為常，但通常一個應用程式或是專案從來就不只有程式碼，還有 datbase schema 的維護，偏偏 datbase 的版本升級沒有像程式碼控管那樣的簡單，也沒有類似 SVN 或是 GIT 的版本控管軟體。</p>

<p>不過，筆者最近在開發 grails 時發現了一個套件：<a href="http://grails.org/plugin/database-migration">Grails Database Migration Plugin</a>，其運作方式跟版本控管有異曲同工之妙，簡單但是有效的進行 datbase schema 版控。</p>

<p>下列文章在使用 Grails Migration 非常有參考價值，若有需要可以看看：</p>

<ul>
<li><a href="http://grails-plugins.github.io/grails-database-migration/docs/manual/guide/introduction.html">Database Migration Plugin - Reference Documentation</a></li>
<li><a href="http://fbflex.wordpress.com/2011/01/19/working-with-the-grails-database-migration-plugin/">Working with the Grails Database Migration Plugin</a></li>
<li><a href="http://wpgreenway.com/posts/grails-db-migration-tutorial/">Grails Db Migration Tutorial</a></li>
</ul>


<p>在開始說明前需要先進行 dataSource 的調整。</p>

<h2>定義 dataSource</h2>

<p>grails 預設的 domain 管理使用的是 gorm 技術，也就是常見的 orm mapping，因此，一般預設會定義 dbCreate = &#8220;update&#8221;，也就是一旦檢查 domain 物件有調整，會自動檢查並且更新，使用 Migration 我們就不希望 orm mapping 介入因此我們在定義 dataSource 的地方設定 <code>dbCreate = ""</code>，也就是關閉自動更新的機制，設定檔如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>development {
</span><span class='line'>    dataSource {
</span><span class='line'>        dbCreate = "" // one of 'create', 'create-drop', 'update', 'validate', ''
</span><span class='line'>        pooled = true
</span><span class='line'>        driverClassName = "com.mysql.jdbc.Driver"
</span><span class='line'>        dialect = org.hibernate.dialect.MySQL5InnoDBDialect
</span><span class='line'>        username = ""
</span><span class='line'>        password = ""
</span><span class='line'>        url = "jdbc:mysql://localhost/test?useUnicode=true&characterEncoding=UTF8&zeroDateTimeBehavior=convertToNull"
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>一定有讀者會有疑慮使用 orm 技術就可以幫我們自動更新 schema 為什麼還要使用 migrations ? 幾點如下：</p>

<ol>
<li>migrations 有版本記錄與控管，orm update 沒有</li>
<li>migrations 可以偵測到 PK、FK、限制式的調整，orm update 沒辦法</li>
<li>migrations 可以偵測到欄位的刪除，orm update 沒辦法</li>
<li>migrations 可以自定更新 sql 語法，並且加入版本控管，orm update 沒辦法</li>
</ol>


<p>如果你的應用程式不會停止更新變動，那 migrations 才有可能涵蓋所有需求。</p>

<p>有了上述了解與設定後，首先要為我們的資料庫建立第一版的版控內容，可以想像成版本控制的初始專案或是 git init。</p>

<h2>初始資料庫版控</h2>

<p>假設我們有個 domain 定義如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Part {
</span><span class='line'>    String name
</span><span class='line'>    String title
</span><span class='line'>    String description
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    static constraints = {
</span><span class='line'>        name blank: false, unique: true
</span><span class='line'>        title blank: false
</span><span class='line'>        description nullable: true, empty: true
</span><span class='line'>
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>一旦在 grails 建立了 domain 之後，我們可以透過下列語法產生最一開始的資料庫版控記錄檔： <code>changelog.groovy</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>grails dev dbm-generate-gorm-changelog changelog.groovy </span></code></pre></td></tr></table></div></figure>


<p>該指令指的是透過 domain 產生建立資料庫的相關語法 如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>databaseChangeLog = {
</span><span class='line'>
</span><span class='line'>  changeSet(author: "Spooky (generated)", id: "1389679387050-1") {
</span><span class='line'>      createTable(tableName: "part") {
</span><span class='line'>          column(autoIncrement: "true", name: "id", type: "bigint") {
</span><span class='line'>              constraints(nullable: "false", primaryKey: "true", primaryKeyName: "partPK")
</span><span class='line'>          }
</span><span class='line'>
</span><span class='line'>          column(name: "version", type: "bigint") {
</span><span class='line'>              constraints(nullable: "false")
</span><span class='line'>          }
</span><span class='line'>
</span><span class='line'>          column(name: "description", type: "varchar(255)")
</span><span class='line'>
</span><span class='line'>          column(name: "name", type: "varchar(255)") {
</span><span class='line'>              constraints(nullable: "false")
</span><span class='line'>          }
</span><span class='line'>
</span><span class='line'>          column(name: "title", type: "varchar(255)") {
</span><span class='line'>              constraints(nullable: "false")
</span><span class='line'>          }
</span><span class='line'>      }
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  changeSet(author: "Spooky (generated)", id: "1389679387050-2") {
</span><span class='line'>      createIndex(indexName: "name_uniq_1389679387009", tableName: "part", unique: "true") {
</span><span class='line'>          column(name: "name")
</span><span class='line'>      }
</span><span class='line'>  }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>一旦建立完成，我們可以在我們 DB server 先建立好空的資料庫，透過下面指令產生一個初始的 database 包含上面 changelog.groovy 的變動：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>grails dev dbm-update</span></code></pre></td></tr></table></div></figure>


<p>初始資料庫建好之後，我們可以使用 sql client 軟體來看一下 table 的結構，如下圖:</p>

<p><img src="https://lh6.googleusercontent.com/-LHDhbqc-ikY/UtTWMawYxnI/AAAAAAAAMB0/QzxhMNG5QJI/s0/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2014-01-14+%E4%B8%8B%E5%8D%882.15.25.png" title="螢幕快照 2014-01-14 下午2.15.25.png" alt="enter image description here" /></p>

<p>圖中的 DATABASECHANGELOG table 記錄的就是目前 database 的版本記錄，migrations plugin 就是透過該 table 比對目前 db 執行到 changelog 裡的哪些調整，不存在的才執行，如此一來即使你的應用程式會 deploy 到不同主機且 db 的版本不一致的情形，透過該 table 就可以知道每個 db 目前的版本狀況進而讓  migration plugin 幫你更新到最新的 database 版本。</p>

<p>對於初始 db 以及版本資訊 的建立有了解後，接著要說明調整欄位後，如何將調整結果更新的到 db。</p>

<h2>調整欄位後更新 database</h2>

<p>假設我們將一開始建立的 domain 調整 index，以及去掉以及加入欄位的 nullable 限制式：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Part {
</span><span class='line'>    String name
</span><span class='line'>    String title
</span><span class='line'>    String description
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    static constraints = {
</span><span class='line'>        name blank: false, unique: 'title' // 新增 PK
</span><span class='line'>        title nullable: true //原本 title blank: false
</span><span class='line'>        //description nullable: true, empty: true
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>一旦 domain 調整完成後，我們可以進行比對目前 database schema 與 domain 的差異，透過下列語法：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>grails dev dbm-gorm-diff 1.0.1.groovy -add</span></code></pre></td></tr></table></div></figure>


<p>因為版本控制的概念是要一直延續，且有每階段的調整，我們將第二次的調整儲存於另外的的檔案叫做 <code>1.0.1.groovy</code>，其產生的結果如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>databaseChangeLog = {
</span><span class='line'>
</span><span class='line'>  changeSet(author: "Spooky (generated)", id: "1389681182984-1") {
</span><span class='line'>      addNotNullConstraint(columnDataType: "varchar(255)", columnName: "description", tableName: "part")
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  changeSet(author: "Spooky (generated)", id: "1389681182984-2") {
</span><span class='line'>      dropNotNullConstraint(columnDataType: "varchar(255)", columnName: "title", tableName: "part")
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  changeSet(author: "Spooky (generated)", id: "1389681182984-3") {
</span><span class='line'>      dropIndex(indexName: "name_uniq_1389679387009", tableName: "part")
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  changeSet(author: "Spooky (generated)", id: "1389681182984-4") {
</span><span class='line'>      createIndex(indexName: "unique_name", tableName: "part", unique: "true") {
</span><span class='line'>          column(name: "title")
</span><span class='line'>
</span><span class='line'>          column(name: "name")
</span><span class='line'>      }
</span><span class='line'>  }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>而指令中的 <code>-add</code> 指的是將上面檔案 includ 到 changelog.groovy，在該檔案新增一行程式：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>include file: '1.0.1.groovy'</span></code></pre></td></tr></table></div></figure>


<p>如此，我們在執行 dbm-update 時，會連著第二次更新一並檢查，再一次執行下述指令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>grails dev dbm-update</span></code></pre></td></tr></table></div></figure>


<p>在查看一次 DATABASECHANGELOG，如下圖：</p>

<p><img src="https://lh5.googleusercontent.com/-glR-DMMN88k/UtTbuyjNQ2I/AAAAAAAAMCI/TwMLXz_CPS8/s0/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2014-01-14+%E4%B8%8B%E5%8D%882.38.38.png" title="螢幕快照 2014-01-14 下午2.38.38.png" alt="enter image description here" /></p>

<p>可以看到 changelog 又有新的資料，表示資料庫已更新到最新的狀態。</p>

<p>不過實際狀況可能會有執行失敗的情形，怎麼辦？該 plugin 提供了 rollback 的機制。</p>

<h2>取消更新</h2>

<p>我們可以透過下列語法將更新還原</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>grails dev dbm-rollback-count 1</span></code></pre></td></tr></table></div></figure>


<p>後面的數字表示要退回的更新步驟，需要注意的是 rollback 不一定能成功，畢竟實際狀況是複雜的，可以的話竟量測試完善，你也可以客製 rollback 要執行的語法，可參考最後的 [客製資料庫更新語法]。</p>

<p>當然，除了新專案可以使用 migration，我們也希望舊專案也能納入控管，接著說明如何升級舊有的 database</p>

<h2>將既有的 database 升級</h2>

<p>首先設定一組要升級的 database 連線參數，需要放在 dataSource.groovy，不可以放在外部設定檔，如 <code>.grails/appname-config.groovy</code>，筆者一開始測試就是定義在外部設定檔一直無法成功，設定如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dbToUpdate {
</span><span class='line'>    dataSource {
</span><span class='line'>        dbCreate = ""
</span><span class='line'>        driverClassName = "com.mysql.jdbc.Driver"
</span><span class='line'>        dialect = org.hibernate.dialect.MySQL5InnoDBDialect
</span><span class='line'>        username = ""
</span><span class='line'>        password = ""
</span><span class='line'>        url = "jdbc:mysql://localhost/oldDatabase?useUnicode=true&characterEncoding=UTF8&zeroDateTimeBehavior=convertToNull"
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>接著執行</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>grails dev dbm-diff dbToUpdate newChangelog.groovy</span></code></pre></td></tr></table></div></figure>


<p>該指令會以一開始定義的 dev datasource，跟 dbToUpdate datasource 指令的資料庫進行差異比對，並且將差異差異寫入 newChangelog.groovy 檔案。</p>

<p>一旦差異產生好後，接著要將 dbToUpdate 更新到跟 dev datasource 指定的 schema 一樣到最新狀態</p>

<p>在開始執行更新之前，需要先設定 config.groovy 新增下面的參數：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>grails.plugin.databasemigration.changelogFileName = newChangelog.groovy</span></code></pre></td></tr></table></div></figure>


<p>告訴 migration 在執行 dbm-update 時參考 db 跟 db 之間的差異檔 <code>newChangelog.groovy</code></p>

<p>如此一來我們就可以執行下面指令進行舊資料庫升級：</p>

<blockquote><p>注意：執行下面語法時，請先備份舊有資料庫</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>grails -Dgrails.env=dbToUpdate dbm-update</span></code></pre></td></tr></table></div></figure>


<p>順利的話 dbToUpdate 定義之舊的 database schema 將會被更新的跟 dev 一樣，接著我們必須將版本記錄更新到最新，因為剛剛執行 dbm-update 的對象是 newChangelog.groovy 同樣會將更新記錄寫入 DATABASECHANGELOG table，該記錄是為了升級用，並不是正式加入控管的記錄，且一開始就開始進行版控的 db 不會有升級的版本記錄，因此我們需要先清除在產生新的 changelog，步驟如下：</p>

<ol>
<li>先把剛剛更新 newChangelog.groovy 的版本記錄 DATABASECHANGELOG 刪掉</li>
<li>將 config.groovy 的 <code>grails.plugin.databasemigration.changelogFileName = newChangelog.groovy</code> 刪除，或是調整回 <code>changelog.groovy</code>，表示回到正式版控內。</li>
<li>寫入從開始版控到最近變更的版本記錄 grails -Dgrails.env=dbToUpdate dbm-changelog-sync</li>
</ol>


<p>透過上述步驟，就可以讓失去控制的舊有 database 回到正軌，之後就可以透過版本控制隨時保持在最新狀態。</p>

<p>當然，一定還有些狀況沒辦法透過比對自動產生，如果你需要對資料庫進行欄位轉換或是特殊處理，下面接著說明。</p>

<h2>客製資料庫更新語法</h2>

<p>假設你有新增欄位，該欄位需要預設值時，可使用下列語法進行：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>databaseChangeLog = {
</span><span class='line'>
</span><span class='line'>    changeSet(author: "wpgreenway", id: "add-date-created-to-post") {
</span><span class='line'>        addColumn(tableName: "post") {
</span><span class='line'>            column(name: "date_created", type: "timestamp")
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        grailsChange {
</span><span class='line'>            change {
</span><span class='line'>                sql.execute("UPDATE post SET date_created = NOW()")
</span><span class='line'>            }
</span><span class='line'>            rollback {
</span><span class='line'>            }
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        addNotNullConstraint(tableName: "post", columnName: "date_created")
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>其中可以看到 rollback 的 block，你也可以定義如果需要進行 rollback 時要執行的語法，上述是不懂 gorm 可以用一般的 sql 來進行，如果你熟 gorm，可以使用下列語法，不過在一開始的介紹的連結 <a href="http://wpgreenway.com/posts/grails-db-migration-tutorial/">Grails Db Migration Tutorial</a> 有提到這樣的作法是危險的，這邊不多說明，可參考連結中的敘述，這裡只是記錄也可以這樣進行操作。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>grailsChange {
</span><span class='line'>  change {
</span><span class='line'>    Post.list().each { post -&gt;
</span><span class='line'>      post.dateCreated = new Date()
</span><span class='line'>      post.save(failOnError: true, flush: true)
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>或許有讀者會覺得，我用 sql 檔案也同樣能夠做到資料庫版本更新，又何必要透過類似 migration 的機制？跟一般 sql 檔案控管還有不同的地方，上述自定的 sql 更新記錄同樣的也會加入到 DATABASECHANGELOG，沒有任何一個變更會被遺漏，只要有正確的版本記錄，migration 都會一一的進行更新。</p>

<p>最後，一但所有更新語法都準備就緒實際應用在 production，總不希望還需要手動下指令，migration 提供下列設定來自動完成資料庫更新的動作。</p>

<h2>應用程式運行時自動進行資料更新</h2>

<p>在 config.groovy 加入下列參數</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>grails.plugin.databasemigration.updateOnStart = true
</span><span class='line'>grails.plugin.databasemigration.updateOnStartFileNames = ['changelog.groovy']</span></code></pre></td></tr></table></div></figure>


<p>一旦系統運行將會自動比對 cheangelog，你也可以根據不同的 environments 設置不同的比對 chnagelog file，又或者有客製情形可以調整</p>

<p>接著運行 run-app 就會開始比對 changelog 並且更新 database，確認 schema 沒問題時 deploy 到遠端自動執行 schema 調整。</p>

<h2>其他使用注意事項</h2>

<p>有時候，執行 <code>grails dev dbm-update</code> 指令會失敗，可能因為你的專案加了不同的 plugin 改變了產生 doamin 的方式，或是 plugin 中有各自維護的 domain，以筆者的狀況使用了 <a href="http://www.grails.org/plugin/taggable">Taggable Plugin</a> 有自己維護的 table，可以利用 [應用程式運行時自動進行資料更新] 來執行上述指令，筆者在進行舊有資料庫升級時同樣也有上述指令沒有辦法運作的情形，也是透過 [應用程式運行時自動進行資料更新] 完成更新。</p>

<p>另外，如果執行 <code>grails dev dbm-update</code> 時出現下面錯誤</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Message: Validation Failed:
</span><span class='line'>     1 change sets check sum</span></code></pre></td></tr></table></div></figure>


<p>可透過下面語法先清除 MD5SUM</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>grails dev dbm-clear-checksums</span></code></pre></td></tr></table></div></figure>


<p>再一次執行 <code>grails dev dbm-update</code> 即可</p>

<p>如果你有使用 searchable 套件，你會發現若你變更欄位限制式時，在執行 dbm-gorm-diff 可以正常運作，但若你在有支援 seachable 的 domain 新增欄位時在執行 dbm-gorm-diff 會出現下列錯誤訊息</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[Compass Gps Index [pool-8-thread-3]] ERROR util.JDBCExceptionReporter  - Unknown column 'user0_.has_tour' in 'field list'
</span><span class='line'>
</span><span class='line'>[Compass Gps Index [pool-8-thread-3]] ERROR indexer.ScrollableHibernateIndexEntitiesIndexer  - {hibernate}: Failed to index the database
</span><span class='line'>Message: could not load an entity: [app.User#182]</span></code></pre></td></tr></table></div></figure>


<p>只要把 domain 中 static searchable 關鍵字移除舊可以正常運作，在執行 migrations 操作，有未知的異常時，記得先檢查你在 domain 中有沒有特殊的關鍵字，有可以造成誤判或是相互影響</p>

<h2>如果沒有用 grails 開發想使用 migration</h2>

<p>我相信 migration 這樣的機制在每種不同的語言一定有類似的套件提供相同的功能，希望透過這樣的介紹讓讀者知道原來 database 也可以進行版本控制，不需要很複雜也可以做到，有時候就是不知道所以也不知道該怎麼下手。</p>

<p>另外一個方向，如果真的找不到目前專案使用語言有類似 migration 這樣的套件，也可以透過 grails 來中介，將 domain mapping 到既有的 database，在 mapping 時 datasource 定義 <code>dbCreate = "validate"</code>，可以部分 mapping 就開始進行版控，陸續在加入， 一點想法給大家參考。</p>

<p>最後附上本篇文章範例程式位置：</p>

<p><a href="https://github.com/smlsunxie/grailsMigrationsTest">grailsMigrationsTest</a></p>
<p><a rel="bookmark" href="http://smlsun.com/blog/2014/01/19/Grails-migrations-database/"></a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[stackedit：寫部落格的新利器]]></title>
<link href="http://smlsun.com/blog/2013/12/26/stackedit/"/>
<updated>2013-12-26T09:29:00+08:00</updated>
<id>http://smlsun.com/blog/2013/12/26/stackedit</id>

      <content type="html"><![CDATA[<p>最近經朋友介紹使用同樣是以 markdown 為書寫規則的線上編輯服務 <strong>stackedit</strong> 又讓我回到了 Blogger 了，本來本人是使用 octopress 將文章 push 到 github 發佈文章，因為自從使用 makedown 書寫文章以後就沒辦法接受用一般的編輯器來進行文章撰寫，之前會放棄 Blogger 也是因為沒有很好的 markdown 的支援。</p>

<p>使用 octopress 最大的好處就是可以利用 markdown 書寫，且可以自己調整 blog 的外觀，不過就是麻煩了點，每次發佈都要下指令，且文章的檔名沒辦法隨心所欲的顯示，其他還算不錯，另外如果寫的文章數變多了以後發佈時間也會比較慢，雖然我的文章還沒有那麼多就是了&#8230;</p>

<p>另外，畢竟 octopress 幾乎是自己架設，所以對於 SEO 還是必須自己下功夫，但在 bolgspot 就不用太花力器，google 都已幫做了很多了。</p>

<p>當然要回到 Blogger 最重要的就是 markdown 的撰寫風格，雖然 Blogger 尚未有這樣的功能，幸好有 stackedit 幫這個忙，所以我又回來 Blogger 繼續撰寫往後的 blog 這邊就介紹主要的功能：</p>

<p>你可以在 <a href="https://chrome.google.com/webstore/detail/stackedit/iiooodelglhkcpgbajoejffhijaclcdg?utm_source=chrome-ntp-launcher">stackedit</a> chrome 的官方套件下載，安裝在 chrome，下載之後，你可以到 google drive 新增 stackedit 的檔案：</p>

<p><img src="https://lh5.googleusercontent.com/-gjsyEesIeZI/Urwh7Apwo0I/AAAAAAAAL5U/bbItukNZEqM/s0/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-12-26+%E4%B8%8B%E5%8D%888.29.18.png" title="螢幕快照 2013-12-26 下午8.29.18.png" alt="enter image description here" /></p>

<p>一旦點選新增後，就會建立一個 document，就可以開始使用 stackedit 編輯文章，文章撰寫的過程中，有時候會需要插入圖片stackedit 也提供了很方便的圖片插入的功能，點選上方的圖片圖示：</p>

<p><img src="https://lh6.googleusercontent.com/-IzAXYSA-kns/UrwiuvYvZ1I/AAAAAAAAL5s/EGhCnD0rPOU/s0/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-12-26+%E4%B8%8B%E5%8D%888.35.32.png" title="螢幕快照 2013-12-26 下午8.35.32.png" alt="enter image description here" /></p>

<p>跳出下面的視窗</p>

<p><img src="https://lh4.googleusercontent.com/-sAkGBJLE-IY/Urwi7zOMb9I/AAAAAAAAL58/URUZDQnbL3s/s0/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-12-26+%E4%B8%8B%E5%8D%888.36.45.png" title="螢幕快照 2013-12-26 下午8.36.45.png" alt="enter image description here" /></p>

<p>你可以選擇外部的圖片網址，也可以選擇自己上傳照片，點選上圖下方的 import from google + 就可以用拖拉的方式來把照片上傳，同時就會自動產生連結。</p>

<p>一旦文章寫好或是隨時都可以用 command + S or 在 windows 底下用 ctrl + S 來進行儲存，他會把更新的內容寫入 google drive 的檔案內。</p>

<p>如果你寫的文章是要發佈到 blog 或是其他地方 stackedit 也提供了很方便的 publish 功能：</p>

<p><img src="https://lh5.googleusercontent.com/-5GbYYmjRJGw/UrwkGmyauqI/AAAAAAAAL6U/iIt7uVqxw3E/s0/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-12-26+%E4%B8%8B%E5%8D%888.41.38.png" title="螢幕快照 2013-12-26 下午8.41.38.png" alt="enter image description here" /></p>

<p>舉凡上述的對象都可以進行發佈，一旦設定完成，可以在左上角看到發佈的對象，</p>

<p><img src="https://lh3.googleusercontent.com/-wVzH01vbBUA/UrwkdEjOUoI/AAAAAAAAL6g/aeyv2u_SchM/s0/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-12-26+%E4%B8%8B%E5%8D%888.43.12.png" title="螢幕快照 2013-12-26 下午8.43.12.png" alt="enter image description here" /></p>

<p>第一個圖示表示檔案儲存的對像，第二個表示你發佈得對象，只要文章有更新你就可以很方便的發佈到目標位置，且發佈對象可以多個，大大的節省發佈的時間。</p>

<p>除此之外，還可以給你自己選擇文章轉換的類型，有 HTML、pdf 以及原始的 markdown 檔案，其中還可以自定 templete，這邊推薦我在網路上找到的範本，來源網站：<a href="http://pacinispace.Blogger.tw/2013/07/write-in-markdown-stackedit-with-custom.html">markdown templete</a></p>

<p>只要將下列的程式碼：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;!DOCTYPE html&gt;
</span><span class='line'>&lt;html&gt;
</span><span class='line'>&lt;head&gt;
</span><span class='line'>&lt;meta charset="utf-8"&gt;
</span><span class='line'>&lt;title&gt;&lt;%= documentTitle %&gt;&lt;/title&gt;
</span><span class='line'> 
</span><span class='line'>&lt;link rel="stylesheet" type="text/css" href="https://googledrive.com/host/0B33VkLLKzd0aYWxSaUhvQjR2SUU"&gt;
</span><span class='line'> 
</span><span class='line'>&lt;script type="text/javascript" src="https://c328740.ssl.cf1.rackcdn.com/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"&gt;
</span><span class='line'>&lt;/script&gt;
</span><span class='line'> 
</span><span class='line'>&lt;script type="text/javascript" src="https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js?skin=desert"&gt;
</span><span class='line'>&lt;/script&gt;
</span><span class='line'>&lt;!--
</span><span class='line'>To use highlight.js uncomment this part and comment the previous script
</span><span class='line'>&lt;link rel="stylesheet" href="http://yandex.st/highlightjs/7.5/styles/github.min.css"&gt;
</span><span class='line'>&lt;script src="http://yandex.st/highlightjs/7.5/highlight.min.js"&gt;&lt;/script&gt;
</span><span class='line'>--&gt;
</span><span class='line'> 
</span><span class='line'>&lt;/head&gt;
</span><span class='line'>&lt;body&gt;&lt;%= documentHTML %&gt;&lt;/body&gt;
</span><span class='line'>&lt;/html&gt;</span></code></pre></td></tr></table></div></figure>


<p>複製到 stackEdit 中 setting 的：</p>

<p><img src="https://lh4.googleusercontent.com/-TYn7E_x2bJU/UrwmbxJYuGI/AAAAAAAAL60/EMsdgghaFds/s0/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-12-26+%E4%B8%8B%E5%8D%888.50.55.png" title="螢幕快照 2013-12-26 下午8.50.55.png" alt="enter image description here" /></p>

<p>default templete 中，在發佈或存檔時在點選以 templete 輸出，就可以產出不錯的文件內容：</p>

<p><img src="https://lh5.googleusercontent.com/-30BZ80YplCU/UrwnGH54IdI/AAAAAAAAL7E/MDcwuzfOrww/s0/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-12-26+%E4%B8%8B%E5%8D%888.54.02.png" title="螢幕快照 2013-12-26 下午8.54.02.png" alt="enter image description here" /></p>

<p>可說是一舉數得喔！</p>

<p>另外因為 StackEdit 綁定檔案是根據 id 來做對應，所以一旦檔案建立之後隨你放置在任何位置，連結都會一直都在，所以也不影響文件得整理，真的很方便，個人覺得與之前使用 octopress 的經驗來看，方便度大概有提昇寫作速度 30 % 左右，有興趣的可以體驗看看囉！這篇文章就是用 StackEdit，所撰寫的，給大家參考，我也把我本來的網誌 <a href="http://smlsun.com/">蹤影 octopress + github</a> 的文章也都利用 stackedit 輸入到 Blogger，今後就在 <a href="http://blog.smlsun.com/">蹤影 Blogger</a> 繼續與大家分享囉！</p>
<p><a rel="bookmark" href="http://smlsun.com/blog/2013/12/26/stackedit/"></a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[extjs-8-30：在 sencha Architect 中的多語系處理]]></title>
<link href="http://smlsun.com/blog/2013/08/14/extjs-8-30/"/>
<updated>2013-08-14T16:50:00+08:00</updated>
<id>http://smlsun.com/blog/2013/08/14/extjs-8-30</id>

      <content type="html"><![CDATA[<p>關於 extjs 的多語系處理，我們可以參考下列網址：<a href="http://ffzhuang.blogspot.tw/2010/04/quick-add-multiple-language-to-extjs.html">Quick add multiple language to extjs + grails application</a>，或者你可以使用別人寫的 <a href="https://github.com/TigrouMeow/extjs-locale-loader">extjs-locale-loader</a></p>

<p>基本的概念是， 你可以將你的語系資料定義在一個全域的 json Object，如此一來就可以在需要顯示對應語系的地方替換成 json object 裡面的某個屬性，但是在使用 Architect 時，有些屬性不一定可以透過他進行調整，比如說我們希望調整 Panel.title，在 Architect 你只能在 title 的屬性輸入文字屬性不能輸入變數，就算輸入了也會被當字串處理，這狀況確實令人苦惱，不過在遍尋相關資料後，總算讓筆者找到解法，就在官方的文件中關於 <a href="http://docs.sencha.com/architect/2/#!/guide/config_panel">config_panel</a> 說明中 <strong>Using Variables with Configs</strong> 章節，概念上是：title 雖然不能調整資料的類型，但我們可以在任一元件新增 <code>Process config</code> 他會建立一個函式，在裡面可以對 config 進行裡面的欄位調整，光看文件的說明很難想像到底是如何運作，我們可以來看實際產生的程式碼，在還未加入 <code>Process config</code> 之前：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Ext</span><span class="p">.</span><span class="nx">define</span><span class="p">(</span><span class="s1">&#39;foodprint.view.ItemEditor&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">extend</span><span class="o">:</span> <span class="s1">&#39;Ext.tab.Panel&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">alias</span><span class="o">:</span> <span class="s1">&#39;widget.itemeditor&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">itemId</span><span class="o">:</span> <span class="s1">&#39;itemEditor&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">activeTab</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">initComponent</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">me</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">Ext</span><span class="p">.</span><span class="nx">applyIf</span><span class="p">(</span><span class="nx">me</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">items</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="nx">xtype</span><span class="o">:</span> <span class="s1">&#39;panel&#39;</span><span class="p">,</span>
</span><span class='line'>                    <span class="nx">layout</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                        <span class="nx">align</span><span class="o">:</span> <span class="s1">&#39;stretch&#39;</span><span class="p">,</span>
</span><span class='line'>                        <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;vbox&#39;</span>
</span><span class='line'>                    <span class="p">},</span>
</span><span class='line'>                    <span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;list&#39;</span><span class="p">,</span>
</span><span class='line'>                    <span class="nx">items</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>                        <span class="p">{</span>
</span><span class='line'>                            <span class="nx">xtype</span><span class="o">:</span> <span class="s1">&#39;itemgrid&#39;</span>
</span><span class='line'>                        <span class="p">}</span>
</span><span class='line'>                    <span class="p">]</span>
</span><span class='line'>                <span class="p">},</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="nx">xtype</span><span class="o">:</span> <span class="s1">&#39;panel&#39;</span><span class="p">,</span>
</span><span class='line'>                    <span class="nx">layout</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                        <span class="nx">align</span><span class="o">:</span> <span class="s1">&#39;stretch&#39;</span><span class="p">,</span>
</span><span class='line'>                        <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;vbox&#39;</span>
</span><span class='line'>                    <span class="p">},</span>
</span><span class='line'>                    <span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;資料維護&#39;</span><span class="p">,</span>
</span><span class='line'>                    <span class="nx">items</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>                        <span class="p">{</span>
</span><span class='line'>                            <span class="nx">xtype</span><span class="o">:</span> <span class="s1">&#39;itemviewer&#39;</span><span class="p">,</span>
</span><span class='line'>                            <span class="nx">flex</span><span class="o">:</span> <span class="mi">1</span>
</span><span class='line'>                        <span class="p">}</span>
</span><span class='line'>                    <span class="p">]</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">]</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">me</span><span class="p">.</span><span class="nx">callParent</span><span class="p">(</span><span class="nx">arguments</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>很標準的寫法，我們在 initComponent 將我們需要的加入的元件定義好，其中包括 title 是一個文字 &#8216;list&#8217;，也就是我們沒辦法利用 Arcitect 修改的地方，接著我們來看加入 <code>Process config</code> 之後的程式碼：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Ext</span><span class="p">.</span><span class="nx">define</span><span class="p">(</span><span class="s1">&#39;foodprint.view.ItemEditor&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">extend</span><span class="o">:</span> <span class="s1">&#39;Ext.tab.Panel&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">alias</span><span class="o">:</span> <span class="s1">&#39;widget.itemeditor&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">itemId</span><span class="o">:</span> <span class="s1">&#39;itemEditor&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">initComponent</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">me</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">Ext</span><span class="p">.</span><span class="nx">applyIf</span><span class="p">(</span><span class="nx">me</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">items</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>                <span class="nx">me</span><span class="p">.</span><span class="nx">processLocalized</span><span class="p">({</span>
</span><span class='line'>                    <span class="nx">xtype</span><span class="o">:</span> <span class="s1">&#39;panel&#39;</span><span class="p">,</span>
</span><span class='line'>                    <span class="nx">layout</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                        <span class="nx">align</span><span class="o">:</span> <span class="s1">&#39;stretch&#39;</span><span class="p">,</span>
</span><span class='line'>                        <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;vbox&#39;</span>
</span><span class='line'>                    <span class="p">},</span>
</span><span class='line'>                    <span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;list&#39;</span><span class="p">,</span>
</span><span class='line'>                    <span class="nx">items</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>                        <span class="p">{</span>
</span><span class='line'>                            <span class="nx">xtype</span><span class="o">:</span> <span class="s1">&#39;itemgrid&#39;</span>
</span><span class='line'>                        <span class="p">}</span>
</span><span class='line'>                    <span class="p">]</span>
</span><span class='line'>                <span class="p">}),</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="nx">xtype</span><span class="o">:</span> <span class="s1">&#39;panel&#39;</span><span class="p">,</span>
</span><span class='line'>                    <span class="nx">layout</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                        <span class="nx">align</span><span class="o">:</span> <span class="s1">&#39;stretch&#39;</span><span class="p">,</span>
</span><span class='line'>                        <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;vbox&#39;</span>
</span><span class='line'>                    <span class="p">},</span>
</span><span class='line'>                    <span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;資料維護&#39;</span><span class="p">,</span>
</span><span class='line'>                    <span class="nx">items</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>                        <span class="p">{</span>
</span><span class='line'>                            <span class="nx">xtype</span><span class="o">:</span> <span class="s1">&#39;itemviewer&#39;</span><span class="p">,</span>
</span><span class='line'>                            <span class="nx">flex</span><span class="o">:</span> <span class="mi">1</span>
</span><span class='line'>                        <span class="p">}</span>
</span><span class='line'>                    <span class="p">]</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">]</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">me</span><span class="p">.</span><span class="nx">callParent</span><span class="p">(</span><span class="nx">arguments</span><span class="p">);</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">processLocalized</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">config</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">config</span><span class="p">.</span><span class="nx">title</span><span class="o">=</span><span class="nx">foodprint</span><span class="p">.</span><span class="nx">string</span><span class="p">.</span><span class="nx">list</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">config</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>一旦加入了 <code>Process config</code> 之後可以看到在 <code>initComponent</code> 這個函式中他將 json object 作為參數傳入 <code>processLocalized</code> 如此一來我們就可以在該函式進行所謂的語系替換，也就可以做到將 title 替換成變數，就解決了沒辦法調整 title 資料型態的窘境。</p>

<p>接著，我們就可以定義我們的語系檔，範例如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">foodprint</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'><span class="nx">foodprint</span><span class="p">.</span><span class="nx">string</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'><span class="nx">foodprint</span><span class="p">.</span><span class="nx">string</span><span class="p">.</span><span class="nx">list</span> <span class="o">=</span> <span class="s2">&quot;瀏覽清單&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>並且在 Architect 中引入該 js 檔案，如圖：</p>

<p><img src="https://lh3.googleusercontent.com/-CLfnp9EuuvU/Ugth32ooVPI/AAAAAAAALyA/dJ04sF13hQQ/w362-h291-no/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7+2013-08-14+%25E4%25B8%258B%25E5%258D%25886.53.25.jpg" alt="link" /></p>

<p>至於動態載入不同的語系檔，這邊就不做探討，那是另一個議題，網路上也有一些解法，就先留給各位讀者研究囉。</p>

<p>另外關於語系的處理，我們可以用到 extjs 對於 javascript 的String 類別的強化，參考 API：<a href="http://docs.sencha.com/extjs/4.2.1/#!/api/Ext.String-method-format">Ext.String-method-format</a>，對於一些訊息的呈現我們可以將相關參數傳進去，如此在定義語系時，變數的位置就可以被空下來，使用 extjs 原生的函式進行替換，使用方式可參考範例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">cls</span> <span class="o">=</span> <span class="s1">&#39;my-class&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">text</span> <span class="o">=</span> <span class="s1">&#39;Some text&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">s</span> <span class="o">=</span> <span class="nx">Ext</span><span class="p">.</span><span class="nb">String</span><span class="p">.</span><span class="nx">format</span><span class="p">(</span><span class="s1">&#39;&lt;div class=&quot;{0}&quot;&gt;{1}&lt;/div&gt;&#39;</span><span class="p">,</span> <span class="nx">cls</span><span class="p">,</span> <span class="nx">text</span><span class="p">);</span>
</span><span class='line'><span class="c1">// s now contains the string: &#39;&lt;div class=&quot;my-class&quot;&gt;Some text&lt;/div&gt;&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>一開始發現此問題時，直覺反應是這也太不方便了吧！不過在體驗了這樣的作法之後，又覺得這樣做真的很神奇，好處是語系的替換不會散佈在程式碼各處，透過不同函式負責不同的處理，一旦需要新增語系也可以有一致的處理方式，另外在 Architect 進行開發時，畫面上的呈現也可以是簡單易讀的明確文字，確實是兼顧可讀性的處理方式，給大家參考，若有更好的方式也請讓我知道！</p>
<p><a rel="bookmark" href="http://smlsun.com/blog/2013/08/14/extjs-8-30/"></a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[extjs-7-30：sencha touch 使用 ux 套件，AKA：外掛，以手機網頁啟動照相功能上傳檔案為例]]></title>
<link href="http://smlsun.com/blog/2013/08/09/extjs-7-30/"/>
<updated>2013-08-09T09:27:00+08:00</updated>
<id>http://smlsun.com/blog/2013/08/09/extjs-7-30</id>

      <content type="html"><![CDATA[<p>開發 extjs 時，他能夠帶給我們類似 java swing 元件化的前端開發方式，若能搭配 sencha architect 使用，更能讓開發更加的流暢，關於 architect 的使用可參考筆者在之前在 ithome 所寫的文章：<a href="http://ithelp.ithome.com.tw/question/10120289">extjs 4 系列 4/5：利用 Sencha Architect 快速開發 extjs</a>。</p>

<p>而因為 extjs 設計為元件化以及類類別系統，所以除了官方的元件之外，網路上的先進也開發出很多優秀的套件，以補官方功能上的不足，想當然我們也希望在使用  Architect 時也可以載入 ux 套件作為使用，不過很不幸的，如果單純寫 code 是很輕易達成，但在 Architect 卻不易完成，他的程式碼編輯是有限制的，在查了相關資料後，正好找到一篇：<a href="http://stackoverflow.com/questions/12680645/sencha-architect-xtype-change">Sencha Architect xtype change</a>，剛剛好就解決的這個問題，由開發 Architect 的 one of the lead engineers:Aaron Conran 回答如下：</p>

<blockquote><p>Drag out a List as a top level component. All top level components are their own classes. Set the userAlias and userClassName configurations to values like &#8216;refreshablelist&#8217; and &#8216;RefreshableList&#8217;. Take a look at the code generated for this.</p>

<p>Drag out a Panel as a top level component, drag the existing RefreshableList in the inspector into the new Panel. A prompt will ask you if you would like to Move, Copy or Link the list, choose &#8220;Link&#8221;. This will create an instance of your subclass RefreshableList.</p></blockquote>

<p>大致的概念是，你可以在 architect 中 view 的最上層新增一個元件 component 讓他作為類別的存在，並且改變 userAlias 以及 userClassName 屬性，以你要載入的 ux 套件之對應 xtype 以及 ClassName，如此一來，該元件就代表 ux 套件在 architect 中的實體類別，這時候你就可以將該元件作為 link 放至於你想要顯示的 container 底下，此時會透過 xtype 來實體化你引入的 ux 套件。</p>

<p>概念說明完後，來用一個例子說明實際的操作方式，在筆者目前的專案中，希望可以利用手機的照相功能來進行資料的上傳，但為了加速及簡化開發所需時間，不考慮使用手機 native 功能，因為若要如此需要包裝成 app 並且若要考慮跨平台，利用 web 網頁是更快的方式，而瀏覽器發展至今，目前比較新的瀏覽器皆有支援手機相機存取的功能，參考這篇：<a href="http://www.html5rocks.com/en/tutorials/getusermedia/intro/">Capturing Audio &amp; Video in HTML5</a>，而為了開發手機平台的 web page，筆者考慮使用 sencha touch 作為前端呈現，既然同樣是 sencha 家族，同樣我們也可以用 architect 進行，而我們需要用到的外掛為 <a href="https://github.com/kostysh/File-uploading-component-for-Sencha-Touch">File-uploading-component-for-Sencha-Touch</a></p>

<p>使用方式在其 github page 有詳細說明，這邊就不再贅述，幾個重點：</p>

<ol>
<li>在 sencha Architect 中，你可以在 Application 的 config 找到 loader 進行設置 ux 原始碼的路徑。</li>
<li><p>接著你可以在 view 新增一個 Component 進行一開始說明的設置，如下圖</p>

<p> <img src="https://lh5.googleusercontent.com/-zbDg_GUpfNw/UgRjPO4j81I/AAAAAAAALxY/ol4Nf2Eyico/w349-h372-no/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7+2013-08-09+%25E4%25B8%258A%25E5%258D%258810.00.01.jpg" alt="image" /></p></li>
<li><p>參考 <a href="http://www.html5rocks.com/en/tutorials/getusermedia/intro/">Capturing Audio &amp; Video in HTML5</a> 這篇文章，我們裡面有一段有提到，要讓瀏覽器存取相機，我們只要簡單的新增 html 元件 <code>&lt;input capture="camera" accept="image/*" type="file" &gt;</code> 即可。</p></li>
<li>而筆者所用的套件，主要是用來進行檔案上傳，所以基本上並沒有 <code>capture="camera" accept="image/*"</code> 的屬性，因此我們可以調整該 ux 的原始碼，修改如下：</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>        <span class="c1">// Hidden file element</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="nx">tag</span><span class="o">:</span> <span class="s1">&#39;form&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">reference</span><span class="o">:</span> <span class="s1">&#39;formElement&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">hidden</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>            <span class="nx">children</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                      
</span><span class='line'>                    <span class="nx">capture</span><span class="o">:</span> <span class="s2">&quot;camera&quot;</span><span class="p">,</span> <span class="c1">//  add for get pic from camera</span>
</span><span class='line'>                    <span class="nx">accept</span><span class="o">:</span> <span class="s2">&quot;image/*&quot;</span><span class="p">,</span> <span class="c1">//  add for get pic from camera</span>
</span><span class='line'>
</span><span class='line'>                    <span class="nx">tag</span><span class="o">:</span> <span class="s1">&#39;input&#39;</span><span class="p">,</span>
</span><span class='line'>                    <span class="nx">reference</span><span class="o">:</span> <span class="s1">&#39;fileElement&#39;</span><span class="p">,</span>
</span><span class='line'>                    <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;file&#39;</span><span class="p">,</span>
</span><span class='line'>                    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;userfile&#39;</span><span class="p">,</span>
</span><span class='line'>                    <span class="nx">tabindex</span><span class="o">:</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'>                    <span class="nx">hidden</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>                    <span class="nx">style</span><span class="o">:</span> <span class="s1">&#39;opacity:0;position:absolute;top:-3px;right:-3px;bottom:-3px;left:-3px;z-index:16777270;&#39;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">]</span>
</span><span class='line'>        <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如此一來，該元件就可以讓我在使用手機操作系統時透過相機擷取照片，fork 後修改的 github 如下：<a href="https://github.com/smlsunxie/File-uploading-component-for-Sencha-Touch">smlsunxie/File-uploading-component-for-Sencha-Touch</a>，有需要的讀者可以自行取用，最後執行的畫面如下：</p>

<p><img src="https://lh6.googleusercontent.com/-RrGe0ikz2V0/UgRjQFkLCQI/AAAAAAAALxo/jjd41pr3wdU/w329-h618-no/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7+2013-08-09+%25E4%25B8%258A%25E5%258D%258811.27.28.jpg" alt="image" /></p>

<p>點選上圖下方的 browser 將會開啟下面畫面，因為筆者使用的是 ios 模擬器，所以不支援鏡頭，只支援上傳檔案，因此會直接進入選取畫面，如果是實體機器，將會詢問要使用相機，還是要選取檔案上傳，筆者已有實機測試。</p>

<p><img src="https://lh6.googleusercontent.com/-ByjghqYVow0/UgRjQn-dtTI/AAAAAAAALxw/dK91MN-88PA/w329-h618-no/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7+2013-08-09+%25E4%25B8%258A%25E5%258D%258811.27.36.jpg" alt="image" /></p>

<p>在這個手機平板普及的現在，相信使用照相功能是很平常的事，如果需求僅止於此，不需要大費周章開發 app 形式，快速把功能做出來，儘快推出才是重點！</p>
<p><a rel="bookmark" href="http://smlsun.com/blog/2013/08/09/extjs-7-30/"></a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[extjs-6-30：如何使用 query component]]></title>
<link href="http://smlsun.com/blog/2013/08/08/extjs-6-30/"/>
<updated>2013-08-08T12:03:00+08:00</updated>
<id>http://smlsun.com/blog/2013/08/08/extjs-6-30</id>

      <content type="html"><![CDATA[<p>使用 extjs 一定要會用它的 query component，使用起來有點類似 css selector，jquery 也是類似的概念，有些選擇語法意義是相同的，不管是在定義 controller，或是在 binding event 的時候都會用到他，筆者找到一篇中國朋友寫的 query component 介紹，藉由他的文章進行介紹，連結如下：<a href="http://www.cnblogs.com/daxin/archive/2013/06/01/3112530.html">ExtJs ComponentQuery</a></p>

<h2>ID selector</h2>

<p>根據元件 id 來 query，具有唯一性。前面以 # 號來代表, 取得 itemid 或者 id 符合的元件，範例如下：</p>

<pre><code>var panel = Ext.ComponentQuery.query('#panel');
</code></pre>

<h2>xtype selector</h2>

<p>根據 xtype 來選擇，可選擇前面是否以 &#8216;.&#8217; 來標示，或者沒有任何符號也代表 xtype 查詢，如：</p>

<pre><code>var cmp= Ext.ComponentQuery.query('gridpanel');
var cmp= Ext.ComponentQuery.query('.gridpanel');
</code></pre>

<p>如果我們要找某個類型下面的所擁有的元件 ID 或 itemid，我們可以這樣下</p>

<pre><code>panel#myPanel 
</code></pre>

<p>代表我要查詢 xtype 為 panel 底下有元件 id 為 myPanel</p>

<h2>attributes selector</h2>

<p>根據元件的屬性來選擇，舉例來說：</p>

<p>回傳擁有 iconCls 屬性的 Ext.Button 的實例：</p>

<pre><code>var btnOk= Ext.ComponentQuery.query('button[iconCls]');
</code></pre>

<p>其中如果 iconCls 等於 null 或是 false 都視為不符合條件。</p>

<p>除此只外也可以判斷屬性指定特定的值，如下：</p>

<pre><code>var btnOk= Ext.ComponentQuery.query('button[text = "ok"]'); 
</code></pre>

<p>取得 text 屬性為 &#8216;ok&#8217; 的 Ext.Button 的。</p>

<p>值得注意的是，屬性可以是任何自定義屬性：</p>

<pre><code>Ext.create("Ext.Panel" , {
   myAttribute: "helloWorld" 
});

Ext.ComponentQuery.query('panel[myAttribute= "helloWorld"]');
</code></pre>

<p>如上面的例子，自己定義的屬性也可以作為判斷。</p>

<h2>descendant(後代) selector</h2>

<p>用來選擇特定容器或容器組的後代，後代選擇器由兩個常用選擇器，中間加一個空格表示。其中前面的選擇器選擇父元件，後面的選擇器選擇後代元件，範例如下：</p>

<p>取得所有 id 為 &#8216;myCt&#8217; 中的 Ext.Panel：</p>

<pre><code>var panelsWithinmyCt = Ext.ComponentQuery.query('#myCt panel');
</code></pre>

<p>E F All descendant Components of E that match F (遞歸向下查詢所有可以符合的元件)</p>

<h2>child selector</h2>

<p>請注意這個選擇器與後代選擇器的區別，子選擇器（child selector）僅是指它的<strong>直接後代</strong>，而後代選擇器是作用於所有子後代元件。後代選擇器通過空格來進行選擇，而子選擇器是通過&#8217;>&#8217;進行選擇，範例如下：</p>

<p>取得所有 id 為 &#8216;myCt&#8217; 的 container 中的直接子元件 Ext.Panel ：</p>

<p>var directChildPanel = Ext.ComponentQuery.query(&#8216;#myCt > panel&#8217;);</p>

<p>E > F  All direct children Components of E that match F (查詢直接後代,其他非直接的則不符合)</p>

<p>參考下面範例來了解對應關係：</p>

<pre><code>Ext.create("Ext.Panel" , {
    itemId: "myCt" ,
    itmes:[{
        xtype: "panel" ,
        html : "我是 myCt 的直接後代，也是 myCt 的後代" ,
        itmes: [{
            xtype: "panel" ,
            html : "我是 myCt 的後代，但不是直接後代" ,
        }]
    }]
});
</code></pre>

<h2>parent selector</h2>

<p>查找給定元素的父容器（遞迴向上查找所有符合的元素)。</p>

<p>E ^ F  All parent Components of E that match F</p>

<pre><code>Ext.ComponentQuery.query('textfield ^ form');
</code></pre>

<h2>條件式關鍵字</h2>

<p>~=：符合完整的字串，以空白字元分開，假設我們有兩個元件：</p>

<pre><code>Ext.create('Ext.panel.Panel' , {
    cls: 'foo-cls my-cls bar-cls'
});

Ext.create( 'Ext.window.Window' , {
    cls: 'my-cls' 
});
</code></pre>

<p>下述查詢都會符合：</p>

<pre><code>Ext.ComponentQuery.query('panel[cls~=my-cls]');
</code></pre>

<p>^=：開頭符合的屬性，如同 stratWith</p>

<p>$=：結尾符合的屬性，如同 endWith</p>

<p>*=：任何地方只要符合都算，如同 indexOf</p>

<p>@：只查詢使用類別的屬性，不會去查詢 extend 的父類別的屬性，使用方式：</p>

<pre><code>Ext.ComponentQuery.query('panel[@collapsed=false]')
</code></pre>

<h2>Conditional matching(條件符合)</h2>

<p>符合同時滿足多個條件的符合表達式，AND：</p>

<pre><code>Ext.ComponentQuery.query('panel[cls~=my-cls][floating=true][title$="sales data"]');
</code></pre>

<p>符合用 &#8216;,&#8217; 逗號分隔的滿足任意一個條件的元件，OR：</p>

<pre><code>Ext.ComponentQuery.query('field[fieldLabel^=User], field[fieldLabel*=password]');
</code></pre>

<h2>Pseudo classes</h2>

<p>查詢滿足條件的第一個元素，<code>:first</code>：</p>

<pre><code>Ext.ComponentQuery.query('panel &gt; button:fi​​rst');
</code></pre>

<p>查詢滿足條件的最後一個元素，<code>:last</code>：</p>

<pre><code>Ext.ComponentQuery.query('form[title=Profile] field:last');
</code></pre>

<p>取得可以獲得焦點的元件，<code>:focusable</code>：</p>

<pre><code>panel . down ( ':focusable' ). focus ();
</code></pre>

<p>符合相反的結果，<code>:not</code>：</p>

<p>取得所有field但是xtype不是hiddenfield的元件</p>

<pre><code>form . query ( 'field:not( hiddenfield )' );
</code></pre>

<p>其中 <code>hiddenfield</code> 部分可以放任何表達式如 <code>title^=hello</code></p>

<p>指定每間隔多少的元件，<code>:nth-child</code>：</p>

<p>透過範例可以較清楚如何使用此種 selector</p>

<pre><code>//找出奇數的元件
form.query('field:nth-child(2n+1)'); 
//也可以使用關鍵字 :nth-child(odd)

//找出偶數的元件
form.query('field:nth-child(2n)');
//也可以使用關鍵字:nth-child(even)

//找出 3 倍數的元件
form.query('field:nth-child(3n)');
</code></pre>

<h2>關於使用 component.query 的效能上的建議</h2>

<p>從 extjs <a href="http://docs.sencha.com/extjs/4.2.1/#!/api/Ext.ComponentQuery-method-query">component.query API</a> 中，我們可以看到參數的使用為：<code>query( selector, [root] )</code></p>

<p>其中 root 為選用，指的是要從哪個 Container 的範圍開始進行查詢，雖然是選用，強烈建議最好都要設置，如此一來在執行查詢時，extjs 在小範圍進行查詢，總比全域搜尋來的快，所以我們可以這樣執行：</p>

<pre><code>var btnRefresh = Ext.ComponentQuery.query('#btnRefresh', container); 
</code></pre>

<p>使用 Ext.ComponentQuery 來進行查詢，又或者，我們可以直接對某個 container 進行 query</p>

<pre><code>var btnRefresh = container.query('#btnRefresh');
</code></pre>

<p>效果跟第一種方式一樣，都是區域性的元件 query。</p>

<h2>其他內建函數查詢</h2>

<p>更精確的定義，可以參考官方的 API 說明，如每個函式的連結。</p>

<p><a href="http://docs.sencha.com/extjs/4.2.1/#!/api/Ext.Queryable-method-down">down([selector])</a>：取得第一個的子元件</p>

<p><a href="http://docs.sencha.com/extjs/4.2.1/#!/api/Ext.Queryable-method-child">child([selector])</a>：取得第一個直接子元件</p>

<p><a href="http://docs.sencha.com/extjs/4.2.1/#!/api/Ext.AbstractComponent-method-up">up([selector],[limit])</a>：取得最接近的 container。</p>

<p>搞懂 compnent query 可以讓你在 extjs 的世界事半工倍，而且一點也不難的。</p>
<p><a rel="bookmark" href="http://smlsun.com/blog/2013/08/08/extjs-6-30/"></a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[遠端線上開會並且記錄的利器：google hangout]]></title>
<link href="http://smlsun.com/blog/2013/08/06/online-meeting-record/"/>
<updated>2013-08-06T13:01:00+08:00</updated>
<id>http://smlsun.com/blog/2013/08/06/online-meeting-record</id>

      <content type="html"><![CDATA[<p>無論在公司上班開會，還是外包接案子討論需求，以及團隊的內部教育訓練，很多時候我們希望開會內容能有個記錄，甚至是教育訓練的內容，也希望能有個記錄，這樣也不用為了新進人員在重新解說一次，而因為時間上配合不上的人也可以找個時間惡補一下訓練內容或者會議記錄。</p>

<p>為了達到這樣的效果，首要提供的功能就是要能夠有完整的記錄，包括聲音、影像、會議記錄，還有遠端桌面分畫面，比較過幾個目前常用的通訊軟體，唯一做的比較完整的是 google hangout，在這邊將一一介紹該如何透過 google hangout 來進行完整的線上會議。</p>

<p>有個狀況沒辦法避免，必須先跟大家說明，在會議執行的過程，沒辦法避免的，全世界都有辦法看到你的會議內容，因為必須使用 google + 裡面的 Hangout 直播功能，不過也別擔心，因為直播網址都是隨機產生，所以也不是那麼隨便可以看到，一旦會議結束，你可以將儲存後的影片權限設為 private，這樣沒有權限的人就看不到了。</p>

<p>上述狀況可以接受的話，我們就可以來看看該如何使用相關功能。</p>

<h2>發起 hangout 直播</h2>

<p>一開始提到過，如果你希望會議有個記錄那你就必須發起直播，這樣 google 才會將你的過程記錄下來，我們進入 google + 在下列的頁面點選 發起 hangout 直播：</p>

<p><img src="https://lh4.googleusercontent.com/-SDKoYEEr9vY/UgCT0MEcFeI/AAAAAAAALwA/tp1X9rRj5vM/w974-h619-no/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7+2013-08-06+%25E4%25B8%258B%25E5%258D%25881.36.41.jpg" alt="image" /></p>

<p>開始之前你必須先設定這次 hangout(會議) 的主題，到時完成時會依據你輸入的名字作為影片的片名，還有你要加入的使用者，當然，必須要有 google + 的帳號才可以使用，設定完以後你就進入 hangout 的畫面如下：</p>

<p><img src="https://lh5.googleusercontent.com/-39NaHtZJzS4/UgCT1JnH7UI/AAAAAAAALwI/FJn4wVKsdUc/w947-h619-no/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7+2013-08-06+%25E4%25B8%258B%25E5%258D%25881.37.57.jpg" alt="image" /></p>

<p>啟動後需要等待一下開始直播的按鈕才會亮起來，按下去表示要開始錄影了，這時你必須在等一下，直到訊息出現「視訊內容正在實況撥送中」如下圖：</p>

<p><img src="https://lh5.googleusercontent.com/-39NaHtZJzS4/UgCT1JnH7UI/AAAAAAAALwI/FJn4wVKsdUc/w947-h619-no/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7+2013-08-06+%25E4%25B8%258B%25E5%258D%25881.37.57.jpg" alt="image" /></p>

<p>就表示你可以開始講話，到這裡才算開始視訊記錄，除了基本的影音，我們當然希望可以有其他的工具可以輔助，接著將一一介紹。</p>

<h2>會議記錄</h2>

<p>在會議記錄的部份，hangout 整合的是 google 雲端硬碟，你可以直接在 hangout 左側看到，透過建立會議記錄，過程中有重要的資訊希望可以被記錄下來就可以使用該功能來進行，過程中也都是即時的記錄。</p>

<p><img src="https://lh5.googleusercontent.com/-Cx2HZZRbQUA/UgCT8d5QnKI/AAAAAAAALw4/rpW6s3kqWrI/w947-h619-no/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7+2013-08-06+%25E4%25B8%258B%25E5%258D%25882.00.16.jpg" alt="image" /></p>

<h2>螢幕分享</h2>

<p>在 hangout 的同時我們也可以將影像內容轉換為桌面操作的畫面，可以點選左邊的螢幕分享，如下圖：</p>

<p><img src="https://lh6.googleusercontent.com/-HG9iofFGlmo/UgCT7Kp7p0I/AAAAAAAALww/Hp33jBvlsU0/w754-h616-no/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7+2013-08-06+%25E4%25B8%258B%25E5%258D%25881.58.56.jpg" alt="link" /></p>

<p>我們可以分享單一程式，或是整個桌面，根據你會議需要呈現的內容而定。</p>

<h2>遠端桌面連線</h2>

<p>有了螢幕分享的紀錄，可在加上遠端桌面連線，市面上比較常用的有 teamview，其實 google 也有類似的，先來看 hangout 內建的，安裝很簡單，兩步驟，如下圖：</p>

<p><img src="https://lh6.googleusercontent.com/-vYmxMl99G6c/UgCT4_LJz0I/AAAAAAAALwg/BYx3rJy6GkM/w947-h619-no/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7+2013-08-06+%25E4%25B8%258B%25E5%258D%25881.48.31.jpg" alt="image" /></p>

<p><img src="https://lh3.googleusercontent.com/-ST3JtBm1nRA/UgCT57Mqm4I/AAAAAAAALwo/TDMJosMW5Vg/w947-h619-no/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7+2013-08-06+%25E4%25B8%258B%25E5%258D%25881.48.49.jpg" alt="image" /></p>

<p>如此一來有加入 hangout 夥伴的就可以隨時讓你操作他的桌面（需經過對方同意）。</p>

<p>或者使用 chrome 外掛 <a href="https://chrome.google.com/webstore/detail/chrome-remote-desktop/gbchcmhmhahfdphkhkmpfmihenigjmpp">Chrome 遠端桌面</a>，用起來跟 teamview 很像，也是需要產生一組驗證碼，筆者試用覺得蠻順的，重點是他不像 teamview 使用超過一定次數會斷線，有機會可以試試看。</p>

<p>上述是筆者覺得應該會比較常用的工具，其他就看讀者需求在發掘囉，最後要在來說明後續假設會議結束，我們可以點選上方的「結束直播」，結束之後，需要等待一段時間，可能二到三分鐘，你可以進入你的 <a href="http://www.youtube.com/my_videos">影片管理員</a>，有個公開的按鈕，如下圖</p>

<p><img src="https://lh4.googleusercontent.com/-c7PjacLMigE/UgCT9V9xJcI/AAAAAAAALxA/fE8qannhWGA/w974-h619-no/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7+2013-08-06+%25E4%25B8%258B%25E5%258D%25882.06.26.jpg" alt="image" /></p>

<p>會在進入下面的畫面，可以改變權限，並且設定可以觀看的使用者</p>

<p><img src="https://lh5.googleusercontent.com/-gGQvJY1C4Ak/UgCT-fUoLPI/AAAAAAAALxI/WtgUN3_bIuA/w974-h619-no/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7+2013-08-06+%25E4%25B8%258B%25E5%258D%25882.06.49.jpg" alt="image" /></p>

<p>完成影片觀看權限設定，這樣就可以確保你的影片只流傳在內部，不過要記得開完會後進行設定，不然吵架的樣子有可能被看到喔，除了這樣的風險外，hangout 真的是一個功能齊全的遠端開會服務，如果讀者有更好的選擇，別忘了來報一下好料喔！</p>
<p><a rel="bookmark" href="http://smlsun.com/blog/2013/08/06/online-meeting-record/"></a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[extjs-5-30 事件宣告的建議]]></title>
<link href="http://smlsun.com/blog/2013/08/05/extjs-5-30/"/>
<updated>2013-08-05T23:18:00+08:00</updated>
<id>http://smlsun.com/blog/2013/08/05/extjs-5-30</id>

      <content type="html"><![CDATA[<p>在使用 extjs 時，我們有幾個地方可以宣告事件的處理：</p>

<ol>
<li>在 controller 下宣告</li>
<li>在 component 下宣告</li>
</ol>


<p>一般剛開始使用 extjs 會搞不清楚什麼時候該使用 mvc 中的 controller 來定義，又或者直接宣告在 component 上，特別是 extjs 4 一大特性 mvc，會讓使用者覺得宣告在 controller 是第一選擇，這樣架構上比較符合官方建議，其實不然，既然 extjs 也支援在 component 上宣告事件，自然有其意義。</p>

<p>既然兩個方式都可以宣告事件，我們該如何區別事件的歸屬呢？筆者認為可以從事件發生關係到的元件或者元件特性（特定功能或是共用元件）來做區別，在明確的說，假設事件所操作的對象所涵蓋的範圍只有該元件以及元件 item 屬性底下所掛載的其他元件，那就應該定義在元件上，若是事件處理涵蓋多個元件的組合互動，那就應該要使用 controller 來定義。</p>

<p>另一個角度，如果該功能屬於共用元件，那事件應該定義在元件底下，屬於特定的功能事件，那應該使用 controller 來處理。</p>

<p>如此一來，如果是定義在元件上的事件，只要某功能有引入該元件，就不需要重覆定義，該元件就有基本的事件互動，一旦需要調整，也不需要一一去改有用到的元件，只要修改宣告事件的元件即可，這樣的情形就像通用元件的狀況，相反地，定義在 controller 的事件就是個別功能的特性了。</p>

<p>舉例來說，如筆者上一篇 <a href="http://smlsun.com/blog/2013/08/05/extjs-4-30/">精簡程式碼案例分享</a> 中的範例是一個標準的功能工具列，事件的定義就是宣告在元件定義上，之後只要有引入使用該標準工具列，就不需要在定義相關的事件。</p>

<p>最後根據上述的內容，整理出建議的事件定義對象</p>

<ol>
<li>如果事件的處理需要整合多個元件那應該定義在 controller 底下</li>
<li>如果該元件屬於特定功能才有的元件就算事件範圍只在某元件底下，事件還是要要定義在 controller 底下。</li>
<li>如果事件處理範圍只屬於某個元件底下並且屬於公用元件，那事件應該定義在元件</li>
</ol>

<p><a rel="bookmark" href="http://smlsun.com/blog/2013/08/05/extjs-5-30/"></a></p>]]></content>
    </entry>
  
</feed>
