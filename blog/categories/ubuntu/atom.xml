<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ubuntu | 蹤影]]></title>
  <link href="http://smlsun.com/blog/categories/ubuntu/atom.xml" rel="self"/>
  <link href="http://smlsun.com/"/>
  <updated>2013-05-09T21:24:40+08:00</updated>
  <id>http://smlsun.com/</id>
  <author>
    <name><![CDATA[smlsun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ubuntu 中安装 apache ab 進行壓力測試]]></title>
    <link href="http://smlsun.com/blog/2013/02/23/ubuntu-apache-ab-benchmarking/"/>
    <updated>2013-02-23T11:35:00+08:00</updated>
    <id>http://smlsun.com/blog/2013/02/23/ubuntu-apache-ab-benchmarking</id>
    <content type="html"><![CDATA[<p>資料來源： <a href="http://hikin.iteye.com/blog/866582">ubuntu 中安装 apache ab 來進行簡單的壓力測試</a></p>

<p>在 ubuntu 底下安裝 apache ab 很簡單：</p>

<p>apt-get install apache2-utils</p>

<p>我們可以透過以下指令來做簡單測試：</p>

<p>ab -n 100 -c 10 http://localhost:8080/</p>

<p>其中關於 ab 其他指令的運用可以參考 man</p>

<p>Usage: ab [options] [http[s]://]hostname[:port]/path
Options are:</p>

<pre><code>//總需求數
-n requests Number of requests to perform宅 

//一次同時併發的請求數 總的請求數(n)=次數*一次併發數(c) 
-c concurrency Number of multiple requests to make

-t timelimit Seconds to max. wait for responses
-b windowsize Size of TCP send/receive buffer, in bytes
-p postfile File containing data to POST. Remember also to set -T
-u putfile File containing data to PUT. Remember also to set -T
-T content-type Content-type header for POSTing, eg.
'application/x-www-form-urlencoded'
Default is 'text/plain'
-v verbosity How much troubleshooting info to print
-w Print out results in HTML tables
-i Use HEAD instead of GET
-x attributes String to insert as table attributes
-y attributes String to insert as tr attributes
-z attributes String to insert as td or th attributes
-C attribute Add cookie, eg. 'Apache=1234. (repeatable)
-H attribute Add Arbitrary header line, eg. 'Accept-Encoding: gzip'
Inserted after all normal header lines. (repeatable)
-A attribute Add Basic WWW Authentication, the attributes
are a colon separated username and password.
-P attribute Add Basic Proxy Authentication, the attributes
are a colon separated username and password.
-X proxy:port Proxyserver and port number to use
-V Print version number and exit
-k Use HTTP KeepAlive feature
-d Do not show percentiles served table.
-S Do not show confidence estimators and warnings.
-g filename Output collected data to gnuplot format file.
-e filename Output CSV file with percentages served
-r Don't exit on socket receive errors.
-h Display usage information (this message)
-Z ciphersuite Specify SSL/TLS cipher suite (See openssl ciphers)
-f protocol Specify SSL/TLS protocol (SSL2, SSL3, TLS1, or ALL)
</code></pre>

<p>實際的運行報告呈現如下：</p>

<pre><code>Server Software: lighttpd/1.4.20
Server Hostname: hikin.iteye.com
Server Port: 80

Document Path: /
Document Length: 2095 bytes

Concurrency Level: 10

//整個測試持續的時間 
Time taken for tests: 3.303 seconds

//完成的請求數量 
Complete requests: 100
Failed requests: 0
Write errors: 0
Total transferred: 235200 bytes
HTML transferred: 209500 bytes

//平均每秒處理30個請求 
Requests per second: 30.27 [#/sec] (mean)

//平均每個請求處理時間為330毫秒 注:這裡將一次10個併發請求看成一個整體 
Time per request: 330.335 [ms] (mean)

//平均每個併發請求處理 時間 為33毫秒 
Time per request: 33.034 [ms] (mean, across all concurrent requests)
Transfer rate: 69.53 [Kbytes/sec] received

Connection Times (ms)
min mean[+/-sd] median max
Connect: 51 170 35.9 178 230
Processing: 60 153 64.5 121 263
Waiting: 55 148 64.4 115 258
Total: 235 322 59.9 299 437

Percentage of the requests served within a certain time (ms)

//在這100個請求中有50%在299毫秒內完成 
50% 299

//在這100個請求中有66%在312毫秒內完成 
66% 312
75% 383
80% 412
90% 431
95% 432
98% 436
99% 437
100% 437 (longest request)
</code></pre>

<p>以往要用人工來進行測試，使用 apache ab 可以很快速的完成，讓壓力測試不再是個黑盒子，永遠不知道到底系統運行效率如何。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mysql5 tomcat7 安裝與注意事項以及透過 apache2 運行 phpmyadmin]]></title>
    <link href="http://smlsun.com/blog/2013/02/22/mysql5-tomcat7-install/"/>
    <updated>2013-02-22T18:43:00+08:00</updated>
    <id>http://smlsun.com/blog/2013/02/22/mysql5-tomcat7-install</id>
    <content type="html"><![CDATA[<p>最近為了運行依一個專案是用 tomcat 作為 AP 與 mysql 作為 DB 的運行環境，實際跑過一次安裝步驟，與過程中的疑難排解，特別寫篇文章記錄一下，順變給有需要的朋友參考看看。</p>

<p>之前在公司時所使用的環境是以 jboss 作為 AP 以及 ms sql 作為 db，而所使用的 os 是 windows xp，基本上還算單純，jboss 解開下載回來的 zip 檔，基本上就可以使用了，而 ms sql 安裝上也不能，只是要注意是否允許資料庫分辨大小寫，以及資料庫編碼方式等。</p>

<p>而這次所要安裝的環境是在 ubuntu 底下，步驟就比較繁瑣了，包括安裝位置什麼的，都有固定位置，更重要的還有權限控管，環境參數等，如果沒有設置好的話是沒有辦法運行的。</p>

<p>首先就先從安裝 mysql 開始啦！</p>

<h2>mysql</h2>

<p>在 ubuntu 安裝 mysql 很簡單只要一句：</p>

<p><code>sudo apt-get install mysql-server</code></p>

<p>安裝完成後會詢問 root 密碼，輸入完成後，接著我們就可進行登入，使用下列語法：</p>

<p><code>mysql -u root -p [資料庫名稱]</code></p>

<p>上述指定，如果沒有如入資料庫名稱，則為資料庫的根目錄，一旦登入後，需要指定操作的資料庫可用下列指令：</p>

<p><code>use [資料庫名稱] ;</code></p>

<p>其中最後的 <code>;</code> 請要記得輸入，那是作為指令結束的識別，有了 <code>;</code> 才會執行，接著一旦登入完成後我們可以建立一個新的資料庫。</p>

<p><code>create database demo</code></p>

<p>預設來說，新增的資料庫是不支援中文，所以如果你要建立資料庫是屬於 utf-8 的編碼方式可以用下列指令：</p>

<p><code>CREATE DATABASE demo DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;</code></p>

<p>再來如果你要新建一個使用者帳號，可以用下列指令，需先登入 mysql：</p>

<p><code>create user 'UserName'@'Host' identified by 'Password';</code></p>

<p>ex:</p>

<p><code>create user 'joey'@'localhost' identified by 'abcd2345';</code></p>

<p>如果你不指定 host 可以先用 <code>%</code> 取代如：</p>

<p><code>create user 'joey'@'%' identified by 'abcd2345';</code></p>

<p>在 mysql 官方的說明如下：</p>

<blockquote><p>If you specify only the user name part of the account name, a host name part of '%' is used.</p></blockquote>

<p>user 建立好了，接著就要給予權限啦：</p>

<p><code>grant OPTION on TARGET to USER;</code></p>

<p>範例如下：</p>

<p><code>grant all on *.* to 'joey'@'localhost';</code></p>

<p>上述的意思是 joey 對整個資料庫的所有資料表都擁有全部的權利，如果要指定 joey 只擁有對 demo 這個資料檔[的所有表格]的查詢及新增權利，指令如下：</p>

<p><code>grant select,insert on demo.* to 'joey'@'localhost';</code></p>

<p>假使我們需要知道目前有建立的使用者有哪些，可以使用下列指令顯示 mysql 這個資料庫中 user 資料表的 Host 及 User 欄位：</p>

<p><code>select Host, User from mysql.user;</code></p>

<p>最後如果你要刪除 user 可以用下列指令：</p>

<p><code>drop user OPTION 'UserName'@'Host';</code></p>

<p>如果你需要啟動或停止 mysql 可以用下列指令：</p>

<ul>
<li>啟動： <code>sudo start mysql</code></li>
<li>關閉： <code>sudo stop mysql</code></li>
<li>重啟： <code>sudo restart mysql</code></li>
</ul>


<p>上面就是 mysql 的基礎安裝，當然如果希望一個 gui 元件來管理 mysql，請接著看以下介紹：</p>

<h2>phpmyadmin</h2>

<p>安裝指令也很簡單：</p>

<p><code>sudo apt-get install libapache2-mod-auth-mysql php5-mysql phpmyadmin</code></p>

<p>請根據安裝步驟將他完成，詳細可參考此網址：<a href="http://www.distrogeeks.com/install-phpmyadmin-ubuntu/">Install phpMyAdmin in Ubuntu</a>，其中因為 phpmyadmin 是 php 寫的因此需要運行於 server 上，在這我所使用的是 apache2 可以透過下列指令安裝：</p>

<p><code>sudo apt-get install apache2</code></p>

<p>安裝完成後可以透過瀏覽下列網址來進行操作 <code>http://localhost/phpmyadmin</code>，不過有可能你會看到 404 因此如果你真的遇到了請增加下列步驟：</p>

<p>編輯：</p>

<p><code>sudo vim /etc/apache2/apache2.conf</code></p>

<p>加入下列字串：</p>

<p><code>Include /etc/phpmyadmin/apache.conf</code></p>

<p>重啟 apache2</p>

<p><code>sudo /etc/init.d/apache2 restart</code></p>

<p>你也可以使用啟動與停止：</p>

<pre><code>sudo /etc/init.d/apache2 start   #start apache
sudo /etc/init.d/apache2 stop   #stop apache
sudo /etc/init.d/apache2 restart   #restart apache
</code></pre>

<p>如此一來你就可以用 gui 介面來管理或維護資料庫啦！</p>

<p><img src="https://lh6.googleusercontent.com/-HsxmrVP4C6U/USgqWZS9EaI/AAAAAAAALic/LBXHLR96Wf0/s786/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-02-23+%E4%B8%8A%E5%8D%8810.32.29.jpg" alt="image" /></p>

<p>mysql 的 介紹算是告一段落了，一些進階的就請 google 一下囉！接著來看 tomcat7 的安裝。</p>

<h2>tomcat7</h2>

<p>在 ubuntu 底下我們可用下列指令來安裝 tomcat7：</p>

<p>sudo apt-get install tomcat7</p>

<p>安裝完成後，我們可以透過下列指令來啟動或關閉 tomcat7：</p>

<ul>
<li>啟動： <code>sudo service tomcat7 start</code></li>
<li>關閉： <code>sudo service tomcat7 stop</code></li>
<li>重啟： <code>sudo service tomcat7 restart</code></li>
</ul>


<p>如果是使用 apt-get install tomcat7 相關檔案放置位置如下：</p>

<ul>
<li><code>/etc/tomcat6</code> for configuration and runtime, called CATALINA_HOME</li>
<li><code>/var/lib/tomcat7/webapps/</code> webapps 的位置</li>
<li><code>/usr/share/tomcat7</code>bin 的位置</li>
</ul>


<p>如果你不想透過 apt-get install tomcat7 可以參考這篇文章安裝：<a href="http://diegobenna.blogspot.tw/2011/01/install-tomcat-7-in-ubuntu-1010.html">Install Tomcat 7 on Ubuntu 12.04</a>，需要注意的是，如果是自行安裝 JAVA_HOME 的設定必須確實，如果設定錯誤，啟動 tomcat 時不會出現明確的錯誤訊息。</p>

<p>以上就是 tomcat 與 mysql 的安裝步驟。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何令各個 OS 透過 andorid 手機的 usb 網路共用來進行 3g 網路上網]]></title>
    <link href="http://smlsun.com/blog/2013/02/15/mac-andorid-usb-3g/"/>
    <updated>2013-02-15T16:55:00+08:00</updated>
    <id>http://smlsun.com/blog/2013/02/15/mac-andorid-usb-3g</id>
    <content type="html"><![CDATA[<p>在智慧型手機盛行的現在，很多時候出門在外需要共享網路時 android 提供很方便的網路分享機制可以讓我將 3g 網路分享給周遭的設備，一個是透過 wifi 另一個就是透過 usb 網路共享啦。</p>

<p>當然很多時候透過 wifi 是很方便，但是利用 wifi 分享網路有些問題：那就是有可能不穩定，手機耗電，以及最重要的傳輸速度比使用 usb 網路共用來的慢很多很多，假設在外工作的話，你可不想讓網路速度影響你的工作效率吧！</p>

<p>已筆者身邊的手機 nexus one 為例，將一一介紹如何在目前三個最大的 os 進行 usb 網路共享。</p>

<h2>Windows</h2>

<ol>
<li>請先下載 android  windows 專用的驅動程式：<a href="http://www.android.com/drivers/tetherxp.inf">tetherxp.inf</a></li>
<li>將 android 設定中的 USB 網路共用開啟</li>
<li>把手機連結到 windows 上，會跳出安裝驅動程式的訊息，此時驅動選擇第一步驟所下載的檔案</li>
<li>等待安裝完成，就可以快快樂樂上網啦！</li>
</ol>


<h2>Ubuntu</h2>

<p>沒什麼好說的，Ubuntu 沒想到是最方便的，手機插上電腦，開啟 android 網路共享，就可以上網了，連驅動都不用裝，太棒了！</p>

<h2>Apple MacBook</h2>

<p>參考這篇文章 <a href="http://smartphones.wonderhowto.com/how-to/usb-tether-your-android-device-your-mac-without-rooting-0140478/">How to USB Tether Your Android Device to Your Mac—Without Rooting</a></p>

<ol>
<li>請先下載 <a href="https://github.com/downloads/jwise/HoRNDIS/HoRNDIS-rel2.pkg">HoRNDIS-rel2.pkg</a>，將他安裝完成</li>
<li>連上你的 andorid phone</li>
<li>開啟 usb 網路共用</li>
<li>接著你就可以在網路偏好設定中看到你的手機已被掛載上網路啦！</li>
</ol>


<p>上面就是各 os 使用 android usb 網路共用的步驟，即使你是使用桌機沒有牽網路，也沒有 wifi 也可以透過這樣的方式分享網路進行上網，對於遊牧各地只有 3g 在手的朋友，可以更方便的讓其他設備上網，工作起來也將更得心應手，能夠全速飆網，工作才能行雲流水阿！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tips: customize live cd]]></title>
    <link href="http://smlsun.com/blog/2013/01/25/customize-live-cd/"/>
    <updated>2013-01-25T10:29:00+08:00</updated>
    <id>http://smlsun.com/blog/2013/01/25/customize-live-cd</id>
    <content type="html"><![CDATA[<p>最近在研究如何製作 live cd 也因為這項研究，讓我更熟悉 linux 的架構，發現一些有用的知識，與 linux 運作的設定，這篇算是筆記，陸續在新增</p>

<ul>
<li><p><code>/etc/skel</code></p>

<p>  在這資料夾下面的檔案，只要當新增使用者時，就會複製一份給新增使用者，當你需要有一些預設設定時很好用，比如說：chrome 要有預設的首頁以及捷徑，還有輸入法預設有哪些等。</p></li>
</ul>


<hr />

<ul>
<li><p><code>/etc/xdg/autostart/</code></p>

<p>  global 自動執行，放在底下的 *.desktop 將會自動執行</p></li>
</ul>


<hr />

<ul>
<li><p><code>~/.config/autostart/</code></p>

<p>  local 自動執行，同 <code>/etc/xdg/autostart/</code>，可搭配 <code>/etc/skel</code> 服用，如果你有每個使用者登入就要執行某些程式的需求</p></li>
</ul>


<hr />

<ul>
<li><p><code>/etc/rc.local</code></p>

<p>  當你登入系統時，希望要執行任何 command 可以在這編輯，比如說：製作 livecd 一開始時是在 command 模式，你想要讓他直接進到 xwindow 通常需要下 startx，此時就可以在這檔案裡編寫指令，讓他自動執行。需要注意的是在這直接執行 <code>startx</code> 將是使用 root 的身分，在 etc 底下都屬於 global</p>

<p>  相關說明：</p>

<ul>
<li><a href="http://linux.vbird.org/linux_basic/0510osloader.php#startup_sysinit">init 處理系統初始化流程 (/etc/rc.d/rc.sysinit)</a></li>
<li><a href="http://linux.vbird.org/linux_basic/0510osloader.php#startup_runlevel">啟動系統服務與相關啟動設定檔 (/etc/rc.d/rc N &amp; /etc/sysconfig)</a></li>
<li><a href="http://linux.vbird.org/linux_basic/0510osloader.php#startup_local">使用者自訂開機啟動程序 (/etc/rc.d/rc.local)</a></li>
</ul>
</li>
</ul>


<hr />

<ul>
<li><p>live cd 啟動後，沒有 gdm 的情況下，自動登入 xwindow</p>

<p>  well，這是特定的議題，在查相關資料時，一度認為要用 <code>/etc/rc.local</code> 來解，但後來發現不適用，因為他是用 root，會造成 chrome 無法開啟，故我需要用一般 user 登入，需要將啟動判斷式改放在 <code>.bash_profile</code></p>

<p>  加入下列語法；</p></li>
</ul>


<p>``` bash
if [ -z "$DISPLAY" ] &amp;&amp; [ $(tty) == /dev/tty1 ]; then</p>

<pre><code>startx
</code></pre>

<p>fi
```</p>

<p>相關說明可以看這：<a href="http://linux.vbird.org/linux_basic/0320bash.php#settings_bashrc">bash 環境設定檔</a></p>

<hr />

<ul>
<li><p><code>locale-gen zh_TW.UTF-8</code></p>

<p>  改變系統語系指令，範例為變更為繁體中文環境</p></li>
</ul>


<hr />

<ul>
<li><p><code>apt-get --yes autoremove</code></p>

<p>  製作 live cd 對於容量要很講究，故要將一些沒有相依不需要的套件進行移除，就可以使用這個指令</p></li>
<li><p>產生 live cd 範例 makefile</p>

<p>  下面是我做出來的 makefile 有需要的就拿去參考吧！</p></li>
</ul>


<p>``` bash
LIVECD_HOME=~/livecd
LIVECD_TMP=/tmp/livecd</p>

<p>ORG_ISO_URL=http://www.ubuntu-mini-remix.org/download/12.10
ORG_ISO_NAME=ubuntu-mini-remix-12.10-i386.iso</p>

<p>CREATE_ISO_NAME=Ubuntu-cusmize-livecd.iso</p>

<p>DEPLOY_LOC=~/
DEPLOY_REMOTE=user@ip:~/</p>

<p>all: clean</p>

<p>clean:</p>

<pre><code>- sudo umount ${ORG_ISO_NAME}
- sudo umount ${LIVECD_TMP}/casper/filesystem.squashfs
- sudo umount ${LIVECD_HOME}/custom/proc/
- sudo umount ${LIVECD_HOME}/custom/sys/
sudo rm -rf ${LIVECD_HOME}
</code></pre>

<p>init: clean</p>

<pre><code>wget -nc ${ORG_ISO_URL}/${ORG_ISO_NAME}
sudo apt-get install squashfs-tools dchroot
- mkdir ${LIVECD_TMP}
- sudo mount -o loop ${ORG_ISO_NAME} ${LIVECD_TMP}
- mkdir -p ${LIVECD_HOME}/cd
rsync --exclude=/casper/filesystem.squashfs -a ${LIVECD_TMP}/ ${LIVECD_HOME}/cd
- mkdir ${LIVECD_HOME}/squashfs  ${LIVECD_HOME}/custom
sudo modprobe squashfs
- sudo mount -t squashfs -o loop ${LIVECD_TMP}/casper/filesystem.squashfs ${LIVECD_HOME}/squashfs/
sudo cp -a ${LIVECD_HOME}/squashfs/* ${LIVECD_HOME}/custom
sudo cp /etc/resolv.conf /etc/hosts ${LIVECD_HOME}/custom/etc/  
</code></pre>

<p>install: init</p>

<pre><code># copy install script 在 install.sh 寫入你需要安裝的套件
sudo chmod +x install.sh
sudo cp install.sh ${LIVECD_HOME}/custom/home/

sudo chroot ${LIVECD_HOME}/custom /home/./install.sh
</code></pre>

<p>build: install</p>

<pre><code>chmod +w ${LIVECD_HOME}/cd/casper/filesystem.manifest
sudo chroot ${LIVECD_HOME}/custom dpkg-query -W --showformat='${Package} ${Version}\n' &gt; ${LIVECD_HOME}/cd/casper/filesystem.manifest
sudo cp ${LIVECD_HOME}/cd/casper/filesystem.manifest ${LIVECD_HOME}/cd/casper/filesystem.manifest-desktop
sudo mksquashfs ${LIVECD_HOME}/custom ${LIVECD_HOME}/cd/casper/filesystem.squashfs
cd ${LIVECD_HOME}/cd ;sudo mkisofs -r -V "Ubuntu-cusmize-livecd" -b isolinux/isolinux.bin -c isolinux/boot.cat -cache-inodes -J -l -no-emul-boot -boot-load-size 4 -boot-info-table -o ~/${CREATE_ISO_NAME} .
</code></pre>

<p>deploy: build</p>

<pre><code>scp ~/${CREATE_ISO_NAME} ${DEPLOY_REMOTE}
</code></pre>

<p>deploy_loc: build</p>

<pre><code>cp ~/${CREATE_ISO_NAME} ${DEPLOY_LOC}
</code></pre>

<p>test:</p>

<pre><code>qemu-system-i386 -cdrom ~/${CREATE_ISO_NAME} -boot d -m 512
</code></pre>

<p>```</p>

<p>其中 install.sh：</p>

<p>``` bash</p>

<h1>!/bin/bash</h1>

<p>mount -t proc none /proc/
mount -t sysfs none /sys/
export HOME=/root</p>

<p>locale-gen zh_TW.UTF-8
update-locale LANG=zh_TW.UTF-8</p>

<p>sudo apt-get update</p>

<p>sudo apt-get --yes install lxde
sudo apt-get --yes install language-support-zh language-pack-gnome-zh<em> ttf-arphic-</em></p>

<p>wget https://dl.google.com/linux/direct/google-chrome-stable_current_i386.deb</p>

<p>sudo dpkg -i ./google-chrome*.deb
sudo apt-get --yes -f install</p>

<p>rm google-chrome-stable_current_i386.deb</p>

<p>sudo apt-get --yes install Leafpad
sudo apt-get --yes install xinit
sudo apt-get --yes install ibus
sudo apt-get --yes install ibus-chewing
sudo apt-get --yes install lxterminal
sudo apt-get --yes install ttf-arphic-uming</p>

<p>sudo apt-get --yes purge xscreensaver</p>

<p>apt-get --yes autoremove
apt-get clean
rm -rf /tmp/*
rm -f /etc/hosts /etc/resolv.conf
umount /proc/
umount /sys/
exit</p>

<p>```</p>

<p>話說：最近越來越 linux 了～</p>
]]></content>
  </entry>
  
</feed>
