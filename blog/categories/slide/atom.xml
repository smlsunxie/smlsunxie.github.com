<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: slide | 蹤影]]></title>
  <link href="http://smlsun.com/blog/categories/slide/atom.xml" rel="self"/>
  <link href="http://smlsun.com/"/>
  <updated>2013-02-01T21:21:45+08:00</updated>
  <id>http://smlsun.com/</id>
  <author>
    <name><![CDATA[smlsun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[More Advanced octopress with Slide Features]]></title>
    <link href="http://smlsun.com/blog/2012/11/29/octopress-slide-advanced-More/"/>
    <updated>2012-11-29T11:44:00+08:00</updated>
    <id>http://smlsun.com/blog/2012/11/29/octopress-slide-advanced-More</id>
    <content type="html"><![CDATA[<p>octopress slide 系列又來了，第三彈！不知道會不會再有續集⋯</p>

<p>哈～就讓我們繼續看下去～</p>

<p>前一篇：<a href="http://smlsun.com/blog/2012/11/28/octopress-slide-advanced/">octopress Slide Advanced</a></p>

<p>再上一篇的最後有說到：</p>

<blockquote><p>這部份我覺得可以在方便點改成下列樣式，實際用時常常會漏掉div tag 的開始或結束</p></blockquote>

<p><code>
{% slideFirst %}
  ## Title
  content
{% slide $}
  ## Title
  content
{% slide $}
  ## Title
  content
{% slideEnd $}
</code></p>

<blockquote><p>其中 slideFirst 替換成 <code>&lt;div class='slide'&gt;</code></p>

<p>slide 替換成 <code>&lt;/div&gt;&lt;div class='slide'&gt;</code></p>

<p>最後 slideEnd 替換成 <code>&lt;/div&gt;</code></p></blockquote>

<p>well，我將他完成了！這算是我的Ruby初體驗，進入正題：</p>

<p>一開始我想說，嗯～如果要完成這樣的功能，我需要能夠自定Liquid tag</p>

<p>再上一篇有提到，slide功能的實作是參考網路上的大大kmees，他有實作一個plugin <strong>slide.rb</strong>，原本的程式碼如下：</p>

<p>``` ruby
require 'rdiscount'</p>

<p>module Jekyll
  class Slide &lt; Liquid::Block</p>

<pre><code>SlideId = /(\w+)/

def initialize(tag_name, markup, tokens)
  super
  @id = nil
  if markup.strip =~ SlideId
    @id = $1
  end
end

def render(context)
  id_tag = " id='#{@id}'" unless @id.nil?
  content = RDiscount.new(super.strip, :smart).to_html.chop
  "&lt;div class='slide'#{id_tag}&gt;#{content}&lt;/div&gt;".strip
end
</code></pre>

<p>  end
end</p>

<p>Liquid::Template.register_tag('slide', Jekyll::Slide)
```
可以看到 他繼承了 Liquid::Block
大致上的重點：</p>

<ol>
<li>因為繼承 Liquid::Block，所以有開始就必須要有結束，所以原PO必須<code>{% slide %}</code> <code>{% endslide $}</code>成對，這也造成我認為不方便的地方，有時候容易遺漏</li>
<li>利用<code>initialize</code>取出 tag的id數值</li>
<li>render時將 Slide Block 範圍的 content 內容透過 <code>RDiscount</code>將markdown語法轉換成html</li>
<li>將轉換好的內容利用 div tag 包起來，並且將 第一步取得的id 填入div id屬性</li>
<li>最後再將tag 註冊到Liquid::Template (23行)，讓 Liquid 知道遇到{ % slide %}要進行處理</li>
</ol>


<p>大致上運作原理如上，用下面的例子來看：</p>

<p><code>
{% slide first %}
  ## Title
  content
{% endslide $}
</code></p>

<p>轉換出來的結果為：</p>

<p>```html</p>

<div class='slide' id='first'>
  <h2>Title</h2>
  content
</div>


<p>```
原文都有上述說明，大家可以去看，接著！為了讓文章開頭所說的，更方便進行slide的建立，中間我有做一個錯誤的版本，我天真的認為Jekyll本身就會將markdown內容進行轉換，故第一版的設計我做了一些調整，</p>

<ol>
<li>將原本 Slide改為繼承 <code>Liquid::Tag</code> 直接輸出 <code>&lt;/div&gt;&lt;div class='slide'&gt;</code></li>
<li>新增 slideStart 輸出 <code>&lt;div class='slide' id='first'&gt;</code></li>
<li>新增 slideEnd 輸出 <code>&lt;/div&gt;</code></li>
</ol>


<p>試著preview 看看：
<code>
{% slideStart %}
  ## Title
  content
{% Slide $}  
  ## Title
  content
{% SlideEnd $}
</code>
哈哈！事情果然不是我想的那樣，輸出結果如下：</p>

<p>```html</p>

<div class='slide'>
  ## Title
  content
</div>


<div class='slide'>
  ## Title
  content
</div>


<p>```</p>

<p>well~沒有進行轉換，就是缺了RDiscount的處理，上網查一下他就是轉換markdown的轉譯器</p>

<p>再接再厲，調整過後完整的<strong>slide.rb</strong>，如下：</p>

<p>``` ruby
require 'rdiscount'</p>

<p>module Jekyll</p>

<p>  class SlideBlock &lt; Liquid::Block</p>

<pre><code>SlideId = /(\w+)/

def initialize(tag_name, markup, tokens)
  super
  @id = nil
  if markup.strip =~ SlideId
    @id = $1
  end
end

def render(context)
  id_tag = " id='#{@id}'" unless @id.nil?
  content = RDiscount.new(super.strip, :smart).to_html.chop
  "&lt;div class='slide'#{id_tag}&gt;#{content}&lt;/div&gt;".strip
end
</code></pre>

<p>  end</p>

<p>  class Slide &lt; Liquid::Tag</p>

<pre><code>SlideId = /(\w+)/

def initialize(tag_name, markup, tokens)
  super
  @id = nil
  if markup.strip =~ SlideId
    @id = $1
  end
end

def render(context)
  id_tag = " id='#{@id}'" unless @id.nil?
  content = "&lt;/div&gt;&lt;div class='slide'#{id_tag}&gt;"
end
</code></pre>

<p>  end</p>

<p>end
Liquid::Template.register_tag('slideBlock', Jekyll::SlideBlock)
Liquid::Template.register_tag('slide', Jekyll::Slide)</p>

<p>```</p>

<p>重點如下：</p>

<ol>
<li>原PO 的 <code>Slide &lt; Liquid::Block</code> 保留，還是有markdown轉換的處理，更名為 <code>SlideBlock &lt; Liquid::Block</code></li>
<li>新增 <code>Slide &lt; Liquid::Tag</code> ，輸出 <code>&lt;/div&gt;&lt;div class='slide'#{id_tag}&gt;</code></li>
</ol>


<p>來看結果，範例如下：</p>

<p>```
{% slideBlock %}</p>

<h2>title</h2>

<p>{% slide %}</p>

<h2>title</h2>

<p>{% slide %}</p>

<h2>title</h2>

<p>{% endslideBlock %}
```</p>

<p>就可以正確轉換，只要整個slide開始結束，特別使用 <code>{% slideBlock %}</code> 與 <code>{% endslideBlock %}</code></p>

<p>中間都用 <code>{% slide %}</code>把每個段落隔開就OK啦，是不是方便許多，也不會再有忘記關閉block的情形，so easy!</p>

<h2>打完收工！</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octopress slide Advanced]]></title>
    <link href="http://smlsun.com/blog/2012/11/28/octopress-slide-advanced/"/>
    <updated>2012-11-28T15:46:00+08:00</updated>
    <id>http://smlsun.com/blog/2012/11/28/octopress-slide-advanced</id>
    <content type="html"><![CDATA[<p>之前為了讓octopress可以根據layout的改變為slide，後續加上了nav bar，以及footer bar，可以使用share功能</p>

<h3>不過！！</h3>

<p>後來看到網路上的大大做了更好的實作</p>

<ul>
<li><a href="http://kmees.github.com/blog/2012/07/07/html-presentations-with-octopress-and-deck-dot-js/">HTML Presentations With Octopress and deck.js</a></li>
<li><a href="http://kmees.github.com/blog/2012/07/16/html-presentations-with-octopress-and-deck-dot-js-part-ii/">HTML Presentations With Octopress and deck.js - Part II</a></li>
</ul>


<p>呈現出來的結果如下：<a href="http://kmees.github.com/slides/rugsaar-octopress.html">octopress with slide advanced</a></p>

<p>與 octopress 整合的更好，而且分類與設定更加的完善</p>

<p>於是乎，我把該位大大的<a href="https://github.com/kmees/kmees.github.com">github.com/kmees</a> clone 回來調整了一下</p>

<p>有幾個不錯的特性</p>

<ul>
<li>支援 rake new_slides</li>
</ul>


<p>與now_post類似，new_slides會將新的slides文章新增在 <code>source/slides</code> 下，同樣當你執行rake generate deploy preview 時都會幫你進行轉換，方便吧！</p>

<ul>
<li>根據post的title屬性來變更silde的佈景，以及換頁動畫，如下：
```</li>
</ul>


<hr />

<p>layout: slides
title: "Demo Slides"
sidebar: false
deck_scale: false
deck_theme: web-2.0</p>

<h2>deck_transition: fade</h2>

<p><code>
* 在silde區隔的部份更方便，使用custom ``Liquid::Block``，來產生html code，like that:
</code>
{% slide %}
  ## Title
  content
{% endslide $}
<code>
這部份我覺得可以在方便點改成下列樣式，實際用時常常會漏掉div tag 的開始或結束
</code>
{% slideFirst %}
  ## Title
  content
{% slide $}
  ## Title
  content
{% slide $}
  ## Title
  content
{% slideEnd $}
<code>`
其中 slideFirst 替換成</code><div class='slide'>``</p>

<p>slide 替換成 <code>&lt;/div&gt;&lt;div class='slide'&gt;</code></p>

<p>最後 slideEnd 替換成 <code>&lt;/div&gt;</code></p>

<p>呈現起來也不錯，剛剛好這禮拜要去講一個talk，實際完成品 <a href="http://smlsunxie.github.com/slides/java-with-node.html">nodejs+java</a>，整體更一致了！</p>

<p>how about that??試試看囉！</p>
]]></content>
  </entry>
  
</feed>
