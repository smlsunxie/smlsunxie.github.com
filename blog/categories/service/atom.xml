<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: service | 蹤影]]></title>
  <link href="http://smlsun.com/blog/categories/service/atom.xml" rel="self"/>
  <link href="http://smlsun.com/"/>
  <updated>2013-05-09T21:59:21+08:00</updated>
  <id>http://smlsun.com/</id>
  <author>
    <name><![CDATA[smlsun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[學 web 開發以及 sql 語法的好地方]]></title>
    <link href="http://smlsun.com/blog/2013/02/28/study-coding/"/>
    <updated>2013-02-28T18:45:00+08:00</updated>
    <id>http://smlsun.com/blog/2013/02/28/study-coding</id>
    <content type="html"><![CDATA[<p>如果你是你剛踏入軟體開發的行列，很多語法或特性還不是很熟，是不是很想有個地方可以讓你找到各種語法的使用方式。</p>

<p>或者你是已經有經驗的開發者，有些時候你想試試看哪個屬性或者語法執行的結果如何，但當下又沒有環境讓你測試。</p>

<p>下面將介紹幾個不錯的網站讓不管是初學還是有經驗的開發者，都可以有個現成的環境讓你試試每個語法的特性。</p>

<h2><a href="http://jsfiddle.net/">jsfiddle</a></h2>

<p><img src="https://lh5.googleusercontent.com/-yFUqWAT58q0/US9CeiPUAiI/AAAAAAAALiw/L3CanL_aS58/s720/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-02-28+%E4%B8%8B%E5%8D%886.52.46.jpg" alt="img" /></p>

<p>一個可以線上模擬一個網站的環境，只要在上面的 HTML、css 以及 JavaScript 中寫入你要測試的程式碼，一旦執行以後，就可以在 Result 看到輸出的結果，特別的是該網站整合了一些大家都會常用的套件或是 framework，舉凡 jquery、extjs 或者是 YUI 等，都可以很輕易的測試每個套件的特性，圖片中的範例是用 extjs 來做範例</p>

<h2><a href="http://sqlfiddle.com/">sqlfiddle</a></h2>

<p><img src="https://lh5.googleusercontent.com/-iZt6XO24I_U/US9VL4aM9YI/AAAAAAAALjM/YuTxlBkcM58/s774/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-02-28+%E4%B8%8B%E5%8D%889.00.59.jpg" alt="image" /></p>

<p>線上 sql 語法練習網站，與 jsfiddle 類似，只是對象改成 sql，在開始練習前，需要先將範例 table 建立的語法置於左上角區域，接著就點選 Build Schema 就可以開始練習 sql 語法啦！</p>

<p>這網站還有一個特別的地方，他將 sql 的執行計畫也一併產生出來，可以讓你分析你下的 sql 執行效率，真的很方便呢！</p>

<h2><a href="http://www.w3schools.com/">w3schools</a></h2>

<p><img src="https://lh3.googleusercontent.com/-OD_nz64JW8I/US9CfAlsghI/AAAAAAAALi4/EWnAar60Nx0/s720/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-02-28+%E4%B8%8B%E5%8D%887.41.17.jpg" alt="image" /></p>

<p>與 jsfiddle 不同，w3schools 專注於每種語法的特性，一些在 wed 開發中會用到的技術介紹，當然他也可以線上測試各種語法的特性，雖然只是單語言測試，但對於急於查詢相關語法或者測試運行結果非常夠用了，除此之外有蠻詳細的解釋與範例，是個不錯的參考網站。</p>

<p>相關語言有：</p>

<ul>
<li><p>HTML &amp; CSS</p>

<ul>
<li>HTML Tutorial</li>
<li>HTML5 Tutorial</li>
<li>CSS Tutorial</li>
<li>CSS3 Tutorial</li>
</ul>
</li>
<li><p>Browser Scripting</p>

<ul>
<li>JavaScript Tutorial</li>
<li>HTML DOM Tutorial</li>
<li>jQuery Tutorial</li>
<li>JSON Tutorial</li>
<li>Google API Tutorial</li>
</ul>
</li>
<li><p>Server Scripting</p>

<ul>
<li>PHP Tutorial</li>
<li>SQL Tutorial</li>
<li>ASP Tutorial</li>
<li>ASP.NET Tutorial</li>
<li>Web Services Tutorial</li>
<li>Schema Tutorial</li>
<li>SOAP Tutorial</li>
<li>WSDL Tutorial</li>
</ul>
</li>
<li><p>Web Building</p>

<ul>
<li>Web Browsers</li>
<li>Web Certification</li>
<li>Web Hosting</li>
<li>Web TCP/IP</li>
<li>Web W3C</li>
<li>Web Quality</li>
</ul>
</li>
</ul>


<p>上面列出幾項，都是很常見的技術，真的是非常完整，可以參考看看囉！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[讓nodejs透過 Upstart 作為service 啟動，並且搭配makefile deploy]]></title>
    <link href="http://smlsun.com/blog/2013/01/09/node-production-setting/"/>
    <updated>2013-01-09T08:36:00+08:00</updated>
    <id>http://smlsun.com/blog/2013/01/09/node-production-setting</id>
    <content type="html"><![CDATA[<p>最近在開發node，一開始相信大家都是在本機進行程式開發，如果到了production的階段，也許你會有個server run你的ap，過程中你會需要上傳程式，這個過程事繁瑣的，如果每次要手動上傳，重新伺服器，累積起來也是可觀的時間，甚至可以多寫幾行code，喝杯咖啡，將時間浪費在生命中美好的事物上。</p>

<p>so 讓我們進入正題，在此假設你已經準備好你開發的程式並且已經準備好要將你的產品發布到線上的伺服器，首先我們必須讓你的node能夠作為service運行，如此一來當你遠端透過ssh 開啟 node時才不會因為登出後，node server 隨即停止，在這你會用到<a href="http://upstart.ubuntu.com/">Upstart</a>，在ubuntu已經內建，可以很方便進行 ap server 設定為service，並且透過<code>start yourapp</code>，<code>stop yourapp</code> 來啟動關閉你的服務，就讓我們來看實際設定的方式吧！</p>

<p>首先你必須建立屬於你的server 的設定檔，假設你的app就叫做 yourapp，so 檔案路徑如下</p>

<p><code>/etc/init/yourapp.conf</code></p>

<p>範例如下：</p>

<p>```
description "start yourapp"
author "user"</p>

<p>start on startup
stop on shutdown</p>

<p>script</p>

<pre><code>export HOME="/root"
#echo $$ &gt; /var/run/yourprogram.pid
exec sudo -u root node ~/location/to/yourapp/app.js &gt;&gt; /var/log/yourapp.sys.log 2&gt;&amp;1
</code></pre>

<p>end script</p>

<p>pre-start script</p>

<pre><code># Date format same as (new Date()).toISOString() for consistency
echo "[`date -u +%Y-%m-%dT%T.%3NZ`] (sys) Starting" &gt;&gt; /var/log/yourapp.sys.log
</code></pre>

<p>end script</p>

<p>pre-stop script</p>

<pre><code>#rm /var/run/yourprogram.pid
echo "[`date -u +%Y-%m-%dT%T.%3NZ`] (sys) Stopping" &gt;&gt; /var/log/yourapp.sys.log
</code></pre>

<p>end script
```</p>

<p>一旦設定檔建立後，你可以透過下列指令來確定是否可以work</p>

<p><code>initctl list | grep node</code></p>

<p>會看到下列輸出：</p>

<p><code>yourapp stop/waiting</code></p>

<p>當然一旦作為sevice要進行debug就要將系統輸出訊息內容丟到log，所以還有設置，log輸出位置</p>

<p>上面的步驟完成後，再來就是如何將你本地的程式快速上傳到遠端server，在目前已知道deploy的script語法很多，在這邊我用<code>makefile</code>來進行，當然你的專案大一點可以由CI來handle，不過這邊要說的是概念，所以我們就簡單一點，直接來看程式，makefile檔案內容如下：</p>

<p>```
all: restart</p>

<p>restart: rsync</p>

<pre><code>ssh -oStrictHostKeyChecking=no root@yourhost "stop yourapp; start yourapp" 2&gt;/dev/null
</code></pre>

<p>rsync:</p>

<pre><code>rsync -av ~/projects/yourapp root@yourhost:projects
</code></pre>

<p>```</p>

<p>執行步驟白話一點，就是先將檔案上傳到你的遠端伺服器，然後將剛剛完成的service關閉在重新啟動，在這邊透過 rsync</p>

<p>接著在透過 ssh 來重新啟動你剛剛設定的service，如此就完成設定，接著你只要在你的app目錄底下執行<code>make</code>就會自動完成上述步驟，是不是快速又簡單，一點點設定就可以完成，不用再重覆同樣的步驟，做事才會有效率！</p>
]]></content>
  </entry>
  
</feed>
