<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: android | 蹤影]]></title>
  <link href="http://smlsun.com/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://smlsun.com/"/>
  <updated>2013-02-19T22:24:08+08:00</updated>
  <id>http://smlsun.com/</id>
  <author>
    <name><![CDATA[smlsun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[如何令各個 OS 透過 andorid 手機的 usb 網路共用來進行 3g 網路上網]]></title>
    <link href="http://smlsun.com/blog/2013/02/15/mac-andorid-usb-3g/"/>
    <updated>2013-02-15T16:55:00+08:00</updated>
    <id>http://smlsun.com/blog/2013/02/15/mac-andorid-usb-3g</id>
    <content type="html"><![CDATA[<p>在智慧型手機盛行的現在，很多時候出門在外需要共享網路時 android 提供很方便的網路分享機制可以讓我將 3g 網路分享給周遭的設備，一個是透過 wifi 另一個就是透過 usb 網路共享啦。</p>

<p>當然很多時候透過 wifi 是很方便，但是利用 wifi 分享網路有些問題：那就是有可能不穩定，手機耗電，以及最重要的傳輸速度比使用 usb 網路共用來的慢很多很多，假設在外工作的話，你可不想讓網路速度影響你的工作效率吧！</p>

<p>已筆者身邊的手機 nexus one 為例，將一一介紹如何在目前三個最大的 os 進行 usb 網路共享。</p>

<h2>Windows</h2>

<ol>
<li>請先下載 android  windows 專用的驅動程式：<a href="http://www.android.com/drivers/tetherxp.inf">tetherxp.inf</a></li>
<li>將 android 設定中的 USB 網路共用開啟</li>
<li>把手機連結到 windows 上，會跳出安裝驅動程式的訊息，此時驅動選擇第一步驟所下載的檔案</li>
<li>等待安裝完成，就可以快快樂樂上網啦！</li>
</ol>


<h2>Ubuntu</h2>

<p>沒什麼好說的，Ubuntu 沒想到是最方便的，手機插上電腦，開啟 android 網路共享，就可以上網了，連驅動都不用裝，太棒了！</p>

<h2>Apple MacBook</h2>

<p>參考這篇文章 <a href="http://smartphones.wonderhowto.com/how-to/usb-tether-your-android-device-your-mac-without-rooting-0140478/">How to USB Tether Your Android Device to Your Mac—Without Rooting</a></p>

<ol>
<li>請先下載 <a href="https://github.com/downloads/jwise/HoRNDIS/HoRNDIS-rel2.pkg">HoRNDIS-rel2.pkg</a>，將他安裝完成</li>
<li>連上你的 andorid phone</li>
<li>開啟 usb 網路共用</li>
<li>接著你就可以在網路偏好設定中看到你的手機已被掛載上網路啦！</li>
</ol>


<p>上面就是各 os 使用 android usb 網路共用的步驟，即使你是使用桌機沒有牽網路，也沒有 wifi 也可以透過這樣的方式分享網路進行上網，對於遊牧各地只有 3g 在手的朋友，可以更方便的讓其他設備上網，工作起來也將更得心應手，能夠全速飆網，工作才能行雲流水阿！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[androVM - Run Android In VirtualBox And Deploy App]]></title>
    <link href="http://smlsun.com/blog/2013/01/16/android-vm/"/>
    <updated>2013-01-16T21:24:00+08:00</updated>
    <id>http://smlsun.com/blog/2013/01/16/android-vm</id>
    <content type="html"><![CDATA[<p>在隨處亂逛時，看到一個有趣的東西，那就是android VM!</p>

<p><a href="http://androvm.org/blog/download/">androVM</a></p>

<p>開發 Android 的經驗中，如果要驗證所開發的程式是否正確，比較常用的兩個方法：</p>

<ol>
<li>使用 google 官方的虛擬 android</li>
<li>使用實體機器</li>
</ol>


<p>第一個的問題就是，速度真 T…M… 的慢，在講求速度的開發環境，會很想殺人！！！</p>

<p>第二個的問題是，如果 usb 不夠插，或臨時設備不再身邊，或是設備出了意外… 那只好工作停擺啦</p>

<p>所幸還有第三個方案，他還是模擬器沒錯，但是比 google 官方的虛擬 android 來的快多了，號稱快 4 倍，我是憑感覺真的有比較快，至少你不會覺得 <strong>頓</strong>！</p>

<p>安裝方式很簡單</p>

<ol>
<li>首先你需要安裝 <a href="https://www.virtualbox.org/">Virtualbox</a></li>
<li>下載 <a href="http://androvm.org/blog/download/">androVM</a> 官方提供的 ova 檔，請選擇適合你用的版本</li>
<li>下載完成後，請點兩下你下載下來的 ova 檔，他會將設定檔載入你的 virtualBox，包括映像檔，所以一旦你安裝完成後就可以把下載下來的檔案刪掉</li>
</ol>


<p>如此一來就完成啦，實際執行結果如下：</p>

<p><img src="https://lh4.googleusercontent.com/-A623K9XMEUQ/UPeMFnwsF5I/AAAAAAAALfk/LSDz6MekOVY/s604/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-01-17+%E4%B8%8B%E5%8D%8812.14.18.jpg" alt="img" /></p>

<p>啟動速度比實體機器快很多喔(三倍速+)！</p>

<p>我個人覺得如果還可以支援 camera 那就太完美啦！不過網路上也有人對作者反應，作者也承諾 I'll readd the feature asap! 如此一來在開發上將更有彈性，相信以 virtualBox 為基底應該是可以做的到。</p>

<p>再來鄉民應該會覺得，我沒事拿個 vm 來玩平板或手機幹嘛？當然還要能夠拿來開發，並且可以將程式 deploy 上去進行測試啦！在這裡我將說明執行步驟，基本上你可以將運行在 VM 上的 android 想像成現在連接著你的電腦，只是不同的是他在你的電腦中運行，所以你必須告訴你的電腦要在哪裡連接，連接方式是透過 指定 IP 告訴你的開發環境正確的位置，讓我們來一步接著一步進行：</p>

<ol>
<li><p>首先必須先讓 vm 能夠有個存取的位置，所以我們需要打開 virtualBox 的網路設定頁面</p>

<p> <img src="https://lh4.googleusercontent.com/-P3bHwsK-Y3w/UPeMGgkLUeI/AAAAAAAALfw/fCCG_HEddBQ/s603/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-01-17+%E4%B8%8B%E5%8D%8812.31.27.jpg" alt="img" /></p>

<p> 將附加選項選擇：橋接介面卡，然後名稱就是你的實體網路的接口，我的電腦只有 wifi，如果是實體網路就應該為 <code>eh0</code>，設定好後，可以進到虛擬的 Android 查看 ip 位置：</p>

<p> <img src="https://lh4.googleusercontent.com/-50Uem4xpARg/UPeMHs3YcWI/AAAAAAAALf4/YwWcBpq6WVs/s604/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-01-17+%E4%B8%8B%E5%8D%8812.35.07.jpg" alt="img" /></p>

<p> 進到 system status 可以看到 ip 為 <code>10.0.3.15</code>，實際上你去 ping 是 ping 不到的，因為那是虛擬的 ip，那要如何找到正確的 ip 呢？androVM 很貼心的在裡面預裝了一個 app 可以讓你對 android 進行一些設定還有環境變數的查詢，裡面就有真實設備的 ip 啦！如下圖：</p>

<p> <img src="https://lh3.googleusercontent.com/-OM5gKYL6QEg/UPeMIU0ILzI/AAAAAAAALgY/IRkUa4FnvCw/s604/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-01-17+%E4%B8%8B%E5%8D%8812.38.24.jpg" alt="img" /></p>

<p> 有個 android 機器人，好像在做蛋糕(大便) 的樣子 <code>androVM Configuration</code>，哈～顯示如下圖：</p>

<p> <img src="https://lh4.googleusercontent.com/-azSrBFWVJ94/UPeMI827gVI/AAAAAAAALgI/vVTWktc1Q4A/s604/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-01-17+%E4%B8%8B%E5%8D%8812.39.38.jpg" alt="img" /></p>

<p> 點進去後你可以看到在執行畫面上方有個</p>

<p> <code>eh0: 192.168.1.8</code></p>

<p> 就是實際你可以存取得位置啦！</p></li>
<li><p>接著我們就必須將設備註冊到 adb 上，讓我們進入到 android sdk 資料夾裡面，路徑為</p>

<p> <code>${ANDROID_HOME}/platform-tools</code></p>

<p> 底下應該有個 <code>adb</code> 的檔案，打開 terminal 根據剛剛查到的 ip 輸入：</p>

<p> <code>./adb connect 192.168.1.8</code></p>

<p> 就完成連接了，簡單吧！正常應該會吐出下列訊息</p>

<p> <code>connected to 192.168.1.8:5555</code></p>

<p> 接著我們來看實際運作的狀況，打開 eclipse，執行要 deploy 的專案：</p>

<p> <img src="https://lh6.googleusercontent.com/-fC3_LracFxc/UPeMJkniW2I/AAAAAAAALgQ/oosUBfdmri8/s604/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-01-17+%E4%B8%8B%E5%8D%8812.50.54.jpg" alt="img" /></p>

<p> 在這裡執行 <code>Run As &gt; Adroid application</code> 會先檢查有無設備連接上，如果沒有會用 google 內建的虛擬機器，如果有連上就會使用實體機器(不過還是虛擬的)，我們就可以看到執行畫面如下：</p>

<p> <img src="https://lh4.googleusercontent.com/-IsPB4DxxolY/UPeMKUS4a7I/AAAAAAAALgU/dBhsGIWRSfM/s603/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-01-17+%E4%B8%8B%E5%8D%8812.53.32.jpg" alt="img" /></p>

<p> 就是如此簡單！接著你要 debug 或是檢查在 app 操作過程中吐出來的訊息就都可以在 eclipse 底下的 Console 進行觀察了，相信開發過程中會方便許多，也避免掉很多不必要的麻煩，試試看囉！</p></li>
</ol>

]]></content>
  </entry>
  
</feed>
