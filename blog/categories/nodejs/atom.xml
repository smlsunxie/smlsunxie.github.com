<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: nodejs | 蹤影]]></title>
  <link href="http://smlsun.com/blog/categories/nodejs/atom.xml" rel="self"/>
  <link href="http://smlsun.com/"/>
  <updated>2013-08-06T10:07:10+08:00</updated>
  <id>http://smlsun.com/</id>
  <author>
    <name><![CDATA[smlsun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[快速了解 node 以及 mongodb，mail的使用]]></title>
    <link href="http://smlsun.com/blog/2013/01/09/node-start/"/>
    <updated>2013-01-09T09:40:00+08:00</updated>
    <id>http://smlsun.com/blog/2013/01/09/node-start</id>
    <content type="html"><![CDATA[<p>要了解一個程式語言的運作與特性，有時候不是一時半刻可以熟悉，有時候也必須經歷一些專案歷練，但一開始可以透過一些持程式碼，來快速了解，實際動手做總是比用看的更能深入你的腦袋，這邊就來介紹一個不錯的node運作的範例，看完以後相信會對node的運作會有點概念，像我就是！</p>

<p>這個網站是一個簡單的帳號管理系統，簡單來說他就只有登入功能，記錄session，對於建立的使用者可以進行增修改查，並且透過操作mongodb來進行資料的操作，以及使用者密碼加密，網站如下：</p>

<p><a href="http://www.quietless.com/kitchen/building-a-login-system-in-node-js-and-mongodb/">Building a Login System in Node.js and MongoDB</a></p>

<p><img src="http://www.quietless.com/kitchen/wp-content/uploads/2012/06/login-panel.jpg" alt="img" /></p>

<p>雖然只是很單純的登入系統，但是算是涵蓋的非常完整，整個前端到後端以及database的運用，還有rest的http Method的操作都有使用到，包括透過mail來讓忘記密碼的使用者通知更換密碼的網址等，這麼好的範例哪裡找阿！這麼補的大補帖，不吃可惜～</p>

<p>透過看別人的程式能夠快速了解甚學習別人的設計，雖然沒有當面授課，也可以增加你的功力，何樂而不為，只是好的範例真的很少，夠簡單能夠明瞭的也不多，希望藉由這個範例能夠讓對node有興趣的朋友能夠有個好的開始，就讓我們一起 rock codeing with node 吧！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[讓nodejs透過 Upstart 作為service 啟動，並且搭配makefile deploy]]></title>
    <link href="http://smlsun.com/blog/2013/01/09/node-production-setting/"/>
    <updated>2013-01-09T08:36:00+08:00</updated>
    <id>http://smlsun.com/blog/2013/01/09/node-production-setting</id>
    <content type="html"><![CDATA[<p>最近在開發node，一開始相信大家都是在本機進行程式開發，如果到了production的階段，也許你會有個server run你的ap，過程中你會需要上傳程式，這個過程事繁瑣的，如果每次要手動上傳，重新伺服器，累積起來也是可觀的時間，甚至可以多寫幾行code，喝杯咖啡，將時間浪費在生命中美好的事物上。</p>

<p>so 讓我們進入正題，在此假設你已經準備好你開發的程式並且已經準備好要將你的產品發布到線上的伺服器，首先我們必須讓你的node能夠作為service運行，如此一來當你遠端透過ssh 開啟 node時才不會因為登出後，node server 隨即停止，在這你會用到<a href="http://upstart.ubuntu.com/">Upstart</a>，在ubuntu已經內建，可以很方便進行 ap server 設定為service，並且透過<code>start yourapp</code>，<code>stop yourapp</code> 來啟動關閉你的服務，就讓我們來看實際設定的方式吧！</p>

<p>首先你必須建立屬於你的server 的設定檔，假設你的app就叫做 yourapp，so 檔案路徑如下</p>

<p><code>/etc/init/yourapp.conf</code></p>

<p>範例如下：</p>

<p>```
description "start yourapp"
author "user"</p>

<p>start on startup
stop on shutdown</p>

<p>script</p>

<pre><code>export HOME="/root"
#echo $$ &gt; /var/run/yourprogram.pid
exec sudo -u root node ~/location/to/yourapp/app.js &gt;&gt; /var/log/yourapp.sys.log 2&gt;&amp;1
</code></pre>

<p>end script</p>

<p>pre-start script</p>

<pre><code># Date format same as (new Date()).toISOString() for consistency
echo "[`date -u +%Y-%m-%dT%T.%3NZ`] (sys) Starting" &gt;&gt; /var/log/yourapp.sys.log
</code></pre>

<p>end script</p>

<p>pre-stop script</p>

<pre><code>#rm /var/run/yourprogram.pid
echo "[`date -u +%Y-%m-%dT%T.%3NZ`] (sys) Stopping" &gt;&gt; /var/log/yourapp.sys.log
</code></pre>

<p>end script
```</p>

<p>一旦設定檔建立後，你可以透過下列指令來確定是否可以work</p>

<p><code>initctl list | grep node</code></p>

<p>會看到下列輸出：</p>

<p><code>yourapp stop/waiting</code></p>

<p>當然一旦作為sevice要進行debug就要將系統輸出訊息內容丟到log，所以還有設置，log輸出位置</p>

<p>上面的步驟完成後，再來就是如何將你本地的程式快速上傳到遠端server，在目前已知道deploy的script語法很多，在這邊我用<code>makefile</code>來進行，當然你的專案大一點可以由CI來handle，不過這邊要說的是概念，所以我們就簡單一點，直接來看程式，makefile檔案內容如下：</p>

<p>```
all: restart</p>

<p>restart: rsync</p>

<pre><code>ssh -oStrictHostKeyChecking=no root@yourhost "stop yourapp; start yourapp" 2&gt;/dev/null
</code></pre>

<p>rsync:</p>

<pre><code>rsync -av ~/projects/yourapp root@yourhost:projects
</code></pre>

<p>```</p>

<p>執行步驟白話一點，就是先將檔案上傳到你的遠端伺服器，然後將剛剛完成的service關閉在重新啟動，在這邊透過 rsync</p>

<p>接著在透過 ssh 來重新啟動你剛剛設定的service，如此就完成設定，接著你只要在你的app目錄底下執行<code>make</code>就會自動完成上述步驟，是不是快速又簡單，一點點設定就可以完成，不用再重覆同樣的步驟，做事才會有效率！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Socket.io 實作聊天室]]></title>
    <link href="http://smlsun.com/blog/2012/11/02/socket-dot-io-shi-zuo-liao-tian-shi/"/>
    <updated>2012-11-02T12:17:00+08:00</updated>
    <id>http://smlsun.com/blog/2012/11/02/socket-dot-io-shi-zuo-liao-tian-shi</id>
    <content type="html"><![CDATA[<p>利用 socket.io 實作聊天室，在以前很難想像要如何控制多個使用者進行realtime的服務，透過socket.io可以很輕易的做到</p>

<h2>功能說明</h2>

<ul>
<li><p>此專案base是參考下面網站介紹完成的範例:
<a href="http://iosdevelopersnote.blogspot.tw/2012/09/socketio.html">聊天廣播 - Socket.io</a></p></li>
<li><p>除了聊天室之外，另外實作了歷史聊天記錄自動載入功能，透過mongohg</p></li>
<li><p>另外確認若是另一個獨立運作的網頁是否可以使用獨立的node server的服務，如下節說明。</p></li>
<li>透過聊天室實作可以在延伸其他功能，比如說：

<ul>
<li>強制所有上線使用者登出</li>
<li>讀取到RFID觸動網頁進行相關動作</li>
<li>系統維修時，禁止使用者上線</li>
</ul>
</li>
</ul>


<h2>確認即使是外部網頁也可執行socket服務</h2>

<p>請參考 git 中 indepandTest.html 檔案，當app 運作時，在執行此檔案也同要有聊天室的功能</p>

<p>測試即使獨立開啟html(不在server底下開啟)，也可以使用聊天室的功能
其中只要將</p>

<pre><code>&lt;script type="text/javascript" charset="utf-8" src="socket.io/socket.io.js"&gt;
</code></pre>

<p>指定為node運行中的服務</p>

<pre><code>&lt;script type="text/javascript" charset="utf-8" src="http://localhost:3000/socket.io/socket.io.js"&gt;
</code></pre>

<p>就可以執行該server所定義好的功能，確認可行表示若是手機app也可以有realtime的服務，透過socket.io</p>

<h2>git網址</h2>

<p>相關原始碼請參考下列網址</p>

<pre><code>https://github.com/SpookyHty/nodeChatRoom-test
</code></pre>

<h2>makedown寫網誌</h2>

<ul>
<li>此網誌是透過makedown完成的

<ul>
<li>語法可參考<a href="http://markdown.tw/">Markdown 語法說明</a></li>
<li>練習可使用<a href="http://www.ctrlshift.net/project/markdowneditor/">Online Markdown Editor</a></li>
</ul>


<p>  對於需要寫網址，或者需要將技術文件輸出不同格式，使用markdown可以快速幫你完成</p></li>
<li><p>此篇文章的原始碼可參考</p>

<pre><code>  https://github.com/SpookyHty/nodeChatRoom-test
</code></pre>

<p>  中的 README.md</p></li>
</ul>

]]></content>
  </entry>
  
</feed>
