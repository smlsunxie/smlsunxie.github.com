<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: java | 蹤影]]></title>
  <link href="http://smlsun.com/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://smlsun.com/"/>
  <updated>2014-03-31T17:57:11+08:00</updated>
  <id>http://smlsun.com/</id>
  <author>
    <name><![CDATA[smlsun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[grails: gorm 自動更新與 discard 方法 使用特性與注意事項]]></title>
    <link href="http://smlsun.com/blog/2014/03/31/grails-gorm-discard/"/>
    <updated>2014-03-31T00:00:00+08:00</updated>
    <id>http://smlsun.com/blog/2014/03/31/grails-gorm-discard</id>
    <content type="html"><![CDATA[<p>在使用 grails domain 時，有時候雖然我們有對 domain 變更值，但我們需要經過一些判斷後，才要正確寫入資料庫，但在 grails 的環境在你還沒有下 save 的指令時，他會因為函式執行的需要進行 auto save，關於 gorm 原理可以參考下列文章</p>

<p><a href="http://spring.io/blog/2010/06/23/gorm-gotchas-part-1/">GORM Gotchas (Part 1)</a></p>

<p>其中有一段如下：</p>

<blockquote><p>   def b = Book.findByAuthor(params.author)
   b.title = b.title.reverse()</p>

<p>Note that there is no call to save() here. When the request has completed you will find that the book's title has been reversed in the database - the change has been persisted without an explicit save. This is because:</p>

<ol>
<li>the book is attached to the session (by virtue of being retrieved by a query);</li>
<li>the title property is persistent (all properties are persistent unless configured as transient); and</li>
<li>the property value has changed by the time the session closes.</li>
</ol>
</blockquote>

<p>上述說明了就算沒有下 save() 的指令，特定的狀況下 domain 還是有可能自動寫入資料庫。</p>

<p>如果我們不想要自動更新怎麼辦？文中也有提到下述狀況將放棄自動更新：</p>

<blockquote><p>if any of the property values fail validation, the changes will not be persisted. Of course, if the values are valid and yet you still don't want to persist them, you can call <code>discard()</code> on your instance. This won't reset the values of the instance's properties, but it will ensure that they aren't saved to the database.</p></blockquote>

<p>當 validation 不通過，或是執行 <code>discard()</code> 將取消更新。</p>

<p>對於 grails domain 自動儲存以及取消自動儲存的特性有所了解後，
筆者目前遇到的狀況如下：</p>

<p>```
def purchaseSheetDet = PurchaseSheetDet.get(params.id)
purchaseSheetDet.properties = params</p>

<p>def batch = Batch.findByName(params["batch.name"])
purchaseSheetDet.batch = batch</p>

<p>purchaseSheetDet.discard()</p>

<p>```
上述程式碼就算最後執行了 discard() 自動更新沒有被取消，檢查實際將執行的 sql 開出 log 記錄如下</p>

<p><code>
Hibernate: update purchase_sheet_det set ...
Hibernate: select ... from batch this_ where this_.name=?
</code></p>

<p>可以看到，在執行查詢 batch 之前就先對 update purchase_sheet_det 進行更新，當然之後的 <code>purchaseSheetDet.discard()</code> 就會失效，因為 update 語法已經在之前就已執行了。</p>

<p>筆者推測當你下 find 時 gorm 為了確保查到的資料是正確的，會強制將未 persist 的 domain 進行 save。</p>

<p>知道發生的原因後，我們可以將程式改寫如下：</p>

<p>```
def batch = Batch.findByName(params["batch.name"])</p>

<p>def purchaseSheetDet = PurchaseSheetDet.get(params.id)
purchaseSheetDet.properties = params
purchaseSheetDet.batch = batch</p>

<p>purchaseSheetDet.discard()
```</p>

<p>一旦我們這樣調整順序以後，在預計要更新的 domain 之前，先把要 find 的 domain 準備好，這樣就不會因為 find 去觸動自動將有變動的 domain 進行更新，造成 <code>discard()</code> 指令失效。</p>

<h2>結論</h2>

<p>透過上面的結果，我們可以整理出幾個規則：</p>

<ol>
<li>若操作的 domain 的屬性變更有可能因為之後的檢查透過 discard 放棄變更，在檢查的過程中務必不可觸動 find 的執行，避免因為 find 把尚未確定的變更寫入實體資料庫</li>
<li>若有必要使用到其他 domain 透過 find 取得實體，務必在可能執行 discard 的 domain 實體話之前透過 find 取得</li>
<li>一旦上述規則都有遵守，但執行 discard 還是無效，可以透過開啟 hibernate 的 sql log 來檢查到底何時執行了更新的語法。開啟 sql log 的方式可參考:<a href="http://stackoverflow.com/questions/2568507/how-to-log-sql-statements-in-grails">How to log sql statements in grails</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Window 設定：開機自動執行程式或 *.bat 不需登入，以啟動 spring-boot 應用程式為例，加映 command line 就能搞定的 geek 版]]></title>
    <link href="http://smlsun.com/blog/2014/01/19/Window/"/>
    <updated>2014-01-19T00:00:00+08:00</updated>
    <id>http://smlsun.com/blog/2014/01/19/Window</id>
    <content type="html"><![CDATA[<p>使用 spring-boot 的好處之一，不需要額外安裝 tomcat，也不需要包成 war 檔進行 deploy，我們可以直接包成 jar 檔之後透過比如下面的指令進行啟動服務：<code>java -jar service-1.0.0.jar</code>，可以這麼做的原因是 spring-boot 使用 tomcat-embed 作為 service，所以可以直接使用 jar 運行，作為 server 啟動。</p>

<p>完整的啟動 bat 內容如下：</p>

<p><code>
set JAVA_HOME=E:\service\Java\jdk1.7.0_45
set JAVA_JRE=E:\service\Java\jre7
java -jar service-1.0.0.jar
</code></p>

<p>設定好 JAVA_HOME 以及 JAVA_JRE 即可不受 window 自動更新 JDK 造成相容性問題，最後再執行 <code>java -jar service-1.0.0.jar</code> 即可啟動服務。</p>

<p>當程式開發好之後，實際發佈到主機作為 production 運行時，我們不希望偶爾的 window 自動更新重啟時造成服務未開啟，讓客戶錯以為系統有問題，在 window 底下最簡單的自動啟動指定的應用程式是將捷徑放置於開始功能列中的 [<code>啟動</code>] 資料夾，這樣的作法有幾個問題：</p>

<ol>
<li>需要登入才會觸動，所以若是自動更新重啟沒有登入也是沒效</li>
<li>若有遠端登入也會啟動，造成重覆開啟</li>
</ol>


<p>我們可以用另外一種設定方式來進行透過 [工作排程器]，步驟如下：</p>

<ol>
<li><p>啟動工作排程器
 <img src="https://lh6.googleusercontent.com/-sY2DBkcNQmg/UteGzqS4V0I/AAAAAAAAMCc/a3jB0bIxGhE/s0/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2014-01-16+%E4%B8%8B%E5%8D%882.52.44.png" title="螢幕快照 2014-01-16 下午2.52.44.png" alt="enter image description here" /></p></li>
<li><p>建立基本工作
 <img src="https://lh6.googleusercontent.com/-GvMx7nrfvHk/UteG_RMFp8I/AAAAAAAAMCo/k4R8KaF-EJ8/s0/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2014-01-16+%E4%B8%8B%E5%8D%882.53.13.png" title="螢幕快照 2014-01-16 下午2.53.13.png" alt="enter image description here" /></p></li>
<li><p>定義服務名稱
 <img src="https://lh5.googleusercontent.com/-sijmvNua4Ik/UteHI0q2lsI/AAAAAAAAMC0/jhZ7yxP6UH8/s0/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2014-01-16+%E4%B8%8B%E5%8D%882.53.46.png" title="螢幕快照 2014-01-16 下午2.53.46.png" alt="enter image description here" /></p></li>
<li><p>定義啟動時機
 <img src="https://lh3.googleusercontent.com/-8NGvtH4yfog/UteI1fvaaxI/AAAAAAAAMDo/sW64MwnYkZw/s0/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2014-01-16+%E4%B8%8B%E5%8D%883.20.49.png" title="螢幕快照 2014-01-16 下午3.20.49.png" alt="enter image description here" /></p></li>
<li><p>選擇工作類型，選擇啟動程式
 <img src="https://lh4.googleusercontent.com/-z0JtzmxDECc/UteHSqKqU9I/AAAAAAAAMDA/SySPxMM9bfg/s0/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2014-01-16+%E4%B8%8B%E5%8D%882.54.16.png" title="螢幕快照 2014-01-16 下午2.54.16.png" alt="enter image description here" /></p></li>
<li><p>選擇要執行的 bat 檔
 <img src="https://lh3.googleusercontent.com/-PUmGanA4O7w/UteI9opVxdI/AAAAAAAAMD0/SEWz5gr0p5k/s0/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2014-01-16+%E4%B8%8B%E5%8D%883.21.23.png" title="螢幕快照 2014-01-16 下午3.21.23.png" alt="enter image description here" /></p></li>
</ol>


<p>如此一來，系統就會在啟動時執行目標工作啦，記得要寫 log，因為這樣的運行模式下沒有 console 視窗，有任何異常都要從 log 檔查看。</p>

<p>同場加映：</p>

<p>宏大 <a href="http://blog.lyhdev.com/">lyhcode</a> 詢問：</p>

<blockquote><p>有沒有用 command line 就能搞定的 geek 版？</p></blockquote>

<p>感謝 <a href="http://www.dotblogs.com.tw/jamesfu/">jamesFu</a> 大師解答：</p>

<blockquote><p>schtask /create /sc onstart /tn Service /tr "E:\service\run.bat" /ru</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring Security Basic Authentication with Ajax request 失敗處理]]></title>
    <link href="http://smlsun.com/blog/2014/01/19/Spring-Security-Basic-Authentication-with-Ajax-request/"/>
    <updated>2014-01-19T00:00:00+08:00</updated>
    <id>http://smlsun.com/blog/2014/01/19/Spring-Security-Basic-Authentication-with-Ajax-request</id>
    <content type="html"><![CDATA[<p>當你在製作一個 rest service，提供 API 另外部的程式存取，比如說網頁中的 ajax request，且必須要有基本的安全性防護，在 java base 底下我們可以引入 Spring Security 來幫我們處理安全性的大小事。</p>

<p>關於安全性驗證的方式，可參考官方的文件:<a href="http://docs.spring.io/spring-security/site/docs/3.0.x/reference/introduction.html">Spring Security doc</a></p>

<p>基於 rest service 的特性，既然是提供給第三方軟體呼叫，我們就不希望還需要 login 頁面來登入 rest service，可以的話當然希望在進行請求時就驗證存取權限，所以我們需要使用的是 <a href="http://docs.spring.io/spring-security/site/docs/3.0.x/reference/basic.html">Basic Authentication</a>。</p>

<p>簡單來說 Basic Authentication 就是將驗證資訊透過 http headers 傳遞，交由 server 驗證之後，返回通過或失敗，範例的 request 呼叫如下：</p>

<p>```
function make_base_auth(user, password) {</p>

<pre><code>var tok = user + ':' + password;
var hash = $.base64.encode(tok);
return "Basic "+hash;
</code></pre>

<p>}
$.ajax("http://localhost:8080/test/sendMsg", {</p>

<pre><code>type: "GET",
success: function(){
    alert("OK");
},
xhrFields: {
    withCredentials: true
}, 
beforeSend: function (xhr) {
    xhr.setRequestHeader('Authorization', 
        make_base_auth("user", "password"));
}
</code></pre>

<p>});
```</p>

<p>其中 Authorization 的值必須以 Basic 開頭，接著將 username:password 透過 base64 編碼，上述 <code>make_base_auth("user", "password")</code> 回傳的內容為： <code>Basic dXNlcjpwYXNzd29yZA==</code>，並且需要設定 <code>withCredentials</code>，表示包含驗證資訊。</p>

<p>前端的呼叫程式準備好了以後，我們需要對後端的 http 網路存取權限進行設定，rest server 與呼叫端屬於 cross domain 的呼叫，因此需要設置 CorsFilter，如下：</p>

<p>```
@Component
public class CorsFilter extends OncePerRequestFilter
{</p>

<pre><code>@Override
protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
        throws ServletException, IOException
{
    response.addHeader("Access-Control-Allow-Origin", "http://192.168.0.100:8080");
    response.addHeader("Access-Control-Allow-Methods", "HEAD, GET, POST, OPTIONS");
    response.addHeader("Access-Control-Allow-Headers","Authorization, Content-Type, Origin, Accept");
    response.addHeader("Access-Control-Max-Age", "1800");
    response.addHeader("Access-Control-Allow-Credentials", "true");


    filterChain.doFilter(request, response);
}
</code></pre>

<p>}
```</p>

<p>rest server 使用 <a href="http://projects.spring.io/spring-boot/">spring-boot</a> 製作，傳統建立 filter 時需要在維護 web.xml，在這裡只要註記為 <code>@Component</code>，且 <code>extends OncePerRequestFilter</code>，服務啟動時 spring 會自動配置 filter，透過設置 Access-Control-* 的相關屬性，我們可以限制對 server 的存取限制。</p>

<p>接著，我們需要定義 Security Config：</p>

<p>```
@EnableWebSecurity
@Configuration
public class SecurityConfig extends WebSecurityConfigurerAdapter {</p>

<pre><code>@Override
protected void configure(HttpSecurity http) throws Exception {
    http.authorizeRequests()
            .antMatchers("/test/sendMsg").hasRole("USER")
            .anyRequest().authenticated();
    http.httpBasic();
}

@Override
protected void configure(AuthenticationManagerBuilder authManagerBuilder) throws Exception {
    authManagerBuilder.inMemoryAuthentication()
            .withUser("user").password("password").roles("USER");
}
</code></pre>

<p>}
<code>`
在</code>configure(HttpSecurity http)<code>我們定義了</code>/test/sendMsg<code>的存取者必須要有</code>USER<code>的權限，且驗證方式使用</code>Basic<code>；在</code>configure(AuthenticationManagerBuilder authManagerBuilder)`` 定義使用者帳號。</p>

<p>如此一來，程式算是準備好，我們可以利用 <code>curl</code> 指令來驗證：</p>

<p><code>curl --url http://localhost:8080/test/sendMsg -H 'Authorization: Basic dXNlcjpwYXNzd29yZA=='</code></p>

<p>可以正常取得 response，但是一旦我們透過 ajax 的方式存取，總會跳出下面的畫面：</p>

<p><img src="https://lh6.googleusercontent.com/-mUoOv_pKbzQ/UsJObr558rI/AAAAAAAAL9s/pni0SJbDEyQ/s0/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-12-31+%E4%B8%8B%E5%8D%8812.55.37.png" title="螢幕快照 2013-12-31 下午12.55.37.png" alt="enter image description here" /></p>

<p>這是我們不想要的，且與程式邏輯不符，畢竟我們在 CorsFilter 定義了允許 <code>Authorization</code> 的 header 卻沒有通過驗證，並且在 <code>curl</code> 的模式下是可正常存取。</p>

<p>且既然是提供給第三方軟體呼叫，對使用者而言，一定不知道遠端 rest server 的存取密碼，為了跳過這個帳號密碼驗證步驟，查了相關處理程式 <code>BasicAuthenticationEntryPoint</code> 的原始碼說明：</p>

<p><a href="http://git.springsource.org/~rwinch/spring-security/rwinchs-spring-security/blobs/bf9d4a97470c679008ef6ce42681e3d0c1992636/web/src/main/java/org/springframework/security/web/authentication/www/BasicAuthenticationEntryPoint.java">BasicAuthenticationEntryPoint.java</a></p>

<blockquote><p> Once a user agent is authenticated using BASIC authentication, logout requires that the browser be closed or an unauthorized (401) header be sent.</p></blockquote>

<p>也就是說預設的處理方式，一律會回傳 <code>unauthorized (401)</code>，處理的原始碼如下：</p>

<p>``
public void commence(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException)</p>

<pre><code>throws IOException, ServletException {
response.addHeader("WWW-Authenticate", "Basic realm=\"" + realmName + "\"");
response.sendError(HttpServletResponse.SC_UNAUTHORIZED, authException.getMessage());
</code></pre>

<p>}
``</p>

<p>所以無論你怎麼調整 CorsFilter 或是 ajax request 參數，就是沒有辦法通過 http 驗證，總是跳出 dialog 需要驗證帳號與密碼，檢查 request method 雖然設置的是 <code>GET</code> 但總是傳出 <code>OPTIONS</code>。</p>

<p>至於為什麼，可參考下列文章：</p>

<p><a href="http://stackoverflow.com/questions/11199426/jquery-cors-json-without-padding-and-authentication-issues">jQuery, CORS, JSON (without padding) and authentication issues</a></p>

<p>文中提到：</p>

<blockquote><p>Basically, because I need authentication, the GET request is sending an Authorization header. However, this is not a "simple" header, and so the browser is sending a pre-flight request (the OPTIONS). This preflight request doesn't have any authentication, though, and so the server was rejecting it. The "solution" was to set the server to let OPTIONS request not require authentication, and report an HTTP status of 200 to it.</p>

<p>Reference: http://www.kinvey.com/blog/item/61-kinvey-adds-cross-origin-resource-sharing-cors</p></blockquote>

<p>也就是說，瀏覽器檢查有驗證資訊，就不是"簡單"的 http request，所以會先送出一個 pre-flight request，也就是 <code>OPTIONS</code>，該 OPTIONS 就不會有驗證資訊，以致於 server 就會拒絕請求，也就呼應為什麼 <code>curl</code> 的情況下可以正常請求，為了解決此問題，就必須要讓 server 能夠接受 OPTIONS 可包含 authentication 的 header 來進行驗證。</p>

<p>上述的說明在一開始看到時還不清楚處理邏輯，真要親身體驗才能了解，花了一天的時間的重覆嘗試，總算讓我找到解法，參考下列文章：</p>

<p><a href="https://github.com/davidtinker/grails-cors/issues/12">Basic Auth filter authenticates OPTIONS requests and breaks CORS</a></p>

<p>從上面關於瀏覽器對於"不簡單"的 request 的敘述，瀏覽器的處理流程會是：</p>

<ol>
<li>先送出一個 OPTIONS 的 request 進行驗證</li>
<li>如果 OPTIONS 的 request 不是回傳 401 UNAUTHORIZED 會接著送出在 ajax 定義的 http mathod 的 request</li>
</ol>


<p>會這樣處理，是因為瀏覽器預設是一旦檢查第一步驟沒有通過，就會跳出 dialog 請使用者輸入帳號密碼(開啟 withCredentials 的前提下)，一旦通過，就會將驗證資訊存於 cookies，接著進入第二步驟時，會將已存在 cookies 的驗證資訊加入到第二步驟的 header，之後再重覆請求時就會一直有效，直到 cookies 過期。</p>

<p>有這樣的認知後，在看上面連結中程式部分的解法時就比較能夠理解。</p>

<p>透過繼承 <code>BasicAuthenticationEntryPoint</code> 覆寫 <code>commence</code>，判斷如果是 <code>Preflight</code> 依據傳入的 http method 是否為 <code>OPTIONS</code> 來判斷，若是，則回傳 <code>HttpServletResponse.SC_NO_CONTENT</code>。</p>

<p>```
if(isPreflight(request)){</p>

<pre><code>response.setStatus(HttpServletResponse.SC_NO_CONTENT);
</code></pre>

<p>```</p>

<p>因為 OPTIONS 只是瀏覽器為了驗證進行的 request，並不是我們主要的 request 所以將其設為 SC_NO_CONTENT(204)，沒有內容，但沒有失敗，一旦瀏覽器接收到沒有失敗的情形，就會進行主要的 request 請求，此時主要的 request 就會包含 Authentication 的資訊，接著看下面一個判斷式。</p>

<p>```
if (isRestRequest(request)) {</p>

<pre><code>response.sendError(HttpServletResponse.SC_UNAUTHORIZED, "Unauthorized");
</code></pre>

<p>```</p>

<p>再來，這邊限制了如果有 <code>X-Requested-With ,XMLHttpRequest</code> 這樣的 header 就直接回傳 <code>SC_UNAUTHORIZED</code>(401)， 有沒有必要，就看服務的性質與需求，可以針對各種狀況，設定不允許存取的條件，最後其他狀況就走一般的處理模式了，完整的程式碼如下：</p>

<p>```
public class AjaxAwareLoginUrlAuthenticationEntryPoint extends</p>

<pre><code>    BasicAuthenticationEntryPoint {

private static final RequestMatcher requestMatcher = new ELRequestMatcher(
        "hasHeader('X-Requested-With','XMLHttpRequest')");

public CustomAuthenticationEntryPoint() {
    super();
}

public CustomAuthenticationEntryPoint(String realmName) {
    setRealmName(realmName);
}

@Override
public void commence(final HttpServletRequest request, final HttpServletResponse response, final AuthenticationException authException) throws IOException, ServletException {

    if(isPreflight(request)){
        response.setStatus(HttpServletResponse.SC_NO_CONTENT);
    } else if (isRestRequest(request)) {
        response.sendError(HttpServletResponse.SC_UNAUTHORIZED, "Unauthorized");
    } else {
        super.commence(request, response, authException);
    }
}

/**
 * Checks if this is a X-domain pre-flight request.
 * @param request
 * @return
 */
private boolean isPreflight(HttpServletRequest request) {
    return "OPTIONS".equals(request.getMethod());
}

/**
 * Checks if it is a rest request
 * @param request
 * @return
 */
protected boolean isRestRequest(HttpServletRequest request) {
    return requestMatcher.matches(request);
}
</code></pre>

<p>}
```</p>

<p>一旦定義好 AuthenticationEntryPoint 在文章中的使用的方式是用 grails 的語法與定義檔：</p>

<blockquote><p>Open resources.groovy and add the following lines:</p></blockquote>

<p>```
beans = {</p>

<pre><code>basicAuthenticationEntryPoint(CustomAuthenticationEntryPoint) { bean -&gt;
    realmName = 'Your Realm'
}
</code></pre>

<p>}
```</p>

<p>spring boot 的情形，我們只要修改一開始建立的 SecuityConfig：</p>

<p>```
@Override
protected void configure(HttpSecurity http) throws Exception {</p>

<pre><code>AjaxAwareLoginUrlAuthenticationEntryPoint ajaxAwareLoginUrlAuthenticationEntryPoint = new AjaxAwareLoginUrlAuthenticationEntryPoint();
ajaxAwareLoginUrlAuthenticationEntryPoint.setRealmName("testAp");
http.httpBasic().authenticationEntryPoint(ajaxAwareLoginUrlAuthenticationEntryPoint);
</code></pre>

<p>}
```</p>

<p>新增客製的 <code>ajaxAwareLoginUrlAuthenticationEntryPoint</code>，設置 RealmName，並且加入 <code>httpBasic().authenticationEntryPoint</code> 即可，省去繁瑣的 xml 定義，程式更加的精簡。</p>

<p>實際執行，我們可以看到，一次 ajax 呼叫，有兩個 request：</p>

<p><img src="https://lh6.googleusercontent.com/--XnQ7f4ItTQ/UsKALIrzHOI/AAAAAAAAL-E/cbnNgTDJYP4/s0/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-12-31+%E4%B8%8B%E5%8D%883.53.51.png" title="螢幕快照 2013-12-31 下午3.53.51.png" alt="enter image description here" /></p>

<p>且第一次呼叫的 http method 為 OPTIONS，http code 為 204，第二次才是主要的 ajax request，在看下圖，為 header 資訊：</p>

<p><img src="https://lh4.googleusercontent.com/-JcEBuYSzsSY/UsKAneA8uuI/AAAAAAAAL-Q/s1Tlly239K4/s0/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-12-31+%E4%B8%8B%E5%8D%883.54.38.png" title="螢幕快照 2013-12-31 下午3.54.38.png" alt="enter image description here" /></p>

<p>可以看到 <code>Authorization</code> 已有存在 header，且 request 正常，已有正確執行 rest server 的服務。</p>

<p>這問題著實困擾了我好久，對於不是 IT 背景的我，理解花了好多時間，不過也總算對網路安全，還有驗證的方式，以及瀏覽器對於安全性驗證的處理邏輯有一定的認知，不過畢竟是新鮮的理解，如果有說錯還請不吝指教。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[extjs 1/30:form 表單之 submit 透過 rest 與後端 grails 的整合]]></title>
    <link href="http://smlsun.com/blog/2013/08/01/extjs-1-30/"/>
    <updated>2013-08-01T21:49:00+08:00</updated>
    <id>http://smlsun.com/blog/2013/08/01/extjs-1-30</id>
    <content type="html"><![CDATA[<p>在 web appication 的開發中，常常會使用到的 form 表單的送出，在 extjs 中我們可以很輕易的使用 <code>Ext.form.Panel</code>，來完成表單的建立。</p>

<p>可參考 <a href="http://try.sencha.com/extjs/4.1.1/community/extjs4-mvc-ajax-xml-form/viewer.html">extjs form sample</a>所提供的範例，來了解程式的運作。</p>

<p>為了簡化表單送出的開發，盡量使用 extjs 所提供的 <code>submit()</code> 來進行表單的送出，他的好處是不需把 form 的欄位收集起來成為 json 往後傳，透過該函式 extjs 會自動將表單所屬元件所定義的 id 作為 request 中的 form data 往後傳，如此一來，一旦表單的內容有所改變，我們也不需調整。</p>

<p>而在筆者目前開發的專案中使用 extjs + grails 的組合並且前後端整合使用 rest 的方式來做為前後端的溝通協定。如下面網址的說明：<a href="http://grails.org/doc/latest/guide/webServices.html#13.1%20REST">grails rest</a>，根據文章中建議的 http method 所對應的不同方法來進行資料的增修改查。</p>

<p>不料在過程中，當要進行 PUT 對應的 UPDATE 時，發生 grails 無法解析表單資料的情形，拜一下 google 找到下面資料：</p>

<p><a href="http://grails.1312388.n4.nabble.com/HTTP-request-params-in-a-PUT-never-reach-the-controller-td1353329.html">HTTP request params in a PUT never reach the controller</a></p>

<p>節錄裡面的重點：</p>

<blockquote><p>It's possible that the servlet container will not parse PUT data as if
it's POST data. I assume that if you use the URL:</p>

<p><code>http://localhost:8080/app/api/users?userId=5</code></p>

<p>then "userId" will appear in the "params" object. However, Grails
handles the parsing of XML and JSON requests, so it you were to send
your parameters as XML, they would probably appear in the "params"
instance.</p></blockquote>

<p>也就是說，在 http method 使用 put 要可以在 grails 中的 params 存取相關的標單資料，必須使用網址方式來傳遞，但若這麼做，就失去我們使用 extjs form 所提供 submit() 的好處，還有資料內容將會輕易的被讀取，更重要的誰也不希望多寫幾行程式，為了要解決此問題，在開始說明解法前我們必須必須了解 http method 中 POST 與 GET 的差異。</p>

<p>一般而言，POST 是用於將表單內的資料送出，PUT 透過 JSON 或是 XML 來將表單送出，也因此後端 server 在接到 request 的 http request method 為 PUT 時，就算有參數包在 request body(form data) grails 也不會進行解析。</p>

<p>了解了表單送出的概念以及在 PUT 的情形下正確的表單資料送出的方式，我們就必須讓 extjs form 在表單送出時，將表單內容轉換為 json，在搜尋 extjs 的 api 總算讓我找到解法，<a href="http://docs.sencha.com/extjs/4.2.1/#!/api/Ext.form.Basic-cfg-jsonSubmit">Ext.form.Basic cfg jsonSubmit</a> 就有此參數，一旦設定為 true，當 from 透過函式 submit() 將表單內容送出就會轉換為 json 格式，並且 content-type 變為 application/json。</p>

<p>最後我們只要在 grails 中的 urlMapping.groovy 中，針對你要送出的 route 加上，<code>parseRequest: true</code>，如下</p>

<p>"/$controller/$action?/$id?"(<strong>parseRequest: true</strong>) {...}</p>

<p>如此就可以解決在 form submit 並且 http method 為 PUT 時，grails 無法將 form 送出的表單資料進行存取的問題。</p>

<p>此問題與我的夥伴 <a href="http://blog.lyhdev.com/p/by-lyhcode.html">lyhcode</a>共同發現並解決，也可以參考由他所撰寫詳盡的說明 <a href="http://blog.lyhdev.com/2013/07/ext-js-grails-restful-web-services-put.html">Ext JS + Grails RESTful Web Services 實作問題之 PUT 表單資料
</a></p>

<p>Ext JS 教學內容由思創軟體提供，共同作者 <a href="http://blog.lyhdev.com/p/by-lyhcode.html">@lyhcode</a> 與 <a href="http://smlsun.com/aboutme/">@smlsun</a> 目前在校園及企業從事 JavaScript（含 Node.js, Ext JS）與 Java（含 Groovy, Grails, Gradle） 教育訓練及顧問工作。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[企業級開發框架：extjs 與 grails 的完美組合]]></title>
    <link href="http://smlsun.com/blog/2013/05/09/extjs-with-grails/"/>
    <updated>2013-05-09T21:44:00+08:00</updated>
    <id>http://smlsun.com/blog/2013/05/09/extjs-with-grails</id>
    <content type="html"><![CDATA[<p>本篇的重點在於說明 extjs 作為 web 應用程式前端的 framework，如何與目前常用的 full stack framework 進行整合，在此將以 grails 為例，當然不只可以跟 grails 整合，其他像 RoR 或者 .net，甚至是 node.js 都可以作為 extjs 的後端服務提供者。</p>

<p>透過 grails 這樣的整合範例，希望可以讓讀者體會不只能夠快速開發，一旦應用程式大到一定程度，也可以很方便的維護，並且在開發流程中的循環都可以順暢的不停轉動。</p>

<hr />

<h2>前後端分工</h2>

<p>開發大型軟體，或是時程上較趕的時候最怕等來等去，在開發應用程式時，最需要確認的是資料庫的設計，一旦定義好之後，如何快速完成 model 並且將測試資料建立完成，以便進行測試，透過 grails 與 extjs 剛好可以完美的解決此問題，前幾篇介紹到的關於 extjs model 類別的使用，其概念與 grails 剛好一拍即合，同樣以之前 <a href="http://ithelp.ithome.com.tw/question/10120206">extjs mvc 為例</a> 裡面用到的 Item，batch，以及 itemImage，在 grails 中宣告如下：</p>

<p>``` groovy
package finder
class Item {</p>

<pre><code>    String name
    String title=""
    String description=""
    static hasMany=[itemImages:ItemImage]
</code></pre>

<p>}</p>

<p>package finder
class Batch {</p>

<pre><code>    String name
    static belongsTo =[item:Item]
</code></pre>

<p>}</p>

<p>package finder
class ItemImage {</p>

<pre><code>Item item
String name
</code></pre>

<p>}
```</p>

<p>grails 可以把它看做 java 中的 RoR，因此也有「約定優於配置」的特性，以往在傳統 java 對於 O/R mapping 這樣的技術，往往需要大量的 xml 定義，在 grails 只要將寫好的 model 放在 grails 下的 model 資料夾，而三個資料表定義就像上面的程式碼一樣，輕鬆簡單！不需要在對資料庫進行 table create，一旦 grails 啟動就會檢查資料庫是否有對應的資料表，判斷若是 develop mode 將會使用虛擬資料庫，在記憶體中就會建立好三個 table，不需要有實體就可以開始對你的應用程式開始進行測試，一旦開發完成，只要進行設定轉換為實體資料庫即可，接著在 grails 中有個類別 BootStrap 在這裡可以定義你要測試的初始資料，以便進行相關應用開發，如下：</p>

<p>``` groovy
import finder.*</p>

<p>class BootStrap {</p>

<p>  def init = { servletContext -></p>

<pre><code>    environments {
        development {
            def item1 = new Item(name:"item1").save(failOnError: true, flush: true)
            def batch1 = new Batch(name:"batch1",item:item1).save(failOnError: true, flush: true)
            def itemImage1 = new ItemImage(name:"itemImage1.jpg",item:item1).save(failOnError: true, flush: true)
        }
    }
</code></pre>

<p>  }
  def destroy = {
  }
}
```</p>

<p>一旦伺服器啟動就會執行在 BootStrap 中的程式碼，如果我們在此區塊撰寫新增資料的程式，每次啟動 grails 都會有新的資料可以進行測試，反覆測試的過程中將免去每次都要建立測試資料的麻煩，並且有預設的設定值也可以在此定義，資料準備好了，前後端就可以分開進行，接著來看如何快速定義好 extjs 與 grails 的溝通橋樑。</p>

<h2>以 RESTful 進行前後端溝通</h2>

<p>extjs 4 有個新的 proxy type：rest，一但定義為 rest proxy，在資料操作上將會根據你對前端資料的更新動作給予不同的 http method，如下：</p>

<ul>
<li>新增：POST</li>
<li>修改：UPDATE</li>
<li>刪除：DELETE</li>
<li>查詢：GET</li>
</ul>


<p>我們會用到另一個敏捷開發特性：Don’t Repeat Yourself(DRY)，在 Grails 有另一個設定檔 URLMappings 可以讓我們設定根據前端 request 的 http method 導入至特定後端 controller method，該檔案設定如下：</p>

<p>``` groovy
class UrlMappings {</p>

<pre><code>static mappings = {
    "/$controller/$action?/$id?"{
        constraints {
        }
    }
    "/rest/$controller/$id"{
        action = [GET: "show", PUT:"update", DELETE:"delete"]
        constraints {
        }
    }
    "/rest/$controller"{
        action = [GET:"listAll", POST: "create"]
        constraints {
        }
    }
    "/"(view:"/home/index")
    "500"(view:'/error')
}
</code></pre>

<p>}
```</p>

<p>可以看到在 URLMappings 的設定中：</p>

<p>``` groovy
"/rest/$controller/$id"{</p>

<pre><code>action = [GET: "show", PUT:"update", DELETE:"delete"]
constraints {
}
</code></pre>

<p>}</p>

<p>"/rest/$controller"{</p>

<pre><code>action = [GET:"listAll", POST: "create"]
constraints {
}
</code></pre>

<p>}
```</p>

<p>代表如果有傳入 id 則是上述的第一種 mapping 方式，根據 http method 的不同對應到不同的 controller 的 method；若沒有 id 則是第二種，實際代表的網址可能為 <code>http://localhost/rest/item/1</code> 或者 <code>http://localhost/rest/batch/</code>，就會根據 UrlMappings 的定義觸動在 controller 中的 method，範例如下：</p>

<p>``` groovy
package finder
import grails.converters.JSON
class ItemController {</p>

<pre><code>def listAll = {
    def items=Item.list()
    render (contentType: 'text/json') {
  [
            items: items,
            total: items.size()
        ]
    }
}

def show = { Long id -&gt;
    def item=Item.findById(id)
    render (contentType: 'text/json') {
  [
            item: item
        ]
    }

}

def create = {
    ...
}
def update = {
    ...
}
def delete={
    ...
}
</code></pre>

<p>}
```</p>

<p>剛剛提到對應的 controller method 就如同上面程式碼中的 listAll，show 等等，到這邊，後端的 server 算是已經準備好，可以開始進行測試，是否發現跟一般 java 比，簡潔很多，寫起來還有點像 javascript？實際上 Grails 骨子裡還是 java，執行時會編譯為 class，因為搭配了 java 中的動態語言 groovy 才有這樣的效果，且並沒有捨棄 java 多年累積廣大的第三方套件，當你需要時皆可以引入，不需重新造輪。</p>

<h2>extjs：store.sync() - 簡化更新</h2>

<p>後端 server 快速準備好後，在 extjs 更加簡化呼叫更新資料請求的程序，在 store 的類別提供一個 method 為 sync()，作用在於一旦 store 載入後，只要對 store 執行 insert，remove，insert 確定更新完成後，一旦執行就會對後端 server 發出 http request，所以，你不用勞你費心，extjs 已幫你完成相關程序，範例 controller 如下：</p>

<p>``` javascript
Ext.define('Frontend.controller.common.Standard', {</p>

<pre><code>extend: 'Ext.app.Controller',

doRead: function() {
    this.store.load();
},
doCreate: function() {
    this.store.insert(0, this.model);
},
doDelete:function(){
    var selection = this.grid.getSelectionModel().getSelection()[0];
    if (selection) {
        this.store.remove(selection);
    }
},
doUpdate: function() {
        //更新對 store 的異動
    this.store.sync({
        success : function(){
            console.log("success");
            Ext.Msg.alert('Status', '更新成功');
        },
        failure : function(response, options){
            console.log("failure");
            Ext.Msg.alert('Status', '更新失敗');
        }  
    });
}
</code></pre>

<p>});
```</p>

<h2>快速前端元件建立</h2>

<p>即使用像 grails 這樣的 full stack framework 對於前端介面還是需要自己重頭刻起，若是搭配 sencha architect 將可以補齊這方面的不足：快速建立前端介面，並且為了敏捷快速的開發，一旦介面拉好，就可以儘快確認需求與操作介面，所完成的介面就可以開始著手開發，介面的變動也可以在 architect 中完成，還記得之前有介紹過在 extjs 中的每個小元件都可以作為類別存在，並且 controller 若以每個元件為目標設計，透過混和（mixins）的特性組合 controller 就可以快速調整介面的呈現與互動。</p>

<h2>extjs develop mode &amp; test</h2>

<p>一個好的框架，必須還要能夠方便測試，在 extjs 中可以很方便的指定某個類別作為初始的 view，可以參考上一篇 <a href="http://ithelp.ithome.com.tw/question/10120289">Sencha Architect 快速開發 extjs</a>中「方便進行測試與開發」的介紹，即使你沒有用 Architect，也可以自行定義，別忘了利用這樣的特性對開發中的介面進行測試。</p>

<h2>extjs production mode</h2>

<p>應用程式開發到一個階段，就會從 develop 進階到所謂的 production mode，其目的就是要盡量加速資源的載入，在前端的世界就是要將所有的 js 檔最小化，並且合為一個 js 檔，雖然 extjs 有動態載入，實際在 production 模式這樣是很耗效能的，如果我們要自行利用 minify 工具進行壓縮，在 extjs 中各類別的相依性就無法顧慮到，並且可能因為組成檔案順序不正確造成衝突，所幸，extjs 也注意到這樣的問題，提供 Sencha cmd 來處理 minify js 的程序，並且可以搭配 Architect 使用，步驟如下：</p>

<ol>
<li><p>利用 sencha cmd 產生 extjs 專案</p>

<pre><code> sencha -sdk {extjs_home} generate app {projectName} {projectLocation}
</code></pre></li>
<li><p>修改 sencha 設定檔：修改 {projectLocation}/.sencha/app/sencha.cfg，加入下面兩行 ：</p>

<pre><code> app.dir={projectLocation}
 app.classpath=${app.dir}/app.js,${app.dir}/app
</code></pre></li>
<li><p>進到 {projectLocation} 執行 production 編譯</p>

<pre><code> sencha app build production
</code></pre></li>
</ol>


<p>如此一來就會將執行完的結果產出在 {projectLocation}/build 底下，就是這們簡單！</p>

<h2>resource 控管</h2>

<p>extjs 所完成的介面在 grails 中將作為 resource 存在，且對 grails 而言屬於靜態檔案，因此可以進行快取來加速資源載入，而在 grails 有一設定檔 ApplicationResources 專門在定義要載入的 resource，在設定時必須考慮 develop 與 production 的不同，設定方式如下:</p>

<p>``` groovy
import org.codehaus.groovy.grails.web.context.ServletContextHolder as SCH
modules = {</p>

<pre><code>// develop mode 使用
extjs4_dev {
    defaultBundle 'finder_dev'

    resource url: 'extjs4_dev/resources/ext-theme-neptune/ext-theme-neptune-all.css'        
    resource url: 'ext/ext-all.js'
    resource url: 'ext/ext-theme-neptune.js'
    resource url: 'app.js'

    getFilesForPath('app').each {
        resource url: it
    }
}   
// production mode 使用
</code></pre>

<p>  extjs4 {</p>

<pre><code>    defaultBundle 'finder'
    resource url: 'extjs4/resources/finder_extjs-all.css'
    resource url: 'extjs4/all-classes.js'
}   
</code></pre>

<p>}</p>

<p>// 載入 path 參數底下所有的檔案作為 resource
def getFilesForPath(path) {</p>

<pre><code>def webFileCachePaths = []
def servletContext = SCH.getServletContext()

if(!servletContext) return webFileCachePaths
def realPath = servletContext.getRealPath('/')
def appDir = new File("$realPath/$path")
appDir.eachFileRecurse {File file -&gt;
    if (file.isDirectory() || file.isHidden()) return
    webFileCachePaths &lt;&lt; file.path.replace(realPath, '')
}
webFileCachePaths
</code></pre>

<p>}
```
經由這樣的設定，grails 會自動將 block 中所定義的 js 檔自動合為單一 js 檔，接著我們只要在 grails 中特有的 gsp 加入下列判斷：</p>

<p>```
&lt;g:if env='development'></p>

<pre><code>&lt;r:require modules="extjs4_dev"/&gt;
</code></pre>

<p>&lt;/g:if>
&lt;g:else></p>

<pre><code>&lt;r:require modules="extjs4"/&gt;
</code></pre>

<p>&lt;/g:else>
```
就會根據不同的開發模式載入不同的 resource 組合。</p>

<h2>打完收工，期待下次在相會！</h2>

<p>這是個想法，目前我們也正在投入這樣的應用，預期可以帶來不一樣的開發方式，軟體開發方式不停的在進步，也許還有很多團隊還在使用老舊的方法，這樣的組合，除了可以敏捷快速的開發，利用 extjs 所提供的方便性，相信可以帶來效率的提升，特別是前端的物件建立與操作，表單式的應用程式非常適合，筆者也曾在企業進行 extjs 的教育訓練，歡迎有興趣的讀者可以互相切磋。</p>

<p>系列文章到此告一段落，期待下次在與大家分享！</p>
]]></content>
  </entry>
  
</feed>
