<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: architect | 蹤影]]></title>
  <link href="http://smlsun.com/blog/categories/architect/atom.xml" rel="self"/>
  <link href="http://smlsun.com/"/>
  <updated>2013-08-15T15:55:15+08:00</updated>
  <id>http://smlsun.com/</id>
  <author>
    <name><![CDATA[smlsun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[extjs-9-30 更無縫的與 grails 進行整合]]></title>
    <link href="http://smlsun.com/blog/2013/08/14/extjs-9-30/"/>
    <updated>2013-08-14T17:29:00+08:00</updated>
    <id>http://smlsun.com/blog/2013/08/14/extjs-9-30</id>
    <content type="html"><![CDATA[<p>筆者之前在寫過一篇關於 <a href="http://ithelp.ithome.com.tw/question/10120329">extjs 與 grails 的完美組合</a>，大概說明了 extjs 與 grails 整合所帶來的優點，以及兩者 mvc 的結構可以更快速的開發出容易維護的應用程式，更進一步的我們希望兩者的連結對於資料的 mapping 與更新能夠更加直接。</p>

<p>標題所說的更無縫的整合，在這所要說明的正是關於資料的傳遞，在開發 web 應用程式時，很多時候我們需要處理前端資料結構與後端物件的 mapping，以便進行資料的增修改查，假設我們需要建立一個 grid 如下圖：</p>

<p><img src="https://lh5.googleusercontent.com/-WO1kVajzXjg/Ugws44JF0wI/AAAAAAAALyQ/3yB24oNvfho/w433-h173-no/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7+2013-08-15+%25E4%25B8%258A%25E5%258D%25887.55.06.jpg" alt="image" /></p>

<h2>grials 的 domain 與 extjs 的 model 定義</h2>

<p>畫面以及元件的組立在這就不多做說明，會與後端有關係的就是 domain 與 model的定義，兩者各自代表系統在運作時的資料結構，雖然命名不同，性質是一樣的，假設我們有兩個定義在 grails 的 domain 如下：</p>

<p>``` groovy
class Item {</p>

<pre><code>String name
String title=""

static constraints = {
}
</code></pre>

<p>}</p>

<p>class Batch {</p>

<pre><code>static belongsTo=[Item:item]
String name


static constraints = {
}
</code></pre>

<p>}
```</p>

<p>很簡單的兩層結構，在 extjs 也要有對應的 model 如下：</p>

<p>``` javascript
Ext.define('MyApp.model.Item', {</p>

<pre><code>extend: 'Ext.data.Model',

fields: [
    {
        name: 'id'
    },
    {
        name: 'title'
    },
    {
        name: 'name'
    }
],

proxy: {
    type: 'rest',
    url: '/rest/item',
    reader: {
        type: 'json',
        root: 'itemInstanceList',
        totalProperty: 'itemInstanceTotal'
    }
}
</code></pre>

<p>});</p>

<p>Ext.define('MyApp.model.Batch', {</p>

<pre><code>extend: 'Ext.data.Model',

fields: [
    {
        name: 'id'
    },
    {
        name: 'name'
    },
    {
        mapping: 'item.id',
        name: 'item.id'
    }
],

proxy: {
    type: 'rest',
    url: '/rest/batch',
    reader: {
        type: 'json',
        root: 'batchInstanceList',
        totalProperty: 'BatchInstanceTotal'
    }
}
</code></pre>

<p>});
```
同樣定義了相同的資料結構只不過在 extjs 前端多了 id 是因為在 grails 中 id 欄位將會自動產生，不需要經過定義。</p>

<h2>grials 與 extjs 的資料交換與 mapping</h2>

<p>接著要說明兩者之間的資料如何進行交換傳遞，在上述 extjs 的 model 中，proxy 定義了與後端溝通的方式，在這邊我們使用 rest 的方式，reader 定義了回傳回來的資料該如何進行解析，範例的回傳結構如下：</p>

<p>``` javascript
{</p>

<pre><code>"batchInstanceList": [
    {
        "class": "extjs.grails.sample.Batch",
        "id": 1,
        "item": {
            "class": "Item",
            "id": 1
        },
        "name": "batch1"
    },
    {
        "class": "extjs.grails.sample.Batch",
        "id": 2,
        "item": {
            "class": "Item",
            "id": 1
        },
        "name": "batch2"
    }
],
"batchInstanceTotal": 3
</code></pre>

<p>}
```</p>

<p>其中 root 與 totalProperty 所指定的就是在回傳 json 中對應的屬性名稱，更進階的，我們可以多層如同：</p>

<p>``` javascript
{</p>

<pre><code>"itemInstanceList": [
    {
        "class": "extjs.grails.sample.Batch",
        "id": 1,
        "item": {
            "class": "Item",
            "id": 1
        },
        "name": "batch1"
        "route": {
            [
                {
                    id:1
                    name:'route1'
                },
                {
                    id:2
                    name:'route2'
                }

            ]
        },
    },
    {
        "class": "extjs.grails.sample.Batch",
        "id": 2,
        "item": {
            "class": "Item",
            "id": 1
        },
        "name": "batch2"
    }
],
"batchInstanceTotal": 3
</code></pre>

<p>}
```</p>

<p>這樣的結構下我們可以這樣定義 root：</p>

<pre><code>root: 'batchInstanceList.route',
</code></pre>

<p>很多時候 model 會有 hasMany 的關係，json 解析時清楚看到資料的結構，實際使用時也可以根據不同情形取出不同層級的資料內容進行 grid 的呈現。</p>

<p>另一種情形是為了節省 request 的量，會希望一次交易就將多組資料一次從後端取得，可以指定多層的索引方式就格外重要。</p>

<p>說明完了資料結構的定義，我們在進一步來看單筆資料的回傳，假設我們利用 ajax 將資料送出並且回傳格式為 json 內容如下</p>

<pre><code>{
    id: 1
    item_id: 1
    name: "batch2"
}
</code></pre>

<p>後端 grails 接收到這樣的資料時，前端所傳入的參數值都存入 <code>params</code> 這個變數以便進行存取取得任何資料，就跟使用 json object 一樣，我們可以這樣進行更新：</p>

<p>``` groovy
// update
def batchInstance=Batch.get(params.id)
batchInstance.properties = params
batchInstance.item=Item.findById(params.item_id)
batchInstance.save()</p>

<p>// create
def batchInstance=new Batch(params)
batchInstance.item=Item.findById(params.item_id)
batchInstance.save()
```</p>

<p>在使用 grails 時，雖然 update 與 create 的使用方式不同，但我們都可以將整個 json 傳入 domain 讓 grails 自動幫我們進行資料的 mapping，透過 json 裡的每個參數名，而在有多層架構下，初學使用可能會向上述範例程式一樣，需要在查詢一次下層 domain，其實 grails 對於多層的物件也可以自動 mapping 並且查出，假設我們的回資料結構改變為下：</p>

<pre><code>{
    id: 1
    item.id: 1 // item_id &gt;&gt; item.id
    name: 'batch'
}
</code></pre>

<p>如此一來在 grails 中我們可以這樣存取 item.id：<code>params.item.id</code>，也就是說傳入 grails 的參數如果是有多層結構，我們可以在前端 field 之 id 定義成對應的多層結構的如同上述範例，即使是使用 form 的格式也是一樣對應 input field 的 name。</p>

<p>調整完後我們的 update 與 create 可以精簡如下：</p>

<p>``` groovy
// update
def batchInstance=Batch.get(params.id)
batchInstance.properties = params
batchInstance.save()</p>

<p>// create
def batchInstance=new Batch(params)
batchInstance.save()
```</p>

<p>這樣的特性有什麼好處？在不需要特殊的欄位處理下，對於 domain 欄位的調整或新增我們不需要變動到 update 與 create 的處理，所有中間的資料 mapping 都交由 grails 幫我們處理完成，相信還有更重要的事值得我們去花時間。</p>

<p>關於 grails 的 data binding 方式，讀者可以參考 grails 的官方 <a href="http://grails.org/doc/latest/guide/single.html#dataBinding">7.1.6 Data Binding</a>，裡面有其他更進階方變得 binding 規則，其中在筆者的專案中有遇到一個問題，在要將關連 domain 設為空的時候傳入 null 值一直無法正確運作，在官方說明 binding 的章節中有一段說明：</p>

<blockquote><p>An association property can be set to null by passing the literal String "null".</p></blockquote>

<p>像是這種情形，就應該要把要設為 null 的物件其值改為 "null"，如此一來我們就可以把關連 domain 設為空，移除該關連。</p>

<h2>sencha architect 使用注意事項</h2>

<p>最後還要在說明的是在使用 architect 定義前端 model 的 name 時不允許輸入 "." 會跳出下圖訊息：</p>

<p><img src="https://lh6.googleusercontent.com/-mQB4Eknmjgk/Ugws5QX998I/AAAAAAAALyc/GAjDYfB8xb0/w370-h97-no/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7+2013-08-15+%25E4%25B8%258A%25E5%258D%25889.08.03.jpg" alt="image" /></p>

<p>你只要先用 '_' 將他建立完成，之後再進入 field 將 name 中的 _ 改為 '.' 即可，算是兩邊的限制不一樣，基本上 field 中的 name 有 '.' 是不影響運作的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[extjs-8-30：在 sencha Architect 中的多語系處理]]></title>
    <link href="http://smlsun.com/blog/2013/08/14/extjs-8-30/"/>
    <updated>2013-08-14T16:50:00+08:00</updated>
    <id>http://smlsun.com/blog/2013/08/14/extjs-8-30</id>
    <content type="html"><![CDATA[<p>關於 extjs 的多語系處理，我們可以參考下列網址：<a href="http://ffzhuang.blogspot.tw/2010/04/quick-add-multiple-language-to-extjs.html">Quick add multiple language to extjs + grails application</a>，或者你可以使用別人寫的 <a href="https://github.com/TigrouMeow/extjs-locale-loader">extjs-locale-loader</a></p>

<p>基本的概念是， 你可以將你的語系資料定義在一個全域的 json Object，如此一來就可以在需要顯示對應語系的地方替換成 json object 裡面的某個屬性，但是在使用 Architect 時，有些屬性不一定可以透過他進行調整，比如說我們希望調整 Panel.title，在 Architect 你只能在 title 的屬性輸入文字屬性不能輸入變數，就算輸入了也會被當字串處理，這狀況確實令人苦惱，不過在遍尋相關資料後，總算讓筆者找到解法，就在官方的文件中關於 <a href="http://docs.sencha.com/architect/2/#!/guide/config_panel">config_panel</a> 說明中 <strong>Using Variables with Configs</strong> 章節，概念上是：title 雖然不能調整資料的類型，但我們可以在任一元件新增 <code>Process config</code> 他會建立一個函式，在裡面可以對 config 進行裡面的欄位調整，光看文件的說明很難想像到底是如何運作，我們可以來看實際產生的程式碼，在還未加入 <code>Process config</code> 之前：</p>

<p>``` javascript</p>

<p>Ext.define('foodprint.view.ItemEditor', {</p>

<pre><code>extend: 'Ext.tab.Panel',
alias: 'widget.itemeditor',
itemId: 'itemEditor',
activeTab: 0,

initComponent: function() {
    var me = this;

    Ext.applyIf(me, {
        items: [
            {
                xtype: 'panel',
                layout: {
                    align: 'stretch',
                    type: 'vbox'
                },
                title: 'list',
                items: [
                    {
                        xtype: 'itemgrid'
                    }
                ]
            },
            {
                xtype: 'panel',
                layout: {
                    align: 'stretch',
                    type: 'vbox'
                },
                title: '資料維護',
                items: [
                    {
                        xtype: 'itemviewer',
                        flex: 1
                    }
                ]
            }
        ]
    });

    me.callParent(arguments);
}
</code></pre>

<p>});
```</p>

<p>很標準的寫法，我們在 initComponent 將我們需要的加入的元件定義好，其中包括 title 是一個文字 'list'，也就是我們沒辦法利用 Arcitect 修改的地方，接著我們來看加入 <code>Process config</code> 之後的程式碼：</p>

<p>``` javascript
Ext.define('foodprint.view.ItemEditor', {</p>

<pre><code>extend: 'Ext.tab.Panel',
alias: 'widget.itemeditor',
itemId: 'itemEditor',
initComponent: function() {
    var me = this;

    Ext.applyIf(me, {
        items: [
            me.processLocalized({
                xtype: 'panel',
                layout: {
                    align: 'stretch',
                    type: 'vbox'
                },
                title: 'list',
                items: [
                    {
                        xtype: 'itemgrid'
                    }
                ]
            }),
            {
                xtype: 'panel',
                layout: {
                    align: 'stretch',
                    type: 'vbox'
                },
                title: '資料維護',
                items: [
                    {
                        xtype: 'itemviewer',
                        flex: 1
                    }
                ]
            }
        ]
    });

    me.callParent(arguments);
},

processLocalized: function(config) {
    config.title=foodprint.string.list;
    return config;
}
</code></pre>

<p>});
```</p>

<p>一旦加入了 <code>Process config</code> 之後可以看到在 <code>initComponent</code> 這個函式中他將 json object 作為參數傳入 <code>processLocalized</code> 如此一來我們就可以在該函式進行所謂的語系替換，也就可以做到將 title 替換成變數，就解決了沒辦法調整 title 資料型態的窘境。</p>

<p>接著，我們就可以定義我們的語系檔，範例如下：</p>

<p><code>javascript
var foodprint = {};  
foodprint.string = {};  
foodprint.string.list = "瀏覽清單";  
</code></p>

<p>並且在 Architect 中引入該 js 檔案，如圖：</p>

<p><img src="https://lh3.googleusercontent.com/-CLfnp9EuuvU/Ugth32ooVPI/AAAAAAAALyA/dJ04sF13hQQ/w362-h291-no/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7+2013-08-14+%25E4%25B8%258B%25E5%258D%25886.53.25.jpg" alt="link" /></p>

<p>至於動態載入不同的語系檔，這邊就不做探討，那是另一個議題，網路上也有一些解法，就先留給各位讀者研究囉。</p>

<p>一開始發現此問題時，直覺反應是這也太不方便了吧！不過在體驗了這樣的作法之後，又覺得這樣做真的很神奇，好處是語系的替換不會散佈在程式碼各處，透過不同函式負責不同的處理，一旦需要新增語系也可以有一致的處理方式，另外在 Architect 進行開發時，畫面上的呈現也可以是簡單易讀的明確文字，確實是兼顧可讀性的處理方式，給大家參考，若有更好的方式也請讓我知道！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[extjs 2/30:使用 sencha architect 開發注意事項]]></title>
    <link href="http://smlsun.com/blog/2013/08/01/extjs-2-30/"/>
    <updated>2013-08-01T22:52:00+08:00</updated>
    <id>http://smlsun.com/blog/2013/08/01/extjs-2-30</id>
    <content type="html"><![CDATA[<p>在使用 sencha architect 開發時，我們很難對 js 檔進行檔案修改，基本上所有的檔案調整，都是透過 architect 存檔時一並寫入對應的原始檔案，其中關於每個 js 的原始檔放於 <code>EXTJS_HOME/metadata</code>，但一旦你進入該資料夾檢視相關的檔案，可以發現他跟一般的 js 有出入，所以你也不要想再裡面進行編輯，有可能會造成整個專案運作異常。</p>

<p>除此之外在專案裡面，有兩個設定檔為 architect 所產生分別是 <code>.architect</code> 以及 <code>projectName.xds</code>，其中 <code>.architect</code> 會自動產生，但 xds 就不好搞了，如果你是一個人開發，還不致於發生問題，但若是多人開發，再加上有使用版本控管，問題就來了；xds 檔所記錄的似乎是在 architect 建立 extjs 元件之間的關聯，因此若是多人開發不同的功能，並且在版本控管的情況下，該檔案很容易有衝突；而在編修衝突時，很多時候會不知道該如何下手，因為代表元件的相關檔案識別皆已編碼，只有 IDE 才看的懂對應的關係，如果 xds 的內容無關緊要或是會重新產生那就算了，偏偏 xds 檔在 architect 是主要專案的進入點，因此如果處理的不好，很容易造成專案運作異常。</p>

<p>就筆者的經驗，一般 extjs 元件的建立或修改基本上都比較不會有問題，最容易產生異常的通常是在 application.js 這個檔案，在 extjs 的世界裡，該檔案定義了一個應用程式在運行時，需要載入 extjs 中 mvc 各個物件，為什麼他很容易出現問題呢？主要因為在使用 architect 時，當你新增元件時，IDE 將會自動將你新增的元件載入到 application.js 中，多人開發情形下，Application.js 就會是所有人的交集，不然照理分別開發新功能所新增的元件皆不同不應該會頻繁造成衝突，而因為 application.js 的多人異動，造成再 xds 中對 application.js 的檔案識別常常會有不同的代表造成衝突，一旦 xds 衝突一發生，編修時一不小心讓 IDE 不認得 Application.js，就會造成 Application.js 無法被識別，導致 IDE 認為沒有建立 Application.js，則以最原始的狀態 Application.js 作為預設，也就是沒有任何元件載入，導致於系統運作異常。</p>

<p>知道問題發生的原因，那上述問題怎麼解？其實只要改變我們建立物件的習慣即可，在說明作法前，需要先讓大家了解一下 extjs 如何載入相關 js 檔的，在 extjs 中，不管你是宣告 mvc 其中的任一類型的元件，或是繼承 extjs 原生的類別，很多時候我們會使用 require 這個宣告，來告訴 extjs 該元件要運作需要哪些類別配合，一旦你有定義 require，當元件運行時，extjs 就會自動將相關 require 的類別進行載入，這是個很方便的特性，幫助我們省去在 html 中載入所需 js 的麻煩，進一步的減少元件忘記或是載入錯誤。</p>

<p>前面有提到 application.js 是多人開發時的交集，一個方法是減少交集的產生，而我們該如何減少交集呢？可以用到 extjs 自動載入元件的特性，將我們需要用到的元件皆定義在 controller 底下，而在 application.js 只載入 controller 相關元件，如此就可以減少 application.js 變動，即使真的不幸還是造成 application.js 異常，我們知道只要將所有 controller 載入即可恢復，除了避免多人開發時造成程式碼衝突，將需要的物件定義在 controller 裡面也才是較正確的方式，完善的定義該功能再運行時所需的元件，可以帶來更易於維護的優點，另外在使用 architect 時，一旦你將相關物件加入 controller 時，IDE 也會問你要不要將設定在 application 載入的元件移除，如此一來元件所責任的功能也會更加清楚。</p>

<p>上述的解法，是筆者根據經驗認為比較優的解法，如果讀者有更好的想法也歡迎分享，希望可以讓有同樣困擾的人節省一點時間。</p>

<p>最後綜合上述的內容，整理出使用 architect 開發需要注意的重點如下：</p>

<ol>
<li>.sencha 檔案可以不用加入版本控管，一旦你使用 architect 進行存檔時，該檔案都會重新產生，衝突情形也可以直接覆蓋最新版本</li>
<li>xds 檔，很多時候都會有衝突，更新程式碼有衝突時，編修完成後記得開啟 architect 確認 application.js 中掛載的元件是否還好好的在那邊。</li>
<li>因為 architect 在編輯過程中不會動態載入你的元件，因此一旦你在 IDE 開啟中的狀態要進行程式碼更新，建議先對專案進行存檔，並且程式碼一旦更新為最新的，記得將 IDE 重啟以便重新載入所有更新過程式碼。</li>
<li>建立 extjs 元件時，不要懶惰讓 IDE 自行將元件加入到 application.js 可以的話建立該功能所需要的 controller 將其歸屬進去，整個功能架構也會更加清楚。</li>
<li>在 application 中，原則上只管理需要載入的 controller 即可，一旦編修衝突不順利，可以很快的進行復原。</li>
</ol>

]]></content>
  </entry>
  
</feed>
