<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: grails | 蹤影]]></title>
  <link href="http://smlsun.com/blog/categories/grails/atom.xml" rel="self"/>
  <link href="http://smlsun.com/"/>
  <updated>2013-08-15T15:55:15+08:00</updated>
  <id>http://smlsun.com/</id>
  <author>
    <name><![CDATA[smlsun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[extjs-9-30 更無縫的與 grails 進行整合]]></title>
    <link href="http://smlsun.com/blog/2013/08/14/extjs-9-30/"/>
    <updated>2013-08-14T17:29:00+08:00</updated>
    <id>http://smlsun.com/blog/2013/08/14/extjs-9-30</id>
    <content type="html"><![CDATA[<p>筆者之前在寫過一篇關於 <a href="http://ithelp.ithome.com.tw/question/10120329">extjs 與 grails 的完美組合</a>，大概說明了 extjs 與 grails 整合所帶來的優點，以及兩者 mvc 的結構可以更快速的開發出容易維護的應用程式，更進一步的我們希望兩者的連結對於資料的 mapping 與更新能夠更加直接。</p>

<p>標題所說的更無縫的整合，在這所要說明的正是關於資料的傳遞，在開發 web 應用程式時，很多時候我們需要處理前端資料結構與後端物件的 mapping，以便進行資料的增修改查，假設我們需要建立一個 grid 如下圖：</p>

<p><img src="https://lh5.googleusercontent.com/-WO1kVajzXjg/Ugws44JF0wI/AAAAAAAALyQ/3yB24oNvfho/w433-h173-no/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7+2013-08-15+%25E4%25B8%258A%25E5%258D%25887.55.06.jpg" alt="image" /></p>

<h2>grials 的 domain 與 extjs 的 model 定義</h2>

<p>畫面以及元件的組立在這就不多做說明，會與後端有關係的就是 domain 與 model的定義，兩者各自代表系統在運作時的資料結構，雖然命名不同，性質是一樣的，假設我們有兩個定義在 grails 的 domain 如下：</p>

<p>``` groovy
class Item {</p>

<pre><code>String name
String title=""

static constraints = {
}
</code></pre>

<p>}</p>

<p>class Batch {</p>

<pre><code>static belongsTo=[Item:item]
String name


static constraints = {
}
</code></pre>

<p>}
```</p>

<p>很簡單的兩層結構，在 extjs 也要有對應的 model 如下：</p>

<p>``` javascript
Ext.define('MyApp.model.Item', {</p>

<pre><code>extend: 'Ext.data.Model',

fields: [
    {
        name: 'id'
    },
    {
        name: 'title'
    },
    {
        name: 'name'
    }
],

proxy: {
    type: 'rest',
    url: '/rest/item',
    reader: {
        type: 'json',
        root: 'itemInstanceList',
        totalProperty: 'itemInstanceTotal'
    }
}
</code></pre>

<p>});</p>

<p>Ext.define('MyApp.model.Batch', {</p>

<pre><code>extend: 'Ext.data.Model',

fields: [
    {
        name: 'id'
    },
    {
        name: 'name'
    },
    {
        mapping: 'item.id',
        name: 'item.id'
    }
],

proxy: {
    type: 'rest',
    url: '/rest/batch',
    reader: {
        type: 'json',
        root: 'batchInstanceList',
        totalProperty: 'BatchInstanceTotal'
    }
}
</code></pre>

<p>});
```
同樣定義了相同的資料結構只不過在 extjs 前端多了 id 是因為在 grails 中 id 欄位將會自動產生，不需要經過定義。</p>

<h2>grials 與 extjs 的資料交換與 mapping</h2>

<p>接著要說明兩者之間的資料如何進行交換傳遞，在上述 extjs 的 model 中，proxy 定義了與後端溝通的方式，在這邊我們使用 rest 的方式，reader 定義了回傳回來的資料該如何進行解析，範例的回傳結構如下：</p>

<p>``` javascript
{</p>

<pre><code>"batchInstanceList": [
    {
        "class": "extjs.grails.sample.Batch",
        "id": 1,
        "item": {
            "class": "Item",
            "id": 1
        },
        "name": "batch1"
    },
    {
        "class": "extjs.grails.sample.Batch",
        "id": 2,
        "item": {
            "class": "Item",
            "id": 1
        },
        "name": "batch2"
    }
],
"batchInstanceTotal": 3
</code></pre>

<p>}
```</p>

<p>其中 root 與 totalProperty 所指定的就是在回傳 json 中對應的屬性名稱，更進階的，我們可以多層如同：</p>

<p>``` javascript
{</p>

<pre><code>"itemInstanceList": [
    {
        "class": "extjs.grails.sample.Batch",
        "id": 1,
        "item": {
            "class": "Item",
            "id": 1
        },
        "name": "batch1"
        "route": {
            [
                {
                    id:1
                    name:'route1'
                },
                {
                    id:2
                    name:'route2'
                }

            ]
        },
    },
    {
        "class": "extjs.grails.sample.Batch",
        "id": 2,
        "item": {
            "class": "Item",
            "id": 1
        },
        "name": "batch2"
    }
],
"batchInstanceTotal": 3
</code></pre>

<p>}
```</p>

<p>這樣的結構下我們可以這樣定義 root：</p>

<pre><code>root: 'batchInstanceList.route',
</code></pre>

<p>很多時候 model 會有 hasMany 的關係，json 解析時清楚看到資料的結構，實際使用時也可以根據不同情形取出不同層級的資料內容進行 grid 的呈現。</p>

<p>另一種情形是為了節省 request 的量，會希望一次交易就將多組資料一次從後端取得，可以指定多層的索引方式就格外重要。</p>

<p>說明完了資料結構的定義，我們在進一步來看單筆資料的回傳，假設我們利用 ajax 將資料送出並且回傳格式為 json 內容如下</p>

<pre><code>{
    id: 1
    item_id: 1
    name: "batch2"
}
</code></pre>

<p>後端 grails 接收到這樣的資料時，前端所傳入的參數值都存入 <code>params</code> 這個變數以便進行存取取得任何資料，就跟使用 json object 一樣，我們可以這樣進行更新：</p>

<p>``` groovy
// update
def batchInstance=Batch.get(params.id)
batchInstance.properties = params
batchInstance.item=Item.findById(params.item_id)
batchInstance.save()</p>

<p>// create
def batchInstance=new Batch(params)
batchInstance.item=Item.findById(params.item_id)
batchInstance.save()
```</p>

<p>在使用 grails 時，雖然 update 與 create 的使用方式不同，但我們都可以將整個 json 傳入 domain 讓 grails 自動幫我們進行資料的 mapping，透過 json 裡的每個參數名，而在有多層架構下，初學使用可能會向上述範例程式一樣，需要在查詢一次下層 domain，其實 grails 對於多層的物件也可以自動 mapping 並且查出，假設我們的回資料結構改變為下：</p>

<pre><code>{
    id: 1
    item.id: 1 // item_id &gt;&gt; item.id
    name: 'batch'
}
</code></pre>

<p>如此一來在 grails 中我們可以這樣存取 item.id：<code>params.item.id</code>，也就是說傳入 grails 的參數如果是有多層結構，我們可以在前端 field 之 id 定義成對應的多層結構的如同上述範例，即使是使用 form 的格式也是一樣對應 input field 的 name。</p>

<p>調整完後我們的 update 與 create 可以精簡如下：</p>

<p>``` groovy
// update
def batchInstance=Batch.get(params.id)
batchInstance.properties = params
batchInstance.save()</p>

<p>// create
def batchInstance=new Batch(params)
batchInstance.save()
```</p>

<p>這樣的特性有什麼好處？在不需要特殊的欄位處理下，對於 domain 欄位的調整或新增我們不需要變動到 update 與 create 的處理，所有中間的資料 mapping 都交由 grails 幫我們處理完成，相信還有更重要的事值得我們去花時間。</p>

<p>關於 grails 的 data binding 方式，讀者可以參考 grails 的官方 <a href="http://grails.org/doc/latest/guide/single.html#dataBinding">7.1.6 Data Binding</a>，裡面有其他更進階方變得 binding 規則，其中在筆者的專案中有遇到一個問題，在要將關連 domain 設為空的時候傳入 null 值一直無法正確運作，在官方說明 binding 的章節中有一段說明：</p>

<blockquote><p>An association property can be set to null by passing the literal String "null".</p></blockquote>

<p>像是這種情形，就應該要把要設為 null 的物件其值改為 "null"，如此一來我們就可以把關連 domain 設為空，移除該關連。</p>

<h2>sencha architect 使用注意事項</h2>

<p>最後還要在說明的是在使用 architect 定義前端 model 的 name 時不允許輸入 "." 會跳出下圖訊息：</p>

<p><img src="https://lh6.googleusercontent.com/-mQB4Eknmjgk/Ugws5QX998I/AAAAAAAALyc/GAjDYfB8xb0/w370-h97-no/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7+2013-08-15+%25E4%25B8%258A%25E5%258D%25889.08.03.jpg" alt="image" /></p>

<p>你只要先用 '_' 將他建立完成，之後再進入 field 將 name 中的 _ 改為 '.' 即可，算是兩邊的限制不一樣，基本上 field 中的 name 有 '.' 是不影響運作的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[extjs 1/30:form 表單之 submit 透過 rest 與後端 grails 的整合]]></title>
    <link href="http://smlsun.com/blog/2013/08/01/extjs-1-30/"/>
    <updated>2013-08-01T21:49:00+08:00</updated>
    <id>http://smlsun.com/blog/2013/08/01/extjs-1-30</id>
    <content type="html"><![CDATA[<p>在 web appication 的開發中，常常會使用到的 form 表單的送出，在 extjs 中我們可以很輕易的使用 <code>Ext.form.Panel</code>，來完成表單的建立。</p>

<p>可參考 <a href="http://try.sencha.com/extjs/4.1.1/community/extjs4-mvc-ajax-xml-form/viewer.html">extjs form sample</a>所提供的範例，來了解程式的運作。</p>

<p>為了簡化表單送出的開發，盡量使用 extjs 所提供的 <code>submit()</code> 來進行表單的送出，他的好處是不需把 form 的欄位收集起來成為 json 往後傳，透過該函式 extjs 會自動將表單所屬元件所定義的 id 作為 request 中的 form data 往後傳，如此一來，一旦表單的內容有所改變，我們也不需調整。</p>

<p>而在筆者目前開發的專案中使用 extjs + grails 的組合並且前後端整合使用 rest 的方式來做為前後端的溝通協定。如下面網址的說明：<a href="http://grails.org/doc/latest/guide/webServices.html#13.1%20REST">grails rest</a>，根據文章中建議的 http method 所對應的不同方法來進行資料的增修改查。</p>

<p>不料在過程中，當要進行 PUT 對應的 UPDATE 時，發生 grails 無法解析表單資料的情形，拜一下 google 找到下面資料：</p>

<p><a href="http://grails.1312388.n4.nabble.com/HTTP-request-params-in-a-PUT-never-reach-the-controller-td1353329.html">HTTP request params in a PUT never reach the controller</a></p>

<p>節錄裡面的重點：</p>

<blockquote><p>It's possible that the servlet container will not parse PUT data as if
it's POST data. I assume that if you use the URL:</p>

<p><code>http://localhost:8080/app/api/users?userId=5</code></p>

<p>then "userId" will appear in the "params" object. However, Grails
handles the parsing of XML and JSON requests, so it you were to send
your parameters as XML, they would probably appear in the "params"
instance.</p></blockquote>

<p>也就是說，在 http method 使用 put 要可以在 grails 中的 params 存取相關的標單資料，必須使用網址方式來傳遞，但若這麼做，就失去我們使用 extjs form 所提供 submit() 的好處，還有資料內容將會輕易的被讀取，更重要的誰也不希望多寫幾行程式，為了要解決此問題，在開始說明解法前我們必須必須了解 http method 中 POST 與 GET 的差異。</p>

<p>一般而言，POST 是用於將表單內的資料送出，PUT 透過 JSON 或是 XML 來將表單送出，也因此後端 server 在接到 request 的 http request method 為 PUT 時，就算有參數包在 request body(form data) grails 也不會進行解析。</p>

<p>了解了表單送出的概念以及在 PUT 的情形下正確的表單資料送出的方式，我們就必須讓 extjs form 在表單送出時，將表單內容轉換為 json，在搜尋 extjs 的 api 總算讓我找到解法，<a href="http://docs.sencha.com/extjs/4.2.1/#!/api/Ext.form.Basic-cfg-jsonSubmit">Ext.form.Basic cfg jsonSubmit</a> 就有此參數，一旦設定為 true，當 from 透過函式 submit() 將表單內容送出就會轉換為 json 格式，並且 content-type 變為 application/json。</p>

<p>最後我們只要在 grails 中的 urlMapping.groovy 中，針對你要送出的 route 加上，<code>parseRequest: true</code>，如下</p>

<p>"/$controller/$action?/$id?"(<strong>parseRequest: true</strong>) {...}</p>

<p>如此就可以解決在 form submit 並且 http method 為 PUT 時，grails 無法將 form 送出的表單資料進行存取的問題。</p>

<p>此問題與我的夥伴 <a href="http://blog.lyhdev.com/p/by-lyhcode.html">lyhcode</a>共同發現並解決，也可以參考由他所撰寫詳盡的說明 <a href="http://blog.lyhdev.com/2013/07/ext-js-grails-restful-web-services-put.html">Ext JS + Grails RESTful Web Services 實作問題之 PUT 表單資料
</a></p>

<p>Ext JS 教學內容由思創軟體提供，共同作者 <a href="http://blog.lyhdev.com/p/by-lyhcode.html">@lyhcode</a> 與 <a href="http://smlsun.com/aboutme/">@smlsun</a> 目前在校園及企業從事 JavaScript（含 Node.js, Ext JS）與 Java（含 Groovy, Grails, Gradle） 教育訓練及顧問工作。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[企業級開發框架：extjs 與 grails 的完美組合]]></title>
    <link href="http://smlsun.com/blog/2013/05/09/extjs-with-grails/"/>
    <updated>2013-05-09T21:44:00+08:00</updated>
    <id>http://smlsun.com/blog/2013/05/09/extjs-with-grails</id>
    <content type="html"><![CDATA[<p>本篇的重點在於說明 extjs 作為 web 應用程式前端的 framework，如何與目前常用的 full stack framework 進行整合，在此將以 grails 為例，當然不只可以跟 grails 整合，其他像 RoR 或者 .net，甚至是 node.js 都可以作為 extjs 的後端服務提供者。</p>

<p>透過 grails 這樣的整合範例，希望可以讓讀者體會不只能夠快速開發，一旦應用程式大到一定程度，也可以很方便的維護，並且在開發流程中的循環都可以順暢的不停轉動。</p>

<hr />

<h2>前後端分工</h2>

<p>開發大型軟體，或是時程上較趕的時候最怕等來等去，在開發應用程式時，最需要確認的是資料庫的設計，一旦定義好之後，如何快速完成 model 並且將測試資料建立完成，以便進行測試，透過 grails 與 extjs 剛好可以完美的解決此問題，前幾篇介紹到的關於 extjs model 類別的使用，其概念與 grails 剛好一拍即合，同樣以之前 <a href="http://ithelp.ithome.com.tw/question/10120206">extjs mvc 為例</a> 裡面用到的 Item，batch，以及 itemImage，在 grails 中宣告如下：</p>

<p>``` groovy
package finder
class Item {</p>

<pre><code>    String name
    String title=""
    String description=""
    static hasMany=[itemImages:ItemImage]
</code></pre>

<p>}</p>

<p>package finder
class Batch {</p>

<pre><code>    String name
    static belongsTo =[item:Item]
</code></pre>

<p>}</p>

<p>package finder
class ItemImage {</p>

<pre><code>Item item
String name
</code></pre>

<p>}
```</p>

<p>grails 可以把它看做 java 中的 RoR，因此也有「約定優於配置」的特性，以往在傳統 java 對於 O/R mapping 這樣的技術，往往需要大量的 xml 定義，在 grails 只要將寫好的 model 放在 grails 下的 model 資料夾，而三個資料表定義就像上面的程式碼一樣，輕鬆簡單！不需要在對資料庫進行 table create，一旦 grails 啟動就會檢查資料庫是否有對應的資料表，判斷若是 develop mode 將會使用虛擬資料庫，在記憶體中就會建立好三個 table，不需要有實體就可以開始對你的應用程式開始進行測試，一旦開發完成，只要進行設定轉換為實體資料庫即可，接著在 grails 中有個類別 BootStrap 在這裡可以定義你要測試的初始資料，以便進行相關應用開發，如下：</p>

<p>``` groovy
import finder.*</p>

<p>class BootStrap {</p>

<p>  def init = { servletContext -></p>

<pre><code>    environments {
        development {
            def item1 = new Item(name:"item1").save(failOnError: true, flush: true)
            def batch1 = new Batch(name:"batch1",item:item1).save(failOnError: true, flush: true)
            def itemImage1 = new ItemImage(name:"itemImage1.jpg",item:item1).save(failOnError: true, flush: true)
        }
    }
</code></pre>

<p>  }
  def destroy = {
  }
}
```</p>

<p>一旦伺服器啟動就會執行在 BootStrap 中的程式碼，如果我們在此區塊撰寫新增資料的程式，每次啟動 grails 都會有新的資料可以進行測試，反覆測試的過程中將免去每次都要建立測試資料的麻煩，並且有預設的設定值也可以在此定義，資料準備好了，前後端就可以分開進行，接著來看如何快速定義好 extjs 與 grails 的溝通橋樑。</p>

<h2>以 RESTful 進行前後端溝通</h2>

<p>extjs 4 有個新的 proxy type：rest，一但定義為 rest proxy，在資料操作上將會根據你對前端資料的更新動作給予不同的 http method，如下：</p>

<ul>
<li>新增：POST</li>
<li>修改：UPDATE</li>
<li>刪除：DELETE</li>
<li>查詢：GET</li>
</ul>


<p>我們會用到另一個敏捷開發特性：Don’t Repeat Yourself(DRY)，在 Grails 有另一個設定檔 URLMappings 可以讓我們設定根據前端 request 的 http method 導入至特定後端 controller method，該檔案設定如下：</p>

<p>``` groovy
class UrlMappings {</p>

<pre><code>static mappings = {
    "/$controller/$action?/$id?"{
        constraints {
        }
    }
    "/rest/$controller/$id"{
        action = [GET: "show", PUT:"update", DELETE:"delete"]
        constraints {
        }
    }
    "/rest/$controller"{
        action = [GET:"listAll", POST: "create"]
        constraints {
        }
    }
    "/"(view:"/home/index")
    "500"(view:'/error')
}
</code></pre>

<p>}
```</p>

<p>可以看到在 URLMappings 的設定中：</p>

<p>``` groovy
"/rest/$controller/$id"{</p>

<pre><code>action = [GET: "show", PUT:"update", DELETE:"delete"]
constraints {
}
</code></pre>

<p>}</p>

<p>"/rest/$controller"{</p>

<pre><code>action = [GET:"listAll", POST: "create"]
constraints {
}
</code></pre>

<p>}
```</p>

<p>代表如果有傳入 id 則是上述的第一種 mapping 方式，根據 http method 的不同對應到不同的 controller 的 method；若沒有 id 則是第二種，實際代表的網址可能為 <code>http://localhost/rest/item/1</code> 或者 <code>http://localhost/rest/batch/</code>，就會根據 UrlMappings 的定義觸動在 controller 中的 method，範例如下：</p>

<p>``` groovy
package finder
import grails.converters.JSON
class ItemController {</p>

<pre><code>def listAll = {
    def items=Item.list()
    render (contentType: 'text/json') {
  [
            items: items,
            total: items.size()
        ]
    }
}

def show = { Long id -&gt;
    def item=Item.findById(id)
    render (contentType: 'text/json') {
  [
            item: item
        ]
    }

}

def create = {
    ...
}
def update = {
    ...
}
def delete={
    ...
}
</code></pre>

<p>}
```</p>

<p>剛剛提到對應的 controller method 就如同上面程式碼中的 listAll，show 等等，到這邊，後端的 server 算是已經準備好，可以開始進行測試，是否發現跟一般 java 比，簡潔很多，寫起來還有點像 javascript？實際上 Grails 骨子裡還是 java，執行時會編譯為 class，因為搭配了 java 中的動態語言 groovy 才有這樣的效果，且並沒有捨棄 java 多年累積廣大的第三方套件，當你需要時皆可以引入，不需重新造輪。</p>

<h2>extjs：store.sync() - 簡化更新</h2>

<p>後端 server 快速準備好後，在 extjs 更加簡化呼叫更新資料請求的程序，在 store 的類別提供一個 method 為 sync()，作用在於一旦 store 載入後，只要對 store 執行 insert，remove，insert 確定更新完成後，一旦執行就會對後端 server 發出 http request，所以，你不用勞你費心，extjs 已幫你完成相關程序，範例 controller 如下：</p>

<p>``` javascript
Ext.define('Frontend.controller.common.Standard', {</p>

<pre><code>extend: 'Ext.app.Controller',

doRead: function() {
    this.store.load();
},
doCreate: function() {
    this.store.insert(0, this.model);
},
doDelete:function(){
    var selection = this.grid.getSelectionModel().getSelection()[0];
    if (selection) {
        this.store.remove(selection);
    }
},
doUpdate: function() {
        //更新對 store 的異動
    this.store.sync({
        success : function(){
            console.log("success");
            Ext.Msg.alert('Status', '更新成功');
        },
        failure : function(response, options){
            console.log("failure");
            Ext.Msg.alert('Status', '更新失敗');
        }  
    });
}
</code></pre>

<p>});
```</p>

<h2>快速前端元件建立</h2>

<p>即使用像 grails 這樣的 full stack framework 對於前端介面還是需要自己重頭刻起，若是搭配 sencha architect 將可以補齊這方面的不足：快速建立前端介面，並且為了敏捷快速的開發，一旦介面拉好，就可以儘快確認需求與操作介面，所完成的介面就可以開始著手開發，介面的變動也可以在 architect 中完成，還記得之前有介紹過在 extjs 中的每個小元件都可以作為類別存在，並且 controller 若以每個元件為目標設計，透過混和（mixins）的特性組合 controller 就可以快速調整介面的呈現與互動。</p>

<h2>extjs develop mode &amp; test</h2>

<p>一個好的框架，必須還要能夠方便測試，在 extjs 中可以很方便的指定某個類別作為初始的 view，可以參考上一篇 <a href="http://ithelp.ithome.com.tw/question/10120289">Sencha Architect 快速開發 extjs</a>中「方便進行測試與開發」的介紹，即使你沒有用 Architect，也可以自行定義，別忘了利用這樣的特性對開發中的介面進行測試。</p>

<h2>extjs production mode</h2>

<p>應用程式開發到一個階段，就會從 develop 進階到所謂的 production mode，其目的就是要盡量加速資源的載入，在前端的世界就是要將所有的 js 檔最小化，並且合為一個 js 檔，雖然 extjs 有動態載入，實際在 production 模式這樣是很耗效能的，如果我們要自行利用 minify 工具進行壓縮，在 extjs 中各類別的相依性就無法顧慮到，並且可能因為組成檔案順序不正確造成衝突，所幸，extjs 也注意到這樣的問題，提供 Sencha cmd 來處理 minify js 的程序，並且可以搭配 Architect 使用，步驟如下：</p>

<ol>
<li><p>利用 sencha cmd 產生 extjs 專案</p>

<pre><code> sencha -sdk {extjs_home} generate app {projectName} {projectLocation}
</code></pre></li>
<li><p>修改 sencha 設定檔：修改 {projectLocation}/.sencha/app/sencha.cfg，加入下面兩行 ：</p>

<pre><code> app.dir={projectLocation}
 app.classpath=${app.dir}/app.js,${app.dir}/app
</code></pre></li>
<li><p>進到 {projectLocation} 執行 production 編譯</p>

<pre><code> sencha app build production
</code></pre></li>
</ol>


<p>如此一來就會將執行完的結果產出在 {projectLocation}/build 底下，就是這們簡單！</p>

<h2>resource 控管</h2>

<p>extjs 所完成的介面在 grails 中將作為 resource 存在，且對 grails 而言屬於靜態檔案，因此可以進行快取來加速資源載入，而在 grails 有一設定檔 ApplicationResources 專門在定義要載入的 resource，在設定時必須考慮 develop 與 production 的不同，設定方式如下:</p>

<p>``` groovy
import org.codehaus.groovy.grails.web.context.ServletContextHolder as SCH
modules = {</p>

<pre><code>// develop mode 使用
extjs4_dev {
    defaultBundle 'finder_dev'

    resource url: 'extjs4_dev/resources/ext-theme-neptune/ext-theme-neptune-all.css'        
    resource url: 'ext/ext-all.js'
    resource url: 'ext/ext-theme-neptune.js'
    resource url: 'app.js'

    getFilesForPath('app').each {
        resource url: it
    }
}   
// production mode 使用
</code></pre>

<p>  extjs4 {</p>

<pre><code>    defaultBundle 'finder'
    resource url: 'extjs4/resources/finder_extjs-all.css'
    resource url: 'extjs4/all-classes.js'
}   
</code></pre>

<p>}</p>

<p>// 載入 path 參數底下所有的檔案作為 resource
def getFilesForPath(path) {</p>

<pre><code>def webFileCachePaths = []
def servletContext = SCH.getServletContext()

if(!servletContext) return webFileCachePaths
def realPath = servletContext.getRealPath('/')
def appDir = new File("$realPath/$path")
appDir.eachFileRecurse {File file -&gt;
    if (file.isDirectory() || file.isHidden()) return
    webFileCachePaths &lt;&lt; file.path.replace(realPath, '')
}
webFileCachePaths
</code></pre>

<p>}
```
經由這樣的設定，grails 會自動將 block 中所定義的 js 檔自動合為單一 js 檔，接著我們只要在 grails 中特有的 gsp 加入下列判斷：</p>

<p>```
&lt;g:if env='development'></p>

<pre><code>&lt;r:require modules="extjs4_dev"/&gt;
</code></pre>

<p>&lt;/g:if>
&lt;g:else></p>

<pre><code>&lt;r:require modules="extjs4"/&gt;
</code></pre>

<p>&lt;/g:else>
```
就會根據不同的開發模式載入不同的 resource 組合。</p>

<h2>打完收工，期待下次在相會！</h2>

<p>這是個想法，目前我們也正在投入這樣的應用，預期可以帶來不一樣的開發方式，軟體開發方式不停的在進步，也許還有很多團隊還在使用老舊的方法，這樣的組合，除了可以敏捷快速的開發，利用 extjs 所提供的方便性，相信可以帶來效率的提升，特別是前端的物件建立與操作，表單式的應用程式非常適合，筆者也曾在企業進行 extjs 的教育訓練，歡迎有興趣的讀者可以互相切磋。</p>

<p>系列文章到此告一段落，期待下次在與大家分享！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[grails taggable plugin 搭配 jquery tagit 的完美組合]]></title>
    <link href="http://smlsun.com/blog/2013/03/01/grails-taggable/"/>
    <updated>2013-03-01T18:34:00+08:00</updated>
    <id>http://smlsun.com/blog/2013/03/01/grails-taggable</id>
    <content type="html"><![CDATA[<p>引言：<a href="http://blog.lyhdev.com/2013/01/grails-22.html">快速瀏覽 Grails 2.2 新功能</a></p>

<blockquote><p>Grails 是受到 Ruby on Rails (RoR) 啟發的 Java EE 開發框架，它利用 Java 世界的 Groovy Scripting 語言實現與 Rails MVC 架構相似的開發工具；因為基於 Java 豐富的企業元件基礎，可以同時獲得敏捷的開發效率，並且和既有的 Java 程式保持相容。</p></blockquote>

<p>最近開始想要幫家裡開發一個資訊發佈平台，因為我本身習慣開發 java，這陣子經由 <a href="http://blog.lyhdev.com/">lyhcode</a> 的介紹開始使用 Grails，發現他真的是一個充滿驚奇的 framework，一開始可能會因為他的 <strong>精簡</strong> 讓你感到困惑，原本可能需要的步驟被省略後反而無法理解… 但一旦深入了解並且了解其習性後，才發現原來開發 java 也可以這麼快速！</p>

<p>一旦使用 Grails 後，你就不想用原始的 java 開發程式，正所謂回不去了… 除了骨子裡是 java，外在的部分基本上已經完全不一樣了，是說變帥了嘛？（誤）</p>

<p>回到正題，在一般 blog 的網站，很常用到的 tag (標籤)在實作上… 說實在的細節實在很多，我也不知道該怎麼實作… 在完全不知道怎麼實作光構思就可能花上一天，在加上開發運氣好的話或許 3 天解決，但今天我所要介紹的，只花你 1 小時，就完成 taggable 的實作！！很難想像嘛？就讓我們繼續看下去。</p>

<p>此範例參考下列網站：<a href="http://blog.armbruster-it.de/2011/04/a-perfect-team-grails-taggable-plugin-and-jquery-tagit/">Grails Taggable plugin and JQuery Tagit</a>，在這個範例中用的 grails 版本：1.4；jquery-tagit 版本：1.5。</p>

<p>而本文章撰寫時所使用的 grails 版本：2.2；jquery-tagit 版本：2.0。雖然版本不一樣但步驟上大致相同，首先我們必須安裝 taggable plugin。</p>

<h1>taggable &amp; jquery-ui plugin install</h1>

<p>在新版 2.2 grails 中已不建議使用 plugin install，根據官方的建議我們只要在 BuildConfig.groovy 新增下列：</p>

<pre><code>compile ':spring-security-ui:latest.release'
compile ":taggable:1.0.1"
</code></pre>

<p>一旦進入 grails 運行環境時將會自動安裝 plugin，就是這麼簡單，而 resources plugin 在 2.2 版已內建，所以不需要安裝，接著我們來處理…</p>

<h1>jquery tagit install</h1>

<p>下載 <a href="http://aehlke.github.com/tag-it/">jquery tagit</a></p>

<p>解壓縮後將檔案放置於：</p>

<ul>
<li>jquery.tagit.css: 'web-app/tagit/css/jquery.tagit.css'</li>
<li>tagit.ui-zendesk.css: 'web-app/tagit/css/tagit.ui-zendesk.css'</li>
<li>tag-it.js: 'web-app/tagit/js/tag-it.js'</li>
</ul>


<p>接著需要定義 ApplicationResourses.goovy</p>

<pre><code>tagit {
    dependsOn 'jquery-ui'
    resource url: 'tagit/css/jquery.tagit.css'
    resource url: 'tagit/css/tagit.ui-zendesk.css'
    resource url: 'tagit/js/tag-it.js'
}
</code></pre>

<p> 如此一來，基本環境與需要的套件都已經 ready 了，就讓我們開始實作 taggable 功能，就先從定義…</p>

<h2>domain object</h2>

<p>在 grails 中所謂的 domain object 就是所謂的資料表物件，定義資料結構的地方，假設我們是要開發自己的 blog 平台，那每一篇文章在資料庫中我們就可以定義 table 為 post，相關程式碼如下：</p>

<pre><code>package sample

class Post {
    String title
    String content
}
</code></pre>

<p>我們所要做的就是將 <code>org.grails.taggable.Taggable</code> import 進去，並且實作 Taggable</p>

<pre><code>package sample
import org.grails.taggable.Taggable

class Post implements Taggable {
    String title
    String content
}
</code></pre>

<p>ok～我們的 domain object 準備好的，不需要額外的設定，而且完整的程式碼就是這樣而已，其他勒？沒有了… 詳細 taggable 可以如何操作請參考 grails 官方 <a href="http://www.grails.org/plugin/taggable">taggable plugin api</a>，接著我們需將先將介面也就是 view 的部份完成。</p>

<h2>view</h2>

<p>在 view 的撰寫上，基本上與原文中一樣，這邊對重點的部份進行說明</p>

<p>``` groovy
  ...
  &lt;%-- in the head section --%>
  &lt;%-- 下面會將剛剛在 ApplicationResourses 所定義需要載入的 tagit 相關 js、css 載入 --%>
  &lt;r:use modules="tagit"/>
  ...
  &lt;%-- in the form section --%>
  <fieldset class="form"></p>

<pre><code>&lt;r:script&gt;
  $(function() {
    /*將${g.createLink(action: 'tags')}：產生 postController action 為 tags 的連結
    * 透過設定 jquery tagit 的 tagSource 的網址，一旦當你輸入 tag name
    * 將會透過 ajax 的方式比對輸入的資料與資料庫中的 tag 來當做 auto-completion
    * 的資料來源  
    */
    $("ul[name='tags']").tagit({select:true, tagSource: "${g.createLink(action: 'tags')}"});
  });
&lt;/r:script&gt;

&lt;h3&gt;Tags&lt;/h3&gt;
&lt;div class="fieldcontain"&gt;
  &lt;ul name="tags"&gt;
     &lt;%-- 透過 ${post.tags} 取得 tags 的資料 --%&gt;
    &lt;g:each in="${post.tags}"&gt;
      &lt;li&gt;${it}&lt;/li&gt;
    &lt;/g:each&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</code></pre>

<p>  </fieldset>
```</p>

<p>view 的部分這樣就算完成啦，跟前面比起來稍微複雜一點，但還是挺簡單的，接著我們就需要定義 controller 的部份。</p>

<h2>controller</h2>

<p>首先我們先把 tag 的 auto-completion 實作完成，我們需要先將相關的套件載入</p>

<p>  import org.grails.taggable.Tag
  import grails.converters.JSON</p>

<p>接著我們就可以新增 controller 中的 action</p>

<p>``` groovy
  def tags = {</p>

<pre><code>render Tag.findAllByNameIlike("${params.term}%").name as JSON
</code></pre>

<p>  }
```</p>

<p>如此就完成了 tag 的 auto-completion 實作，不要懷疑，真的就是這樣！我們來看看這句程式碼代表的意義：</p>

<p>  render ... as JSON</p>

<p>指的是將查出來的結果轉為 JSON，接著看下面：</p>

<p>  Tag.findAllByNameIlike("${params.term}%")</p>

<p>根據 <a href="http://grails.org/doc/latest/guide/GORM.html#domainClasses">grails domainClasses API</a> 的說明，提到：</p>

<blockquote><p>Ilike - Similar to a Like, except case insensitive</p></blockquote>

<p>也就是區別大小寫，找出所有的 Name like "${params.term}%"，其中 params.term 是當你在前端 view 的 tag field keyin 尚未被處理為 tag 時回傳的變數名稱，一旦有定義 tagit 的 tagSource，將透過 get http method 的 url params 回傳；所以一旦你 keyin 就會觸動，http request 查詢相似的 tag 名稱，假設我輸入了 t 就會查出 Tag table 中符合資料的欄位 name 轉換為 json 回傳給前端，如下：</p>

<p>  ["test1","test2"]</p>

<p>如此一來在 web 網頁輸入 tag 名稱時就會帶出候選的 tag 讓使用者選取，執行畫面如下：</p>

<p><img src="https://lh5.googleusercontent.com/-CVYWTvOLJNc/UTClM-RrXQI/AAAAAAAALjg/DKmD2J-EhOU/s743/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-03-01+%E4%B8%8B%E5%8D%888.43.34.jpg" alt="img" /></p>

<p>很棒吧！假設 tag 輸入完畢了，我們必須把 tag 的資料寫入資料庫我們定義 action 為 update，相關程式碼如下：</p>

<p>``` groovy
  def update(Long id) {</p>

<pre><code>def post = Post.get(id)
post.properties = params
post.tags = params.tags // 為了儲存 tags 只要新增這行
post.save(flush: true)
</code></pre>

<p>  }
```</p>

<p>就這樣完成 taggable 的開發，包括漂亮的介面、方便的輸入以及資料的更新與讀取，使用 grails 對於開發 java web 應用程式實在是太幸福了！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[程式東西軍： grails & play!]]></title>
    <link href="http://smlsun.com/blog/2013/02/21/grails-play/"/>
    <updated>2013-02-21T16:37:00+08:00</updated>
    <id>http://smlsun.com/blog/2013/02/21/grails-play</id>
    <content type="html"><![CDATA[<p>grails 與 play! 是當今比較完整的 java framework，當然兩者也常被拿來比較，要說比較優？其實各有各的好。</p>

<p>學習一樣工具需要花很多時間，在開始學習一樣新東西時，當然需要知道哪個是比較值得投入的，人生苦短阿！</p>

<p>因此，在搜尋相關資訊時，發現一個比較 grails and play! 的優缺點很不錯的網站，介紹給大家：</p>

<p><a href="http://www.ubertracks.com/preso/#/">Play vs. Grails Smackdown</a></p>

<p><img src="https://lh4.googleusercontent.com/-64F82PXFzn8/USXlKERNNuI/AAAAAAAALiA/4BTWEumSSzg/s786/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-02-21+%E4%B8%8B%E5%8D%885.12.13.jpg" alt="image" /></p>

<p>這網站的內容是用簡報的方式來呈現，個人是蠻喜歡的，他做了兩個網站，分別使用 grails and play! 進行建置，分別是<a href="http://bike.ubertracks.com/">grils - Bike Über Tracks</a> 以及 <a href="http://hike.ubertracks.com/">play! - Hike Über Tracks</a>；當然在比較時需要從各個面向來進行，該網站先從開發一個專案舉凡資料庫、MVC 架構、設定方式等來進行比較。</p>

<p><img src="https://lh4.googleusercontent.com/-fAoYv2Tr204/USXlLVE-RNI/AAAAAAAALiI/AJgJkzTA45w/s786/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-02-21+%E4%B8%8B%E5%8D%885.12.44.jpg" alt="image" /></p>

<p>接著透過一些應用程式評比工具來測試兩者的優劣，除了開發方便性，效能測試外，對於發展趨勢也有很完整的介紹。</p>

<p>最後的結論由三個面向來做為總結，分別是：程式碼、統計分析、生態系統來做為總結。</p>

<p>雖然有時候比較有點無濟於事，況且對於事物的看法每個人都有所不同，沒有絕對對錯，假如你也正在煩惱哪個比較好，希望這樣的資訊能夠協助你判斷囉。</p>

<p>我個人看完以後看起來是 grails 目前佔上風，不過… 科技日新月異，況且 play! 在 hacker news 數上完勝 grails，誰知道呢？</p>

<p>最後提醒大家，不管黑貓白貓，會抓老鼠的就是好貓，用起來最順手的就是好工具！</p>
]]></content>
  </entry>
  
</feed>
