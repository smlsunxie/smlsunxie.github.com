<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript | 蹤影]]></title>
  <link href="http://smlsun.com/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://smlsun.com/"/>
  <updated>2013-08-09T11:33:59+08:00</updated>
  <id>http://smlsun.com/</id>
  <author>
    <name><![CDATA[smlsun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[extjs-7-30：sencha touch 使用 ux 套件，AKA：外掛，以手機網頁啟動照相功能上傳檔案為例]]></title>
    <link href="http://smlsun.com/blog/2013/08/09/extjs-7-30/"/>
    <updated>2013-08-09T09:27:00+08:00</updated>
    <id>http://smlsun.com/blog/2013/08/09/extjs-7-30</id>
    <content type="html"><![CDATA[<p>開發 extjs 時，他能夠帶給我們類似 java swing 元件化的前端開發方式，若能搭配 sencha architect 使用，更能讓開發更加的流暢，關於 architect 的使用可參考筆者在之前在 ithome 所寫的文章：<a href="http://ithelp.ithome.com.tw/question/10120289">extjs 4 系列 4/5：利用 Sencha Architect 快速開發 extjs</a>。</p>

<p>而因為 extjs 設計為元件化以及類類別系統，所以除了官方的元件之外，網路上的先進也開發出很多優秀的套件，以補官方功能上的不足，想當然我們也希望在使用  Architect 時也可以載入 ux 套件作為使用，不過很不幸的，如果單純寫 code 是很輕易達成，但在 Architect 卻不易完成，他的程式碼編輯是有限制的，在查了相關資料後，正好找到一篇：<a href="http://stackoverflow.com/questions/12680645/sencha-architect-xtype-change">Sencha Architect xtype change</a>，剛剛好就解決的這個問題，由開發 Architect 的 one of the lead engineers:Aaron Conran 回答如下：</p>

<blockquote><p>Drag out a List as a top level component. All top level components are their own classes. Set the userAlias and userClassName configurations to values like 'refreshablelist' and 'RefreshableList'. Take a look at the code generated for this.</p>

<p>Drag out a Panel as a top level component, drag the existing RefreshableList in the inspector into the new Panel. A prompt will ask you if you would like to Move, Copy or Link the list, choose "Link". This will create an instance of your subclass RefreshableList.</p></blockquote>

<p>大致的概念是，你可以在 architect 中 view 的最上層新增一個元件 component 讓他作為類別的存在，並且改變 userAlias 以及 userClassName 屬性，以你要載入的 ux 套件之對應 xtype 以及 ClassName，如此一來，該元件就代表 ux 套件在 architect 中的實體類別，這時候你就可以將該元件作為 link 放至於你想要顯示的 container 底下，此時會透過 xtype 來實體化你引入的 ux 套件。</p>

<p>概念說明完後，來用一個例子說明實際的操作方式，在筆者目前的專案中，希望可以利用手機的照相功能來進行資料的上傳，但為了加速及簡化開發所需時間，不考慮使用手機 native 功能，因為若要如此需要包裝成 app 並且若要考慮跨平台，利用 web 網頁是更快的方式，而瀏覽器發展至今，目前比較新的瀏覽器皆有支援手機相機存取的功能，參考這篇：<a href="http://www.html5rocks.com/en/tutorials/getusermedia/intro/">Capturing Audio &amp; Video in HTML5</a>，而為了開發手機平台的 web page，筆者考慮使用 sencha touch 作為前端呈現，既然同樣是 sencha 家族，同樣我們也可以用 architect 進行，而我們需要用到的外掛為 <a href="https://github.com/kostysh/File-uploading-component-for-Sencha-Touch">File-uploading-component-for-Sencha-Touch</a></p>

<p>使用方式在其 github page 有詳細說明，這邊就不再贅述，幾個重點：</p>

<ol>
<li>在 sencha Architect 中，你可以在 Application 的 config 找到 loader 進行設置 ux 原始碼的路徑。</li>
<li><p>接著你可以在 view 新增一個 Component 進行一開始說明的設置，如下圖</p>

<p> <img src="http://" alt="image" /></p></li>
<li><p>參考 <a href="http://www.html5rocks.com/en/tutorials/getusermedia/intro/">Capturing Audio &amp; Video in HTML5</a> 這篇文章，我們裡面有一段有提到，要讓瀏覽器存取相機，我們只要簡單的新增 html 元件 <code>&lt;input capture="camera" accept="image/*" type="file" &gt;</code> 即可。</p></li>
<li>而筆者所用的套件，主要是用來進行檔案上傳，所以基本上並沒有 <code>capture="camera" accept="image/*"</code> 的屬性，因此我們可以調整該 ux 的原始碼，修改如下：</li>
</ol>


<p>``` javascript</p>

<pre><code>    // Hidden file element
    {
        tag: 'form',
        reference: 'formElement',
        hidden: false,            

        children: [
            {

                capture: "camera", //  add for get pic from camera
                accept: "image/*", //  add for get pic from camera

                tag: 'input',
                reference: 'fileElement',
                type: 'file',
                name: 'userfile',
                tabindex: -1,
                hidden: false,
                style: 'opacity:0;position:absolute;top:-3px;right:-3px;bottom:-3px;left:-3px;z-index:16777270;'
            }
        ]
    }
</code></pre>

<p>```</p>

<p>如此一來，該元件就可以讓我在使用手機操作系統時透過相機擷取照片，fork 後修改的 github 如下：<a href="https://github.com/smlsunxie/File-uploading-component-for-Sencha-Touch">smlsunxie/File-uploading-component-for-Sencha-Touch</a>，有需要的讀者可以自行取用，最後執行的畫面如下：</p>

<p><img src="http://" alt="image" /></p>

<p>點選上圖下方的 browser 將會開啟下面畫面，因為筆者使用的是 ios 模擬器，所以不支援鏡頭，只支援上傳檔案，因此會直接進入選取畫面，如果是實體機器，將會詢問要使用相機，還是要選取檔案上傳，筆者已有實機測試。</p>

<p>在這個手機平板普及的現在，相信使用照相功能是很平常的事，如果需求僅止於此，不需要大費周章開發 app 形式，快速把功能做出來，儘快推出才是重點！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[extjs-6-30：如何使用 query component]]></title>
    <link href="http://smlsun.com/blog/2013/08/08/extjs-6-30/"/>
    <updated>2013-08-08T12:03:00+08:00</updated>
    <id>http://smlsun.com/blog/2013/08/08/extjs-6-30</id>
    <content type="html"><![CDATA[<p>使用 extjs 一定要會用它的 query component，使用起來有點類似 css selector，jquery 也是類似的概念，有些選擇語法意義是相同的，不管是在定義 controller，或是在 binding event 的時候都會用到他，筆者找到一篇中國朋友寫的 query component 介紹，藉由他的文章進行介紹，連結如下：<a href="http://www.cnblogs.com/daxin/archive/2013/06/01/3112530.html">ExtJs ComponentQuery</a></p>

<h2>ID selector</h2>

<p>根據元件 id 來 query，具有唯一性。前面以 # 號來代表, 取得 itemid 或者 id 符合的元件，範例如下：</p>

<pre><code>var panel = Ext.ComponentQuery.query('#panel');
</code></pre>

<h2>xtype selector</h2>

<p>根據 xtype 來選擇，可選擇前面是否以 '.' 來標示，或者沒有任何符號也代表 xtype 查詢，如：</p>

<pre><code>var cmp= Ext.ComponentQuery.query('gridpanel');
var cmp= Ext.ComponentQuery.query('.gridpanel');
</code></pre>

<p>如果我們要找某個類型下面的所擁有的元件 ID 或 itemid，我們可以這樣下</p>

<pre><code>panel#myPanel 
</code></pre>

<p>代表我要查詢 xtype 為 panel 底下有元件 id 為 myPanel</p>

<h2>attributes selector</h2>

<p>根據元件的屬性來選擇，舉例來說：</p>

<p>回傳擁有 iconCls 屬性的 Ext.Button 的實例：</p>

<pre><code>var btnOk= Ext.ComponentQuery.query('button[iconCls]');
</code></pre>

<p>其中如果 iconCls 等於 null 或是 false 都視為不符合條件。</p>

<p>除此只外也可以判斷屬性指定特定的值，如下：</p>

<pre><code>var btnOk= Ext.ComponentQuery.query('button[text = "ok"]'); 
</code></pre>

<p>取得 text 屬性為 'ok' 的 Ext.Button 的。</p>

<p>值得注意的是，屬性可以是任何自定義屬性：</p>

<pre><code>Ext.create("Ext.Panel" , {
   myAttribute: "helloWorld" 
});

Ext.ComponentQuery.query('panel[myAttribute= "helloWorld"]');
</code></pre>

<p>如上面的例子，自己定義的屬性也可以作為判斷。</p>

<h2>descendant(後代) selector</h2>

<p>用來選擇特定容器或容器組的後代，後代選擇器由兩個常用選擇器，中間加一個空格表示。其中前面的選擇器選擇父元件，後面的選擇器選擇後代元件，範例如下：</p>

<p>取得所有 id 為 'myCt' 中的 Ext.Panel：</p>

<pre><code>var panelsWithinmyCt = Ext.ComponentQuery.query('#myCt panel');
</code></pre>

<p>E F All descendant Components of E that match F (遞歸向下查詢所有可以符合的元件)</p>

<h2>child selector</h2>

<p>請注意這個選擇器與後代選擇器的區別，子選擇器（child selector）僅是指它的<strong>直接後代</strong>，而後代選擇器是作用於所有子後代元件。後代選擇器通過空格來進行選擇，而子選擇器是通過'>'進行選擇，範例如下：</p>

<p>取得所有 id 為 'myCt' 的 container 中的直接子元件 Ext.Panel ：</p>

<p>var directChildPanel = Ext.ComponentQuery.query('#myCt > panel');</p>

<p>E > F  All direct children Components of E that match F (查詢直接後代,其他非直接的則不符合)</p>

<p>參考下面範例來了解對應關係：</p>

<pre><code>Ext.create("Ext.Panel" , {
    itemId: "myCt" ,
    itmes:[{
        xtype: "panel" ,
        html : "我是 myCt 的直接後代，也是 myCt 的後代" ,
        itmes: [{
            xtype: "panel" ,
            html : "我是 myCt 的後代，但不是直接後代" ,
        }]
    }]
});
</code></pre>

<h2>parent selector</h2>

<p>查找給定元素的父容器（遞迴向上查找所有符合的元素)。</p>

<p>E ^ F  All parent Components of E that match F</p>

<pre><code>Ext.ComponentQuery.query('textfield ^ form');
</code></pre>

<h2>條件式關鍵字</h2>

<p>~=：符合完整的字串，以空白字元分開，假設我們有兩個元件：</p>

<pre><code>Ext.create('Ext.panel.Panel' , {
    cls: 'foo-cls my-cls bar-cls'
});

Ext.create( 'Ext.window.Window' , {
    cls: 'my-cls' 
});
</code></pre>

<p>下述查詢都會符合：</p>

<pre><code>Ext.ComponentQuery.query('panel[cls~=my-cls]');
</code></pre>

<p>^=：開頭符合的屬性，如同 stratWith</p>

<p>$=：結尾符合的屬性，如同 endWith</p>

<p>*=：任何地方只要符合都算，如同 indexOf</p>

<p>@：只查詢使用類別的屬性，不會去查詢 extend 的父類別的屬性，使用方式：</p>

<pre><code>Ext.ComponentQuery.query('panel[@collapsed=false]')
</code></pre>

<h2>Conditional matching(條件符合)</h2>

<p>符合同時滿足多個條件的符合表達式，AND：</p>

<pre><code>Ext.ComponentQuery.query('panel[cls~=my-cls][floating=true][title$="sales data"]');
</code></pre>

<p>符合用 ',' 逗號分隔的滿足任意一個條件的元件，OR：</p>

<pre><code>Ext.ComponentQuery.query('field[fieldLabel^=User], field[fieldLabel*=password]');
</code></pre>

<h2>Pseudo classes</h2>

<p>查詢滿足條件的第一個元素，<code>:first</code>：</p>

<pre><code>Ext.ComponentQuery.query('panel &gt; button:fi​​rst');
</code></pre>

<p>查詢滿足條件的最後一個元素，<code>:last</code>：</p>

<pre><code>Ext.ComponentQuery.query('form[title=Profile] field:last');
</code></pre>

<p>取得可以獲得焦點的元件，<code>:focusable</code>：</p>

<pre><code>panel . down ( ':focusable' ). focus ();
</code></pre>

<p>符合相反的結果，<code>:not</code>：</p>

<p>取得所有field但是xtype不是hiddenfield的元件</p>

<pre><code>form . query ( 'field:not( hiddenfield )' );
</code></pre>

<p>其中 <code>hiddenfield</code> 部分可以放任何表達式如 <code>title^=hello</code></p>

<p>指定每間隔多少的元件，<code>:nth-child</code>：</p>

<p>透過範例可以較清楚如何使用此種 selector</p>

<pre><code>//找出奇數的元件
form.query('field:nth-child(2n+1)'); 
//也可以使用關鍵字 :nth-child(odd)

//找出偶數的元件
form.query('field:nth-child(2n)');
//也可以使用關鍵字:nth-child(even)

//找出 3 倍數的元件
form.query('field:nth-child(3n)');
</code></pre>

<h2>關於使用 component.query 的效能上的建議</h2>

<p>從 extjs <a href="http://docs.sencha.com/extjs/4.2.1/#!/api/Ext.ComponentQuery-method-query">component.query API</a> 中，我們可以看到參數的使用為：<code>query( selector, [root] )</code></p>

<p>其中 root 為選用，指的是要從哪個 Container 的範圍開始進行查詢，雖然是選用，強烈建議最好都要設置，如此一來在執行查詢時，extjs 在小範圍進行查詢，總比全域搜尋來的快，所以我們可以這樣執行：</p>

<pre><code>var btnRefresh = Ext.ComponentQuery.query('#btnRefresh', container); 
</code></pre>

<p>使用 Ext.ComponentQuery 來進行查詢，又或者，我們可以直接對某個 container 進行 query</p>

<pre><code>var btnRefresh = container.query('#btnRefresh');
</code></pre>

<p>效果跟第一種方式一樣，都是區域性的元件 query。</p>

<h2>其他內建函數查詢</h2>

<p>更精確的定義，可以參考官方的 API 說明，如每個函式的連結。</p>

<p><a href="http://docs.sencha.com/extjs/4.2.1/#!/api/Ext.Queryable-method-down">down([selector])</a>：取得第一個的子元件</p>

<p><a href="http://docs.sencha.com/extjs/4.2.1/#!/api/Ext.Queryable-method-child">child([selector])</a>：取得第一個直接子元件</p>

<p><a href="http://docs.sencha.com/extjs/4.2.1/#!/api/Ext.AbstractComponent-method-up">up([selector],[limit])</a>：取得最接近的 container。</p>

<p>搞懂 compnent query 可以讓你在 extjs 的世界事半工倍，而且一點也不難的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[extjs-5-30 事件宣告的建議]]></title>
    <link href="http://smlsun.com/blog/2013/08/05/extjs-5-30/"/>
    <updated>2013-08-05T23:18:00+08:00</updated>
    <id>http://smlsun.com/blog/2013/08/05/extjs-5-30</id>
    <content type="html"><![CDATA[<p>在使用 extjs 時，我們有幾個地方可以宣告事件的處理：</p>

<ol>
<li>在 controller 下宣告</li>
<li>在 component 下宣告</li>
</ol>


<p>一般剛開始使用 extjs 會搞不清楚什麼時候該使用 mvc 中的 controller 來定義，又或者直接宣告在 component 上，特別是 extjs 4 一大特性 mvc，會讓使用者覺得宣告在 controller 是第一選擇，這樣架構上比較符合官方建議，其實不然，既然 extjs 也支援在 component 上宣告事件，自然有其意義。</p>

<p>既然兩個方式都可以宣告事件，我們該如何區別事件的歸屬呢？筆者認為可以從事件發生關係到的元件或者元件特性（特定功能或是共用元件）來做區別，在明確的說，假設事件所操作的對象所涵蓋的範圍只有該元件以及元件 item 屬性底下所掛載的其他元件，那就應該定義在元件上，若是事件處理涵蓋多個元件的組合互動，那就應該要使用 controller 來定義。</p>

<p>另一個角度，如果該功能屬於共用元件，那事件應該定義在元件底下，屬於特定的功能事件，那應該使用 controller 來處理。</p>

<p>如此一來，如果是定義在元件上的事件，只要某功能有引入該元件，就不需要重覆定義，該元件就有基本的事件互動，一旦需要調整，也不需要一一去改有用到的元件，只要修改宣告事件的元件即可，這樣的情形就像通用元件的狀況，相反地，定義在 controller 的事件就是個別功能的特性了。</p>

<p>舉例來說，如筆者上一篇 <a href="http://smlsun.com/blog/2013/08/05/extjs-4-30/">精簡程式碼案例分享</a> 中的範例是一個標準的功能工具列，事件的定義就是宣告在元件定義上，之後只要有引入使用該標準工具列，就不需要在定義相關的事件。</p>

<p>最後根據上述的內容，整理出建議的事件定義對象</p>

<ol>
<li>如果事件的處理需要整合多個元件那應該定義在 controller 底下</li>
<li>如果該元件屬於特定功能才有的元件就算事件範圍只在某元件底下，事件還是要要定義在 controller 底下。</li>
<li>如果事件處理範圍只屬於某個元件底下並且屬於公用元件，那事件應該定義在元件</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[extjs-4-30 精簡程式碼案例分享]]></title>
    <link href="http://smlsun.com/blog/2013/08/05/extjs-4-30/"/>
    <updated>2013-08-05T19:54:00+08:00</updated>
    <id>http://smlsun.com/blog/2013/08/05/extjs-4-30</id>
    <content type="html"><![CDATA[<p>程式的寫法百百種，要能夠完成一個特定功能沒有標準答案，但要寫的精簡需要經驗的累積，甚至需要對語言特性要有一定的了解，剛好筆者最近 review 了一段 extjs 程式碼，可以與大家分享。</p>

<p>在開始之前，必須先提到一個觀念，extjs 雖然是 RIA，並且有自己的類別化系統，不過他的類別或物件脫離不了 javascript，因此 javascript 中的<a href="http://www.josephjiang.com/presentation/OOJS/object-basic.html">物件</a>、<a href="http://blog.joomla.org.tw/javascript/54-general/81-javascript-functon-basic.html">函數</a>、<a href="http://smlsun.com/blog/2013/01/31/javascript-what-is-this/">this</a> 的特性他也都有。</p>

<p>接著我們來看一段 extjs 類別的程式碼，如下：</p>

<p>這樣的結構可以參考 extjs 官方對於 <a href="http://docs-origin.sencha.com/extjs/4.2.1/#!/api/Ext-method-define">Ext.define</a> 的說明，其中函數所包含的參數 <code>define( className, data, createdFn )</code> data 的形態就是 Object，所以在下列程式第二個參數所傳入的就是標準的 javascript Object，只是裡面所定義的屬性 extjs 有自己的特定的命名以便辨別作為處理，但不代表你不可以把它當作一般的 Object 來操做，在使用 extjs 時很容易讓使用的人誤解認為他是個特別的存在，其實他也只是 javascript。</p>

<p>有了這樣的認知，我們看看下面的程式碼，裡面有很多段重覆的程式碼，參考註解。</p>

<p>``` javascript
Ext.define('foodprint.view. ', {</p>

<pre><code>extend: 'Ext.toolbar.Toolbar',
alias: 'widget.stdeditortoolbar',

requires: [
    'foodprint.view.CreateBtn',
    'foodprint.view.DeleteBtn',
    'foodprint.view.SaveBtn',
    'foodprint.view.ReadBtn',
    'foodprint.view.UpdateBtn'
],

itemId: 'stdEditorToolbar',

initComponent: function() {
    var me = this;

    Ext.applyIf(me, {
        items: [
            {
                xtype: 'createbtn',
                listeners: {
                    click: {
                        fn: me.onCreateBtnClick,
                        scope: me
                    }
                }
            },
            {
                xtype: 'deletebtn',
                disabled: true,
                listeners: {
                    click: {
                        fn: me.onDeleteBtnClick,
                        scope: me
                    }
                }
            },
            {
                xtype: 'savebtn',
                disabled: true,
                listeners: {
                    click: {
                        fn: me.onSaveBtnClick,
                        scope: me
                    }
                }
            },
            {
                xtype: 'readbtn'
            },
            {
                xtype: 'updatebtn',
                disabled: true,
                listeners: {
                    click: {
                        fn: me.onUpdateBtnClick,
                        scope: me
                    }
                }
            }
        ]
    });

    me.callParent(arguments);
},

onCreateBtnClick: function(button, e, eOpts) {
        //重覆
    var crebtn=btn;
    var delbtn=button.ownerCt.down('button[itemId=deleteBtn]');
    var savbtn=button.ownerCt.down('button[itemId=saveBtn]');
    var updbtn=button.ownerCt.down('button[itemId=updateBtn]');
    var redbtn=button.ownerCt.down('button[itemId=readBtn]');

    delbtn.setDisabled(true);
    savbtn.setDisabled(false);
    updbtn.setDisabled(true);
    redbtn.setDisabled(true);
},

onDeleteBtnClick: function(button, e, eOpts) {
        //重覆
    var crebtn=button.ownerCt.down('button[itemId=createBtn]');
    var delbtn=button;
    var savbtn=button.ownerCt.down('button[itemId=saveBtn]');
    var updbtn=button.ownerCt.down('button[itemId=updateBtn]');
    var redbtn=button.ownerCt.down('button[itemId=readBtn]');

    delbtn.setDisabled(true);
},

onSaveBtnClick: function(button, e, eOpts) {
        //重覆
    var crebtn=button.ownerCt.down('button[itemId=createBtn]');
    var delbtn=button.ownerCt.down('button[itemId=deleteBtn]');
    var savbtn=button;
    var updbtn=button.ownerCt.down('button[itemId=updateBtn]');
    var redbtn=button.ownerCt.down('button[itemId=readBtn]');

    savbtn.setDisabled(true);
},

onUpdateBtnClick: function(button, e, eOpts) {
        //重覆
    var crebtn=button.ownerCt.down('button[itemId=createBtn]');
    var delbtn=button.ownerCt.down('button[itemId=deleteBtn]');
    var savbtn=button.ownerCt.down('button[itemId=saveBtn]');
    var updbtn=button;
    var redbtn=button.ownerCt.down('button[itemId=readBtn]');

    updbtn.setDisabled(true);
}
</code></pre>

<p>});
```</p>

<p>上面的每一個函式都重覆宣告了 5 個 btn，這樣在維護上是沒有效率的，假設我們需要在加一個按鈕，我們就必須每個函式在加一個宣告，其實還有更好的方式，假設你了解了物件、函式、還有 this 的特性，我們可以將這五個按鈕的參照存在第二個參數 data 下，透過例如：<code>this.updateBtn=component.down('button[itemId=createBtn]');</code> 如下面程式碼中 <code>onStdEditorToolbarRender</code>，用到的事件 binding 是 extjs Component <a href="http://docs-origin.sencha.com/extjs/4.2.1/#!/api/Ext.Component-event-render">render 事件</a> 元件實體化後觸動該事件進行處理，只要找到一個這樣只執行一次的進入點，將需要用到的元件存入 this 這個物件，之後我們就不需要重覆 query 物件的參照，也更加快處理速度，雖然這樣的調整可能效果不明顯，但累積起還是很可觀的，特別當你感覺到慢的時候，可能已經遍佈程式碼中，<strong>好習慣要從日常養成</strong>。</p>

<p>``` javascript
Ext.define('foodprint.view.StdEditorToolbar', {</p>

<pre><code>extend: 'Ext.toolbar.Toolbar',
alias: 'widget.stdeditortoolbar',

requires: [
    'foodprint.view.CreateBtn',
    'foodprint.view.DeleteBtn',
    'foodprint.view.SaveBtn',
    'foodprint.view.ReadBtn',
    'foodprint.view.UpdateBtn'
],

itemId: 'stdEditorToolbar',

initComponent: function() {
    var me = this;

    Ext.applyIf(me, {
        items: [
            {
                xtype: 'createbtn',
                listeners: {
                    click: {
                        fn: me.onCreateBtnClick,
                        scope: me
                    }
                }
            },
            {
                xtype: 'deletebtn',
                disabled: true,
                listeners: {
                    click: {
                        fn: me.onDeleteBtnClick,
                        scope: me
                    }
                }
            },
            {
                xtype: 'savebtn',
                disabled: true,
                listeners: {
                    click: {
                        fn: me.onSaveBtnClick,
                        scope: me
                    }
                }
            },
            {
                xtype: 'readbtn'
            },
            {
                xtype: 'updatebtn',
                disabled: true,
                listeners: {
                    click: {
                        fn: me.onUpdateBtnClick,
                        scope: me
                    }
                }
            }
        ],
        listeners: {
            render: {
                fn: me.onStdEditorToolbarRender,
                scope: me
            }
        }
    });

    me.callParent(arguments);
},

onCreateBtnClick: function(button, e, eOpts) {
    this.delbtn.setDisabled(true);
    this.savbtn.setDisabled(false);
    this.updbtn.setDisabled(true);
    this.redbtn.setDisabled(true);
},

onDeleteBtnClick: function(button, e, eOpts) {
    this.delbtn.setDisabled(true);
},

onSaveBtnClick: function(button, e, eOpts) {
    this.savbtn.setDisabled(true);
},

onUpdateBtnClick: function(button, e, eOpts) {
    this.updbtn.setDisabled(true);
},

onStdEditorToolbarRender: function(component, eOpts) {
    this.crebtn=component.down('button[itemId=createBtn]');
    this.delbtn=component.down('button[itemId=deleteBtn]');
    this.savbtn=component.down('button[itemId=saveBtn]');
    this.updbtn=component.down('button[itemId=updateBtn]');
    this.redbtn=component.down('button[itemId=readBtn]');

}
</code></pre>

<p>});</p>

<p>```</p>

<p>優化過的程式碼，可以看到物件的 query 只有一次，之後都可以透過 this 來存取，每個函式所執行的都是關鍵的程式碼，沒有多餘的宣告，雖然是很簡單的觀念與應用，如果知道將會受用無窮，不只在 extjs 在一般的 javascript 開發也可以應用。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[extjs-3-30 mixins(混和) 特性說明]]></title>
    <link href="http://smlsun.com/blog/2013/08/05/extjs-3-30/"/>
    <updated>2013-08-05T11:56:00+08:00</updated>
    <id>http://smlsun.com/blog/2013/08/05/extjs-3-30</id>
    <content type="html"><![CDATA[<p>extjs4 中的 mixsins 是 extjs4 的新特性，在筆者之前寫過的文章中<a href="http://ithelp.ithome.com.tw/question/10120091">extjs 4 系列 1/5：新特性與基本概念</a> mixins (混合複數classes) 章節，有做過簡單介紹，讀者可以參考相關說明，了解 mixsins 的特性，官方 API 可參考連結：<a href="http://docs-origin.sencha.com/extjs/4.2.1/#!/api/Ext.Class-cfg-mixins">mixins API</a>，在 extjs 中屬於 Ext.Class 的函式，也就等於所有不管 mvc 或是元件，都可以使用 mixins 的特性。</p>

<p>接著，想要知道 mixins 在不同狀況下的處理方式可參考 <a href="http://www.cnblogs.com/fsjohnhuang/archive/2013/01/29/2880705.html#o1.3.3.">Ext JS 4 First Look 中文翻譯</a> mixins 章節，在使用上就必須要注意什麼情況下函式或屬性在捨麼情況下會被保留，什麼會被覆蓋。</p>

<p>舉個例子，假設我們有兩個 controller 分別如下：</p>

<p>共用元件之 controller：</p>

<p>``` javascript
Ext.define('foodprint.controller.StdController', {</p>

<pre><code>extend: 'Ext.app.Controller',

views: [
    'StdEditorToolbar'
],

refs: [
    {
        ref: 'stdEditorToolbar',
        selector: 'stdeditortoolbar'
    }
],

initial: function(tbar) {
    ...
},

onCreateBtnClick: function(btn) {
 ... 
}
</code></pre>

<p>});</p>

<p>```</p>

<p>另一個別功能之 controller:</p>

<p>``` javascript
Ext.define('foodprint.controller.AController', {</p>

<pre><code>extend: 'Ext.app.Controller',

mixins: {
    StdEditorToolbarCtrl: 'foodprint.controller.StdController'
},

views: [
    'BatchEditor'
],

refs: [
    {
        ref: 'batchGrid',
        selector: 'batchgrid'
    }
],

init: function(application) {
    ...
},

readBatch: function(obj, record, item, index, e, eOpts) {
    ...
},
</code></pre>

<p>});
```</p>

<p>在上述的使用情境中，StdController 中的 refs 將會失效，保留 AController 中的 refs，因此在這樣狀況下，若要在 AController 也要能夠有 StdController 中 refs 定義的元件，勢必要在 AController 再次定義一次 StdController 的 refs。</p>

<p>另一種使用情境：假設被 mixins 的類別跟基礎類別有同名的函式，但是我們希望兩個個別實作同名函式<strong>都可以被執行</strong>可以參考 <a href="http://docs-origin.sencha.com/extjs/4.2.1/#!/api/Ext.Class-cfg-mixins">mixins API</a>的範例：</p>

<p>``` javascript</p>

<p>Ext.define('CanSing', {</p>

<pre><code> sing: function() {
     alert("I'm on the highway to hell...")
 }
</code></pre>

<p>});</p>

<p>Ext.define('Musician', {</p>

<pre><code> mixins: {
     canSing: 'CanSing'
 },

 sing: function() {
     // delegate singing operation to mixin
     this.mixins.canSing.sing.call(this);
 }
</code></pre>

<p>})
```</p>

<p>希望透過本篇可以讓讀者了解 mixins 的特性，進而有效的重覆利用函式，減少不必要的重覆程式碼。</p>
]]></content>
  </entry>
  
</feed>
